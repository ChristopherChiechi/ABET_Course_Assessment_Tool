{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ty\\\\Desktop\\\\ABET_frontend\\\\abet-tool\\\\components\\\\admin-components\\\\EditCourseAssignments\\\\Autocomplete.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Autocomplete.css\"; //autocomplete functionality from https://www.digitalocean.com/community/tutorials/react-react-autocomplete\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChange\", e => {\n      const {\n        suggestions\n      } = this.props;\n      const userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      const filteredSuggestions = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1); // Update the user input and filtered suggestions, reset the active\n      // suggestion and make sure the suggestions are shown\n\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n    });\n\n    _defineProperty(this, \"onClick\", e => {\n      // Update the user input and reset the rest of the state\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n    });\n\n    _defineProperty(this, \"onKeyDown\", e => {\n      const {\n        activeSuggestion,\n        filteredSuggestions\n      } = this.state; // User pressed the enter key, update the input and close the\n      // suggestions\n\n      if (e.keyCode === 13) {\n        this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n      } // User pressed the up arrow, decrement the index\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          this.setState({\n            activeSuggestion: activeSuggestion - 1\n          });\n        } // User pressed the down arrow, increment the index\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            this.setState({\n              activeSuggestion: activeSuggestion + 1\n            });\n          }\n    });\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n  } // Event fired when the input value is changed\n\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = __jsx(\"ul\", {\n          class: \"suggestions\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 11\n          }\n        }, filteredSuggestions.map((suggestion, index) => {\n          let className; // Flag the active suggestion with a class\n\n          if (index === activeSuggestion) {\n            className = \"suggestion-active\";\n          }\n\n          return __jsx(\"li\", {\n            className: className,\n            key: suggestion,\n            onClick: onClick,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 17\n            }\n          }, suggestion);\n        }));\n      }\n    }\n\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }\n    }, __jsx(\"input\", {\n      className: \"faculty-input\",\n      type: \"text\",\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      value: userInput,\n      placeholder: \"Unassigned\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }), suggestionsListComponent);\n  }\n\n}\n\n_defineProperty(Autocomplete, \"propTypes\", {\n  suggestions: PropTypes.instanceOf(Array)\n});\n\n_defineProperty(Autocomplete, \"defaultProps\", {\n  suggestions: []\n});\n\nexport default Autocomplete;","map":{"version":3,"sources":["C:/Users/Ty/Desktop/ABET_frontend/abet-tool/components/admin-components/EditCourseAssignments/Autocomplete.js"],"names":["React","Component","Fragment","PropTypes","Autocomplete","constructor","props","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","innerText","state","keyCode","length","render","onChange","onClick","onKeyDown","suggestionsListComponent","map","index","className","instanceOf","Array"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Autocomplete.css\";\r\n\r\n//autocomplete functionality from https://www.digitalocean.com/community/tutorials/react-react-autocomplete\r\n\r\nclass Autocomplete extends Component {\r\n  static propTypes = {\r\n    suggestions: PropTypes.instanceOf(Array)\r\n  };\r\n\r\n  static defaultProps = {\r\n    suggestions: []\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // The active selection's index\r\n      activeSuggestion: 0,\r\n      // The suggestions that match the user's input\r\n      filteredSuggestions: [],\r\n      // Whether or not the suggestion list is shown\r\n      showSuggestions: false,\r\n      // What the user has entered\r\n      userInput: \"\"\r\n    };\r\n  }\r\n\r\n  // Event fired when the input value is changed\r\n  onChange = e => {\r\n    const { suggestions } = this.props;\r\n    const userInput = e.currentTarget.value;\r\n\r\n    // Filter our suggestions that don't contain the user's input\r\n    const filteredSuggestions = suggestions.filter(\r\n      suggestion =>\r\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n    );\r\n\r\n    // Update the user input and filtered suggestions, reset the active\r\n    // suggestion and make sure the suggestions are shown\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions,\r\n      showSuggestions: true,\r\n      userInput: e.currentTarget.value\r\n    });\r\n  };\r\n\r\n  // Event fired when the user clicks on a suggestion\r\n  onClick = e => {\r\n    // Update the user input and reset the rest of the state\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions: [],\r\n      showSuggestions: false,\r\n      userInput: e.currentTarget.innerText\r\n    });\r\n  };\r\n\r\n  // Event fired when the user presses a key down\r\n  onKeyDown = e => {\r\n    const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n    // User pressed the enter key, update the input and close the\r\n    // suggestions\r\n    if (e.keyCode === 13) {\r\n      this.setState({\r\n        activeSuggestion: 0,\r\n        showSuggestions: false,\r\n        userInput: filteredSuggestions[activeSuggestion]\r\n      });\r\n    }\r\n    // User pressed the up arrow, decrement the index\r\n    else if (e.keyCode === 38) {\r\n      if (activeSuggestion === 0) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n    }\r\n    // User pressed the down arrow, increment the index\r\n    else if (e.keyCode === 40) {\r\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onChange,\r\n      onClick,\r\n      onKeyDown,\r\n      state: {\r\n        activeSuggestion,\r\n        filteredSuggestions,\r\n        showSuggestions,\r\n        userInput\r\n      }\r\n    } = this;\r\n\r\n    let suggestionsListComponent;\r\n\r\n    if (showSuggestions && userInput) {\r\n      if (filteredSuggestions.length) {\r\n        suggestionsListComponent = (\r\n          <ul class=\"suggestions\">\r\n            {filteredSuggestions.map((suggestion, index) => {\r\n              let className;\r\n\r\n              // Flag the active suggestion with a class\r\n              if (index === activeSuggestion) {\r\n                className = \"suggestion-active\";\r\n              }\r\n\r\n              return (\r\n                <li\r\n                  className={className}\r\n                  key={suggestion}\r\n                  onClick={onClick}\r\n                >\r\n                  {suggestion}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <input\r\n          className=\"faculty-input\"\r\n          type=\"text\"\r\n          onChange={onChange}\r\n          onKeyDown={onKeyDown}\r\n          value={userInput}\r\n          placeholder=\"Unassigned\"\r\n        />\r\n        {suggestionsListComponent}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;"]},"metadata":{},"sourceType":"module"}