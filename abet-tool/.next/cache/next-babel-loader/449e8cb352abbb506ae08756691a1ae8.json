{"ast":null,"code":"// Helper API Class\nimport cookieCutter from 'cookie-cutter';\nconst root = \"https://localhost:44372/api\"; // The base URL for each request\n\nconst OK = 200; //200 Ok status code\n\nconst UNAUTHORIZED = 401; //401 Unauthorized status code\n\nconst BAD_REQUEST = 400; //400 Bad Request status code\n\nconst SERVER_ERROR = 500; //500 Internal Server Error status code\n\nconst JSON_ERROR_MSG = \"Error: Could not parse JSON.\";\nconst NOT_LOGGED_IN_MSG = \"Error: Your session has expired. Please log in again.\";\nconst SERVER_ERROR_MSG = \"Internal Server Error: Please try again later.\";\nconst BAD_REQUEST_MSG = \"Error: Some of the provided parameters are invalid.\";\nvar token = \"\"; //holds value of the token cookie\n\nexport default class API {\n  /* This function is for getInitialProps.\r\n  cookieCutter is undefined in getInitialProps,\r\n  so this function sets the token to the value of the cookie\r\n  passed in from getInitialProps. */\n  setToken(t = \"\") {\n    token = t;\n  } // generic function for sending POST requests\n  //    Input: route and body\n  //    Output: The JSON that is returned from the route\n\n\n  async sendPost(route = \"\", body = {}) {\n    const url = root + route; // Combine the root URL with the specified route\n\n    var statusCode; //if the request is not from getInitialProps, meaning cookieCutter is defined, retreive the cookie\n\n    if (typeof cookieCutter.get == \"function\") {\n      token = cookieCutter.get(\"token\");\n    }\n\n    return fetch(url, {\n      method: \"POST\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + token\n      },\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(body)\n    }).then(response => {\n      statusCode = response.status;\n\n      if (response.status != OK) {\n        console.log(\"RIGHT HERE\");\n      }\n      /*\r\n      switch (response.status) {\r\n          case UNAUTHORIZED:\r\n              console.log(new ErrorObj(NOT_LOGGED_IN_MSG, false));\r\n              return new ErrorObj(NOT_LOGGED_IN_MSG, false);\r\n          case SERVER_ERROR:\r\n              console.log(new ErrorObj(SERVER_ERROR_MSG));\r\n              return new ErrorObj(SERVER_ERROR_MSG);\r\n          case BAD_REQUEST:\r\n              console.log(new ErrorObj(BAD_REQUEST_MSG));\r\n              return new ErrorObj(BAD_REQUEST_MSG);\r\n      }*/\n\n      /*if (response.status != OK) {\r\n          console.log(json[\"message\"]);\r\n          return new ErrorObj(json[\"message\"]);\r\n      }\r\n      else*/\n\n\n      return response.json();\n    }).then(json => {\n      if (statusCode == SERVER_ERROR_MSG) console.log(\"HERERERERERERERER\");\n      return json;\n    }).catch(() => {\n      return new ErrorObj(JSON_ERROR_MSG);\n    });\n  } //---login(userid, password)---\n  //    Input: UserId, Password\n  //    Output: \"Admin\", \"Instructor\", \"Student/TA\" or boolean for failure\n\n\n  async login(userid = \"\", password = \"\") {\n    const body = {\n      userid: userid,\n      password: password\n    };\n    return await this.sendPost(\"/login\", body).then(json => {\n      var expires = new Date();\n      expires.setHours(expires.getHours() + 24); //expires in 24 hours\n\n      expires = expires.toUTCString();\n      cookieCutter.set(\"token\", json[\"token\"], {\n        expires\n      }); //set token cookie\n\n      return json[\"role\"]; //return the role\n    }); //To use this data you must do the following:\n    //api.login(userid, password).then(role => {/*here is where the return value is accessible, it is either role string or a boolean indicating failure*/})\n  } //---logout(userid)---\n  //    Input: None\n  //    Output: None\n\n\n  logout() {\n    cookieCutter.set(\"token\", \"\", {\n      expires: new Date().toUTCString()\n    });\n    cookieCutter.set(\"user\", \"\", {\n      expires: new Date().toUTCString()\n    });\n  } //---getCourses(userid, semester, year)---\n  //    Input: UserId, Semester, Year\n  //    Output: Sections for the corresponding UserId, Semester and Year\n\n\n  async getCourses(userid = \"\", semester = \"\", year = 0) {\n    const body = {\n      userid: userid,\n      semester: semester,\n      year: year\n    };\n    return await this.sendPost(\"/sections/by-userid-semester-year\", body); //To use this data you must do the following:\n    //api.getCourses(userId, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  } //---getAllCourses(userid, semester, year)---  (Admin)\n  //    Input: UserId, Semester, Year\n  //    Output: Sections for the corresponding Semester and Year \n\n\n  async getAllCourses(userid = \"\", semester = \"\", year = 0) {\n    const body = {\n      Userid: userid,\n      Semester: semester,\n      Year: year\n    };\n    return await this.sendPost(\"/sections/by-semester-year\", body); //To use this data you must do the following:\n    //api.getAllCourses(userid, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  } //---getCoursesBySemesterYear(semester, year)---  (Admin)\n  //    Input: Semester, Year\n  //    Output: All Courses for the corresponding semester and year \n\n\n  async getCoursesBySemesterYear(semester = \"\", year = 0) {\n    const body = {\n      semester: semester,\n      year: year\n    };\n    return await this.sendPost(\"/courses/get-by-year-semester\", body);\n  } //To use this data you must do the following:\n  //api.getCoursesBySemesterYear(semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  //---getFormsBySection(userid, year, semester, department, course, section)---\n  //    Input: UserId, Year, Semester, Department, CourseNumber, SectionNumber\n  //    Output: Forms for the corresponding UserId, Year, Semester, Department, CourseNumber, and SectionNumber\n\n\n  async getFormBySection(userid = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", sectionNumber = \"\") {\n    const body = {\n      Section: {\n        Instructor: {\n          Id: userid\n        },\n        Year: year,\n        Semester: semester,\n        Department: department,\n        CourseNumber: courseNumber,\n        SectionNumber: sectionNumber\n      }\n    };\n    return await this.sendPost(\"/forms/by-section\", body); //To use this data you must do the following:\n    //api.getFormsBySection(userid, year, semester, department, course, section).then(form => {/*here is where the data is accessible, form is an array of JSON objects*/})\n  } //---getFormsByCourse(userid, year, semester, department, course)---\n  //    Input: UserId, Year, Semester, Department, CourseNumber\n  //    Output: Forms for the corresponding UserId, Year, Semester, Department, and CourseNumber\n\n\n  async getFormsByCourse(userid = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\") {\n    const body = {\n      Course: {\n        Coordinator: {\n          Id: userid\n        },\n        Year: year,\n        Semester: semester,\n        Department: department,\n        CourseNumber: courseNumber\n      }\n    };\n    return await this.sendPost(\"/forms/by-course\", body); //To use this data you must do the following:\n    //api.getFormsByCourse(userid, year, semester, department, course).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  } //---getAllForms(userid, semester, year)--- (Admin)\n  //    Input: UserId, Semester, Year\n  //    Output: Forms for the corresponding Semester and Year\n\n\n  async getAllForms(userid = \"\", semester = \"\", year = 0) {\n    const body = {\n      userid: userid,\n      semester: semester,\n      year: year\n    };\n    return await this.sendPost(\"/forms/by-semester-year\", body); //To use this data you must do the following:\n    //api.getAllForms(userid, semester, year).then(courses => {/*here is where the data is accessible, forms is an array of JSON objects*/})\n  } //---postForm(userId, year, semester, department, courseNumber, sectionNumber, isSectionCompleted, outcomes, ITGrades, CSGrades, CEGrades)---\n  //    Input: ^^^   (will also have pdf here later as an additional parameter)\n  //    Output: Success or Failure\n\n\n  async postForm(userId = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", sectionNumber = \"\", isSectionCompleted = false, outcomes = [], ITGrades = {}, CSGrades = {}, CEGrades = {}) {\n    // the body will also include any pdf to post in the future\n    //outcomes: an array of Course_Outcomes objects\n    //Course_Outcomes class:\n    //string outcome, int numberOfIT, int numberOfCS, int numberOfCE, StudentWorks[] studentWorks\n    //StudentWorks class:\n    //string studentWork, string fileUploaded (<-- will implement later)\n    //IT, CS, CE Grades class:\n    //int A, int B, int C, int D, int E, int F, int W, int I, int totalStudents\n    const body = {\n      form: {\n        section: {\n          instructor: {\n            id: userId\n          },\n          year,\n          semester,\n          department,\n          courseNumber,\n          sectionNumber,\n          isSectionCompleted\n        },\n        outcomes,\n        ITGrades,\n        CSGrades,\n        CEGrades\n      }\n    };\n    return await this.sendPost(\"/forms/post-form\", body, true).then(response => {\n      return response.status == OK;\n    });\n  } //---postComment(userId, year, semester, department, courseNumber, coordinatorComment, isCourseCompleted)---\n  //    Input: UserId, Year, Semester, department, courseNumber, coordinatorComment, isCourseCompleted\n  //    Output: Success or Failure\n\n\n  async postComment(userId = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", coordinatorComment = \"\", isCourseCompleted = false) {\n    const body = {\n      course: {\n        Coordinator: {\n          Id: userId\n        },\n        year,\n        semester,\n        department,\n        courseNumber,\n        coordinatorComment,\n        isCourseCompleted\n      }\n    };\n    return await this.sendPost(\"/courses/post-comment\", body, true).then(response => {\n      return response.status == OK;\n    });\n  } //---getBlankForm(userid)---\n  //    Input: UserId\n  //    Output: Blank Form\n\n\n  async getBlankForm(userid) {\n    const body = {\n      userid: userid\n    };\n    return await this.sendPost(\"/forms/new-blank\", body); //To use this data you must do the following:\n    //api.getBlankForm(userid).then(result => {/*here is where the return value is accessible, it is a JSON*/})\n  } //--getDefaultYearAndSemester()--\n  //    Input: Nothing\n  //    Output: Object Including Current Default Year and Semester\n\n\n  getDefaultYearAndSemester() {\n    var text = '{ \"year\": 0,' + // create string of object\n    ' \"semester\": \"\" }';\n    var ResultObj = JSON.parse(text); // create object from the string\n\n    var date = new Date(); // get the current date\n\n    var day = date.getDay(); // get the current day\n\n    var month = date.getMonth() + 1; // add one to month (by default January = 0)\n\n    ResultObj.year = date.getFullYear(); // get the full year from the date\n\n    ResultObj.semester = \"fall\"; // just to be safe\n    // Set the Default Semester Based on the Month\n\n    if (month > 8 || month == 8 && day >= 15) {\n      ResultObj.semester = \"fall\";\n    } else if (month > 5 || month == 5 && day >= 15) {\n      ResultObj.semester = \"summer\"; // since this is just a default semester, it always defaults to the longer semesters\n      // this is why it doesn't default to smaller summer semesters\n    } else {\n      ResultObj.semester = \"spring\";\n    }\n\n    return ResultObj; // return object including the year and semester\n  } //---addSection(userid, firstName, lastName, year, semester, courseNumber, sectionNumber, department, numberOfStudents)--- (Admin)\n  //    Input: ^^^\n  //    Output: Success or Failure\n\n\n  async addSection(userid = \"\", firstName = \"\", lastName = \"\", year = 0, semester = \"\", courseNumber = \"\", sectionNumber = \"\", department = \"\", numberOfStudents = 0) {\n    const body = {\n      section: {\n        instructor: {\n          id: userid,\n          firstName,\n          lastName\n        },\n        year,\n        semester,\n        courseNumber,\n        sectionNumber,\n        department,\n        isSectionCompleted: false,\n        numberOfStudents\n      }\n    };\n    return await this.sendPost(\"/sections/add-section\", body, true).then(response => {\n      return response.status == OK;\n    });\n  } //---getFacultyList()--- (Admin)\n  //    Input: none\n  //    Output: List of instructors, coordinators, adjunct faculties, and teaching fellows\n\n\n  async getFacultyList() {\n    return await this.sendPost(\"/faculty/get-list\", {});\n  } //---addFacultyMember(firstName, lastName, userid, role)--- (Admin)\n  //    Input: First Name, Last Name and User Id\n  //    Output: Success or Failure\n\n\n  async addFacultyMember(firstName = \"\", lastName = \"\", userId = \"\", facultyType = \"\") {\n    const body = {\n      info: {\n        firstName: firstName,\n        lastName: lastName,\n        id: userId\n      },\n      facultyType: facultyType\n    };\n    return await this.sendPost(\"/faculty/add-member\", body, true).then(response => {\n      return response.status == OK;\n    });\n  } //---getCoursesByDepartment(department)--- (Admin)\n  //    Input: department\n  //    Output: array of courses\n\n\n  async getCoursesByDepartment(department = \"\") {\n    const body = {\n      department\n    };\n    return await this.sendPost(\"/courses/get-by-department\", body);\n  } //---addCourse(userid, firstName, lastName, year, semester, courseNumber, displayName, department)--- (Admin)\n  //    Input: ^^^\n  //    Output: success or failure\n\n\n  async addCourse(userid = \"\", firstName = \"\", lastName = \"\", year = 0, semester = \"\", courseNumber = \"\", displayName = \"\", department = \"\") {\n    const body = {\n      Course: {\n        Coordinator: {\n          Id: userid,\n          firstName,\n          lastName\n        },\n        year,\n        semester,\n        courseNumber,\n        displayName,\n        department\n      }\n    };\n    return await this.sendPost(\"/courses/add-course\", body, true).then(response => {\n      return response.status == OK;\n    });\n  } //---removeCourse(year, semester, courseNumber, department)--- (Admin)\n  //    Input: year, semester, courseNumber, department\n  //    Output: success or failure\n\n\n  async removeCourse(year = 0, semester = \"\", courseNumber = \"\", department = \"\") {\n    const body = {\n      Course: {\n        year,\n        semester,\n        courseNumber,\n        department\n      }\n    };\n    return await this.sendPost(\"/courses/remove-course\", body, true).then(response => {\n      return response.status == OK;\n    });\n  } //---getCourseOutcomesByCourse(year, semester, courseNumber, department)--- (Admin)\n  //    Input: year, semester, courseNumber, department\n  //    Output: array of course outcomes\n\n\n  async getCourseOutcomesByCourse(year = 0, semester = \"\", courseNumber = \"\", department = \"\") {\n    const body = {\n      Course: {\n        year,\n        semester,\n        courseNumber,\n        department\n      }\n    };\n    return await this.sendPost(\"/course-outcomes/by-course\", body);\n  } //---postCourseOutcomes(outcomes)--- (Admin)\n  //    Input: array of outcome objects (see notes below)\n  //    Output: success or failure\n\n\n  async postCourseOutcomes(outcomes = []) {\n    //an outcome object contains the following:\n    //order (number), outcome (string), mappedStudentOutcomes(array of numbers)\n    //Example:\n    //{\n    //    order: 1, outcome: \"Accomplish things\", mappedStudentOutcomes: [1, 0, 0, 1, 0, 1]\n    //}\n    const body = {\n      courseOutcomesList: outcomes\n    };\n    return await this.sendPost(\"/course-outcomes/post-outcomes\", body, true).then(response => {\n      return response.status == OK;\n    });\n    ;\n  }\n\n}\n\nclass ErrorObj {\n  constructor(message = \"\", isLoggedIn = true) {\n    this.success = false;\n    this.message = message;\n    this.isLoggedIn = isLoggedIn;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ty/Desktop/ABET_frontend/abet-tool/api/api.js"],"names":["cookieCutter","root","OK","UNAUTHORIZED","BAD_REQUEST","SERVER_ERROR","JSON_ERROR_MSG","NOT_LOGGED_IN_MSG","SERVER_ERROR_MSG","BAD_REQUEST_MSG","token","API","setToken","t","sendPost","route","body","url","statusCode","get","fetch","method","cache","headers","referrerPolicy","JSON","stringify","then","response","status","console","log","json","catch","ErrorObj","login","userid","password","expires","Date","setHours","getHours","toUTCString","set","logout","getCourses","semester","year","getAllCourses","Userid","Semester","Year","getCoursesBySemesterYear","getFormBySection","department","courseNumber","sectionNumber","Section","Instructor","Id","Department","CourseNumber","SectionNumber","getFormsByCourse","Course","Coordinator","getAllForms","postForm","userId","isSectionCompleted","outcomes","ITGrades","CSGrades","CEGrades","form","section","instructor","id","postComment","coordinatorComment","isCourseCompleted","course","getBlankForm","getDefaultYearAndSemester","text","ResultObj","parse","date","day","getDay","month","getMonth","getFullYear","addSection","firstName","lastName","numberOfStudents","getFacultyList","addFacultyMember","facultyType","info","getCoursesByDepartment","addCourse","displayName","removeCourse","getCourseOutcomesByCourse","postCourseOutcomes","courseOutcomesList","constructor","message","isLoggedIn","success"],"mappings":"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","sourcesContent":["// Helper API Class\r\nimport cookieCutter from 'cookie-cutter';\r\n\r\nconst root = \"https://localhost:44372/api\"; // The base URL for each request\r\nconst OK = 200;           //200 Ok status code\r\nconst UNAUTHORIZED = 401; //401 Unauthorized status code\r\nconst BAD_REQUEST = 400;  //400 Bad Request status code\r\nconst SERVER_ERROR = 500; //500 Internal Server Error status code\r\nconst JSON_ERROR_MSG = \"Error: Could not parse JSON.\";\r\nconst NOT_LOGGED_IN_MSG = \"Error: Your session has expired. Please log in again.\";\r\nconst SERVER_ERROR_MSG = \"Internal Server Error: Please try again later.\";\r\nconst BAD_REQUEST_MSG = \"Error: Some of the provided parameters are invalid.\"\r\nvar token = \"\";           //holds value of the token cookie\r\n\r\nexport default class API {\r\n    /* This function is for getInitialProps.\r\n    cookieCutter is undefined in getInitialProps,\r\n    so this function sets the token to the value of the cookie\r\n    passed in from getInitialProps. */\r\n    setToken(t = \"\") {\r\n        token = t;\r\n    }\r\n\r\n    // generic function for sending POST requests\r\n    //    Input: route and body\r\n    //    Output: The JSON that is returned from the route\r\n    async sendPost(route = \"\", body = {}) {\r\n        const url = root + route; // Combine the root URL with the specified route\r\n        var statusCode;\r\n\r\n        //if the request is not from getInitialProps, meaning cookieCutter is defined, retreive the cookie\r\n        if (typeof cookieCutter.get == \"function\") {\r\n            token = cookieCutter.get(\"token\");\r\n        }\r\n\r\n        return fetch(url, {\r\n            method: \"POST\",\r\n            cache: \"no-cache\",\r\n            headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": \"Bearer \" + token\r\n            },\r\n            referrerPolicy: \"no-referrer\",\r\n            body: JSON.stringify(body),\r\n        })\r\n            .then((response) => {\r\n                statusCode = response.status;\r\n                if (response.status != OK) {\r\n                    console.log(\"RIGHT HERE\")\r\n                }\r\n                /*\r\n                switch (response.status) {\r\n                    case UNAUTHORIZED:\r\n                        console.log(new ErrorObj(NOT_LOGGED_IN_MSG, false));\r\n                        return new ErrorObj(NOT_LOGGED_IN_MSG, false);\r\n                    case SERVER_ERROR:\r\n                        console.log(new ErrorObj(SERVER_ERROR_MSG));\r\n                        return new ErrorObj(SERVER_ERROR_MSG);\r\n                    case BAD_REQUEST:\r\n                        console.log(new ErrorObj(BAD_REQUEST_MSG));\r\n                        return new ErrorObj(BAD_REQUEST_MSG);\r\n                }*/\r\n                /*if (response.status != OK) {\r\n                    console.log(json[\"message\"]);\r\n                    return new ErrorObj(json[\"message\"]);\r\n                }\r\n                else*/\r\n                    return response.json();\r\n            })\r\n            .then((json) => {\r\n                if (statusCode == SERVER_ERROR_MSG)\r\n                    console.log(\"HERERERERERERERER\");\r\n                return json;\r\n            })\r\n            .catch(() => { return new ErrorObj(JSON_ERROR_MSG); });\r\n    }\r\n\r\n    //---login(userid, password)---\r\n    //    Input: UserId, Password\r\n    //    Output: \"Admin\", \"Instructor\", \"Student/TA\" or boolean for failure\r\n    async login(userid = \"\", password = \"\") {\r\n        const body = { userid: userid, password: password };\r\n        \r\n        return await this.sendPost(\"/login\", body).then((json) => {\r\n            var expires = new Date();\r\n\r\n            expires.setHours(expires.getHours() + 24); //expires in 24 hours\r\n            expires = expires.toUTCString();\r\n            \r\n            cookieCutter.set(\"token\", json[\"token\"], { expires }); //set token cookie\r\n            return json[\"role\"]; //return the role\r\n            \r\n        });\r\n        \r\n        //To use this data you must do the following:\r\n        //api.login(userid, password).then(role => {/*here is where the return value is accessible, it is either role string or a boolean indicating failure*/})\r\n    }\r\n\r\n    //---logout(userid)---\r\n    //    Input: None\r\n    //    Output: None\r\n    logout() {\r\n        cookieCutter.set(\"token\", \"\", { expires: new Date().toUTCString() });\r\n        cookieCutter.set(\"user\", \"\", { expires: new Date().toUTCString() });\r\n    }\r\n    \r\n    //---getCourses(userid, semester, year)---\r\n    //    Input: UserId, Semester, Year\r\n    //    Output: Sections for the corresponding UserId, Semester and Year\r\n    async getCourses(userid = \"\", semester = \"\", year = 0) {\r\n        const body = { userid: userid, semester: semester, year: year };\r\n\r\n        return await this.sendPost(\"/sections/by-userid-semester-year\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getCourses(userId, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n    }\r\n\r\n    //---getAllCourses(userid, semester, year)---  (Admin)\r\n    //    Input: UserId, Semester, Year\r\n    //    Output: Sections for the corresponding Semester and Year \r\n    async getAllCourses(userid = \"\", semester = \"\", year = 0) {\r\n        const body = { Userid: userid, Semester: semester, Year: year };\r\n\r\n        return await this.sendPost(\"/sections/by-semester-year\", body);\r\n        \r\n        //To use this data you must do the following:\r\n        //api.getAllCourses(userid, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n    }\r\n    //---getCoursesBySemesterYear(semester, year)---  (Admin)\r\n    //    Input: Semester, Year\r\n    //    Output: All Courses for the corresponding semester and year \r\n    async getCoursesBySemesterYear(semester = \"\", year = 0) \r\n    {\r\n        const body = \r\n        { \r\n            semester: semester, \r\n            year: year \r\n        };\r\n\r\n        return await this.sendPost(\"/courses/get-by-year-semester\", body);\r\n    }\r\n    //To use this data you must do the following:\r\n    //api.getCoursesBySemesterYear(semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n\r\n    //---getFormsBySection(userid, year, semester, department, course, section)---\r\n    //    Input: UserId, Year, Semester, Department, CourseNumber, SectionNumber\r\n    //    Output: Forms for the corresponding UserId, Year, Semester, Department, CourseNumber, and SectionNumber\r\n    async getFormBySection(userid = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", sectionNumber = \"\") {\r\n        const body = {\r\n            Section: {\r\n                Instructor: {\r\n                    Id: userid,\r\n                },\r\n                Year: year,   \r\n                Semester: semester,\r\n                Department: department,\r\n                CourseNumber: courseNumber,\r\n                SectionNumber: sectionNumber\r\n            }\r\n        };\r\n\r\n        return await this.sendPost(\"/forms/by-section\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getFormsBySection(userid, year, semester, department, course, section).then(form => {/*here is where the data is accessible, form is an array of JSON objects*/})\r\n    }\r\n\r\n    //---getFormsByCourse(userid, year, semester, department, course)---\r\n    //    Input: UserId, Year, Semester, Department, CourseNumber\r\n    //    Output: Forms for the corresponding UserId, Year, Semester, Department, and CourseNumber\r\n    async getFormsByCourse(userid = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\") {\r\n        const body = {\r\n            Course: {\r\n                Coordinator: {\r\n                    Id: userid,\r\n                },\r\n                Year: year,\r\n                Semester: semester,\r\n                Department: department,\r\n                CourseNumber: courseNumber\r\n            }\r\n        };\r\n        \r\n        return await this.sendPost(\"/forms/by-course\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getFormsByCourse(userid, year, semester, department, course).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n    }\r\n\r\n    //---getAllForms(userid, semester, year)--- (Admin)\r\n    //    Input: UserId, Semester, Year\r\n    //    Output: Forms for the corresponding Semester and Year\r\n    async getAllForms(userid = \"\", semester = \"\", year = 0) {\r\n\r\n        const body = { userid: userid, semester: semester, year: year };\r\n\r\n        return await this.sendPost(\"/forms/by-semester-year\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getAllForms(userid, semester, year).then(courses => {/*here is where the data is accessible, forms is an array of JSON objects*/})\r\n    }\r\n\r\n    //---postForm(userId, year, semester, department, courseNumber, sectionNumber, isSectionCompleted, outcomes, ITGrades, CSGrades, CEGrades)---\r\n    //    Input: ^^^   (will also have pdf here later as an additional parameter)\r\n    //    Output: Success or Failure\r\n    async postForm(userId = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", sectionNumber = \"\", isSectionCompleted = false, outcomes = [], ITGrades = {}, CSGrades = {}, CEGrades = {}) {\r\n        // the body will also include any pdf to post in the future\r\n\r\n        //outcomes: an array of Course_Outcomes objects\r\n        //Course_Outcomes class:\r\n        //string outcome, int numberOfIT, int numberOfCS, int numberOfCE, StudentWorks[] studentWorks\r\n        //StudentWorks class:\r\n        //string studentWork, string fileUploaded (<-- will implement later)\r\n\r\n        //IT, CS, CE Grades class:\r\n        //int A, int B, int C, int D, int E, int F, int W, int I, int totalStudents\r\n\r\n        const body = {\r\n            form: {\r\n                section: {\r\n                    instructor: {\r\n                        id: userId\r\n                    },\r\n                    year,\r\n                    semester,\r\n                    department,\r\n                    courseNumber,\r\n                    sectionNumber,\r\n                    isSectionCompleted\r\n                },\r\n                outcomes,\r\n                ITGrades,\r\n                CSGrades,\r\n                CEGrades\r\n            }\r\n        };\r\n\r\n        return await this.sendPost(\"/forms/post-form\", body, true).then((response) => { return response.status == OK; });\r\n    }\r\n\r\n    //---postComment(userId, year, semester, department, courseNumber, coordinatorComment, isCourseCompleted)---\r\n    //    Input: UserId, Year, Semester, department, courseNumber, coordinatorComment, isCourseCompleted\r\n    //    Output: Success or Failure\r\n    async postComment(userId = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", coordinatorComment = \"\", isCourseCompleted = false) {\r\n        const body = {\r\n            course: {\r\n                Coordinator: {\r\n                    Id: userId,\r\n                },\r\n                year,\r\n                semester,\r\n                department,\r\n                courseNumber,\r\n                coordinatorComment,\r\n                isCourseCompleted\r\n            }\r\n        };\r\n\r\n        return await this.sendPost(\"/courses/post-comment\", body, true).then((response) => { return response.status == OK; })\r\n    }\r\n\r\n    //---getBlankForm(userid)---\r\n    //    Input: UserId\r\n    //    Output: Blank Form\r\n    async getBlankForm(userid) {\r\n        const body = { userid: userid };\r\n\r\n        return await this.sendPost(\"/forms/new-blank\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getBlankForm(userid).then(result => {/*here is where the return value is accessible, it is a JSON*/})\r\n    }\r\n\r\n    //--getDefaultYearAndSemester()--\r\n    //    Input: Nothing\r\n    //    Output: Object Including Current Default Year and Semester\r\n    getDefaultYearAndSemester() {\r\n        var text = '{ \"year\": 0,' +         // create string of object\r\n                   ' \"semester\": \"\" }';\r\n        var ResultObj = JSON.parse(text);   // create object from the string\r\n\r\n        var date = new Date();              // get the current date\r\n        var day = date.getDay();            // get the current day\r\n        var month = date.getMonth() + 1;    // add one to month (by default January = 0)\r\n        ResultObj.year = date.getFullYear();// get the full year from the date\r\n        ResultObj.semester = \"fall\";        // just to be safe\r\n        \r\n        // Set the Default Semester Based on the Month\r\n        if ((month > 8) || (month == 8 && day >= 15)) {\r\n            ResultObj.semester = \"fall\";\r\n        }\r\n        else if ((month > 5) || (month == 5 && day >= 15)) {\r\n            ResultObj.semester = \"summer\";\r\n            // since this is just a default semester, it always defaults to the longer semesters\r\n            // this is why it doesn't default to smaller summer semesters\r\n        }\r\n        else {\r\n            ResultObj.semester = \"spring\";\r\n        }\r\n\r\n        return ResultObj;    // return object including the year and semester\r\n    }\r\n\r\n    //---addSection(userid, firstName, lastName, year, semester, courseNumber, sectionNumber, department, numberOfStudents)--- (Admin)\r\n    //    Input: ^^^\r\n    //    Output: Success or Failure\r\n    async addSection(userid = \"\", firstName = \"\", lastName = \"\", year = 0, semester = \"\", courseNumber = \"\", sectionNumber = \"\", department = \"\", numberOfStudents = 0) {\r\n        const body = {\r\n            section: {\r\n                instructor: {\r\n                    id: userid,\r\n                    firstName,\r\n                    lastName\r\n                },\r\n                year,\r\n                semester,\r\n                courseNumber,\r\n                sectionNumber,\r\n                department,\r\n                isSectionCompleted: false,\r\n                numberOfStudents\r\n            }\r\n            \r\n        };\r\n\r\n        return await this.sendPost(\"/sections/add-section\", body, true).then((response) => { return response.status == OK; });\r\n    }\r\n\r\n    //---getFacultyList()--- (Admin)\r\n    //    Input: none\r\n    //    Output: List of instructors, coordinators, adjunct faculties, and teaching fellows\r\n    async getFacultyList()\r\n    {\r\n        return await this.sendPost(\"/faculty/get-list\", {});\r\n    }\r\n    \r\n    //---addFacultyMember(firstName, lastName, userid, role)--- (Admin)\r\n    //    Input: First Name, Last Name and User Id\r\n    //    Output: Success or Failure\r\n    async addFacultyMember(firstName = \"\", lastName = \"\", userId = \"\", facultyType = \"\")\r\n    {\r\n        const body = \r\n        {\r\n            info: {\r\n                firstName: firstName,\r\n                lastName: lastName,\r\n                id: userId\r\n            },\r\n            facultyType: facultyType\r\n        };\r\n\r\n        return await this.sendPost(\"/faculty/add-member\", body, true).then ((response) => {return response.status == OK; });\r\n    }\r\n    \r\n    //---getCoursesByDepartment(department)--- (Admin)\r\n    //    Input: department\r\n    //    Output: array of courses\r\n    async getCoursesByDepartment(department = \"\") {\r\n        const body = {\r\n            department\r\n        };\r\n        \r\n        return await this.sendPost(\"/courses/get-by-department\", body);\r\n    }\r\n    \r\n    //---addCourse(userid, firstName, lastName, year, semester, courseNumber, displayName, department)--- (Admin)\r\n    //    Input: ^^^\r\n    //    Output: success or failure\r\n    async addCourse(userid = \"\", firstName = \"\", lastName = \"\", year = 0, semester = \"\", courseNumber = \"\", displayName = \"\", department = \"\")\r\n    {\r\n        const body = {\r\n            Course: {\r\n                Coordinator: {\r\n                    Id: userid,\r\n                    firstName,\r\n                    lastName\r\n                },\r\n                year,\r\n                semester,\r\n                courseNumber,\r\n                displayName,\r\n                department\r\n            }\r\n        };\r\n        \r\n        return await this.sendPost(\"/courses/add-course\", body, true).then((response) => { return response.status == OK; });\r\n    }\r\n    \r\n    //---removeCourse(year, semester, courseNumber, department)--- (Admin)\r\n    //    Input: year, semester, courseNumber, department\r\n    //    Output: success or failure\r\n    async removeCourse(year = 0, semester = \"\", courseNumber = \"\", department = \"\")\r\n    {\r\n        const body = {\r\n            Course: {\r\n                year,\r\n                semester,\r\n                courseNumber,\r\n                department\r\n            }\r\n        };\r\n        \r\n        return await this.sendPost(\"/courses/remove-course\", body, true).then((response) => { return response.status == OK; });\r\n    }\r\n\r\n    //---getCourseOutcomesByCourse(year, semester, courseNumber, department)--- (Admin)\r\n    //    Input: year, semester, courseNumber, department\r\n    //    Output: array of course outcomes\r\n    async getCourseOutcomesByCourse(year = 0, semester = \"\", courseNumber = \"\", department = \"\")\r\n    {\r\n        const body = {\r\n            Course: {\r\n                year,\r\n                semester,\r\n                courseNumber,\r\n                department\r\n            }\r\n        };\r\n    \r\n        return await this.sendPost(\"/course-outcomes/by-course\", body);\r\n    }\r\n\r\n    //---postCourseOutcomes(outcomes)--- (Admin)\r\n    //    Input: array of outcome objects (see notes below)\r\n    //    Output: success or failure\r\n    async postCourseOutcomes(outcomes = [])\r\n    {\r\n        //an outcome object contains the following:\r\n        //order (number), outcome (string), mappedStudentOutcomes(array of numbers)\r\n        //Example:\r\n        //{\r\n        //    order: 1, outcome: \"Accomplish things\", mappedStudentOutcomes: [1, 0, 0, 1, 0, 1]\r\n        //}\r\n\r\n        const body = {\r\n            courseOutcomesList: outcomes\r\n        };\r\n    \r\n        return await this.sendPost(\"/course-outcomes/post-outcomes\", body, true).then((response) => { return response.status == OK; });;\r\n    }\r\n}\r\n\r\nclass ErrorObj {\r\n    constructor(message = \"\", isLoggedIn = true) {\r\n        this.success = false;\r\n        this.message = message;\r\n        this.isLoggedIn = isLoggedIn;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}