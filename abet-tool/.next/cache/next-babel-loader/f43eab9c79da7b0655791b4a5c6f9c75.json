{"ast":null,"code":"// Helper API Class\nimport cookieCutter from 'cookie-cutter';\nconst root = \"https://localhost:44372/api\"; // The base URL for each request\n\nconst OK = 200; //200 Ok status code\n\nvar token = \"\"; //holds value of the token cookie\n\nexport default class API {\n  /* This function is for getInitialProps.\r\n  cookieCutter is undefined in getInitialProps,\r\n  so this function sets the token to the value of the cookie\r\n  passed in from getInitialProps. */\n  setToken(t = \"\") {\n    token = t;\n  } // generic function for sending POST requests\n  //    Input: route and body\n  //    Output: The JSON that is returned from the route\n\n\n  async sendPost(route = \"\", body = {}, returnRawResponse = false) {\n    const url = root + route; // Combine the root URL with the specified route\n    //if the request is not from getInitialProps, meaning cookieCutter is defined, retreive the cookie\n\n    if (typeof cookieCutter.get == \"function\") {\n      token = cookieCutter.get(\"token\");\n    }\n\n    return fetch(url, {\n      method: \"POST\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + token\n      },\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(body)\n    }).then(response => {\n      if (returnRawResponse) return response;else return response.json();\n    }).then(json => {\n      return json;\n    }).catch(() => {\n      return;\n    });\n  } //---login(userid, password)---\n  //    Input: UserId, Password\n  //    Output: \"Admin\", \"Instructor\", \"Student/TA\" or boolean for failure\n\n\n  async login(userid = \"\", password = \"\") {\n    const body = {\n      userid: userid,\n      password: password\n    };\n    return await this.sendPost(\"/login\", body, true).then(response => {\n      if (response.status == OK) {\n        var expires = new Date();\n        expires.setHours(expires.getHours() + 24); //expires in 24 hours\n\n        expires = expires.toUTCString();\n        return response.json().then(json => {\n          cookieCutter.set(\"token\", json[\"token\"], {\n            expires\n          }); //set token cookie\n\n          return json[\"role\"]; //return the role\n        });\n      } else {\n        return false;\n      }\n    }); //To use this data you must do the following:\n    //api.login(userid, password).then(role => {/*here is where the return value is accessible, it is either role string or a boolean indicating failure*/})\n  } //---logout(userid)---\n  //    Input: None\n  //    Output: None\n\n\n  logout() {\n    cookieCutter.set(\"token\", \"\", {\n      expires: new Date().toUTCString()\n    });\n    cookieCutter.set(\"user\", \"\", {\n      expires: new Date().toUTCString()\n    });\n  } //---getCourses(userid, semester, year)---\n  //    Input: UserId, Semester, Year\n  //    Output: Sections for the corresponding UserId, Semester and Year\n\n\n  async getCourses(userid = \"\", semester = \"\", year = 0) {\n    const body = {\n      userid: userid,\n      semester: semester,\n      year: year\n    };\n    return await this.sendPost(\"/sections/by-userid-semester-year\", body); //To use this data you must do the following:\n    //api.getCourses(userId, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  } //---getAllCourses(userid, semester, year)---  (Admin)\n  //    Input: UserId, Semester, Year\n  //    Output: Sections for the corresponding Semester and Year \n\n\n  async getAllCourses(userid = \"\", semester = \"\", year = 0) {\n    const body = {\n      Userid: userid,\n      Semester: semester,\n      Year: year\n    };\n    return await this.sendPost(\"/sections/by-semester-year\", body); //To use this data you must do the following:\n    //api.getAllCourses(userid, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  } //---getFormsBySection(userid, year, semester, department, course, section)---\n  //    Input: UserId, Year, Semester, Department, CourseNumber, SectionNumber\n  //    Output: Forms for the corresponding UserId, Year, Semester, Department, CourseNumber, and SectionNumber\n\n\n  async getFormBySection(userid = \"\", year = 0, semester = \"\", department = \"\", course = 0, section = 0) {\n    const body = {\n      Section: {\n        Instructor: {\n          Id: userid\n        },\n        Year: year,\n        Semester: semester,\n        Department: department,\n        CourseNumber: course,\n        SectionNumber: section\n      }\n    };\n    return await this.sendPost(\"/forms/by-section\", body); //To use this data you must do the following:\n    //api.getFormsBySection(userid, year, semester, department, course, section).then(form => {/*here is where the data is accessible, form is an array of JSON objects*/})\n  } //---getFormsByCourse(userid, year, semester, department, course)---\n  //    Input: UserId, Year, Semester, Department, CourseNumber\n  //    Output: Forms for the corresponding UserId, Year, Semester, Department, and CourseNumber\n\n\n  async getFormsByCourse(userid = \"\", year = 0, semester = \"\", department = \"\", course = 0) {\n    const body = {\n      Course: {\n        Coordinator: {\n          Id: userid\n        },\n        Year: year,\n        Semester: semester,\n        Department: department,\n        CourseNumber: course\n      }\n    };\n    return await this.sendPost(\"/forms/by-course\", body); //To use this data you must do the following:\n    //api.getFormsByCourse(userid, year, semester, department, course).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  } //---getAllForms(userid, semester, year)--- (Admin)\n  //    Input: UserId, Semester, Year\n  //    Output: Forms for the corresponding Semester and Year\n\n\n  async getAllForms(userid = \"\", semester = \"\", year = 0) {\n    const body = {\n      userid: userid,\n      semester: semester,\n      year: year\n    };\n    return await this.sendPost(\"/forms/by-semester-year\", body); //To use this data you must do the following:\n    //api.getAllForms(userid, semester, year).then(courses => {/*here is where the data is accessible, forms is an array of JSON objects*/})\n  } //---postForm(userid, year, semester, form)---\n  //    Input: UserId, Year, Semester, Form   (will also have pdf here later as an additional parameter)\n  //    Output: Success or Failure\n\n\n  async postForm(userid, year, semester, form = {\n    default: \"nothing\"\n  }) {\n    //console.log(\"postForm\");\n    // the body will also include any pdf to post in the future\n    const body = {\n      Form: {\n        Section: {\n          Instructor: {\n            Id: userid\n          },\n          Year: year,\n          Semester: semester,\n          Department: form[\"section\"][\"department\"],\n          CourseNumber: form[\"section\"][\"courseNumber\"],\n          SectionNumber: form[\"section\"][\"sectionNumber\"],\n          IsSectionCompleted: form[\"section\"][\"isSectionCompleted\"]\n        }\n      }\n    };\n    return await this.sendPost(\"/forms/post-form\", body, true).then(response => {\n      return response.status == OK;\n    }); //To use this data you must do the following:\n    //api.postForm(userid, year, semester, form).then(result => {/*here is where the return value is accessible, it is a boolean indicating success*/})\n  } //---postComment(userid, year, semester, form)---\n  //    Input: UserId, Year, Semester, Form (with comment included)\n  //    Output: Success or Failure\n\n\n  async postComment(userid, year, semester, form = {\n    default: \"nothing\"\n  }) {\n    //console.log(\"postComment\");\n    const body = {\n      Course: {\n        Coordinator: {\n          Id: userid\n        },\n        Year: year,\n        Semester: semester,\n        Department: form[\"section\"][\"department\"],\n        CourseNumber: form[\"section\"][\"courseNumber\"],\n        CoordinatorComment: form[\"section\"][\"coordinatorComment\"],\n        IsCourseCompleted: form[\"section\"][\"isCourseCompleted\"]\n      }\n    };\n    return await this.sendPost(\"/courses/post-comment\", body, true).then(response => {\n      return response.status == OK;\n    }); //To use this data you must do the following:\n    //api.postComment(userid, year, semester, form).then(result => {/*here is where the return value is accessible, it is a boolean indicating success*/})\n  } //---getBlankForm(userid)---\n  //    Input: UserId\n  //    Output: Blank Form\n\n\n  async getBlankForm(userid) {\n    const body = {\n      userid: userid\n    };\n    return await this.sendPost(\"/forms/new-blank\", body); //To use this data you must do the following:\n    //api.getBlankForm(userid).then(result => {/*here is where the return value is accessible, it is a JSON*/})\n  } //--getDefaultYearAndSemester()--\n  //    Input: Nothing\n  //    Output: Object Including Current Default Year and Semester\n\n\n  async getDefaultYearAndSemester() {\n    var text = '{ \"year\": 0,' + // create string of object\n    ' \"semester\": \"\" }';\n    var ResultObj = JSON.parse(text); // create object from the string\n\n    var date = new Date(); // get the current date\n\n    var day = date.getDay(); // get the current day\n\n    var month = date.getMonth() + 1; // add one to month (by default January = 0)\n\n    ResultObj.year = date.getFullYear(); // get the full year from the date\n\n    ResultObj.semester = \"fall\"; // just to be safe\n    // Set the Default Semester Based on the Month\n\n    if (month > 8 || month == 8 && day >= 15) {\n      ResultObj.semester = \"fall\";\n    } else if (month > 5 || month == 5 && day >= 15) {\n      ResultObj.semester = \"summer\"; // since this is just a default semester, it always defaults to the longer semesters\n      // this is why it doesn't default to smaller summer semesters\n    } else {\n      ResultObj.semester = \"spring\";\n    }\n\n    return ResultObj; // return object including the year and semester\n    //To use this data you must do the following:\n    //api.getDefaultYearAndSemester().then(result => {/*here is where the return value is accessible, it is a JSON*/})\n  } //---postSection(userid, section)--- (Admin)\n  //    Input: UserId, Section (Object)\n  //    Output: Success or Failure\n\n\n  async postSection(userid, section = {\n    default: \"nothing\"\n  }) {\n    const body = {\n      userid: userid,\n      section: section\n    };\n    return await this.sendPost(\"/sections/post-section\", body, true).then(response => {\n      return response.status == OK;\n    }); //To use this data you must do the following:\n    //api.postSection(userid, section).then(result => {/*here is where the return value is accessible, it is a boolean indicating success*/})\n  } //---getFacultyList()--- (Admin)\n  //    Input: userid\n  //    Output: List of instructors, coordinators, adjunct faculties, and teaching fellows\n\n\n  async getFacultyList() {\n    return await this.sendPost(\"/faculty/get-list\", {});\n  } //---addFacultyMember(firstName, lastName, userid)--- (Admin)\n  //    Input: First Name, Last Name and User Id\n  //    Output: Success or Failure\n\n\n  async addFacultyMember(firstName, lastName, id, role) {\n    const body = {\n      info: {\n        firstName: firstName,\n        lastName: lastName,\n        id: id\n      },\n      role: role\n    };\n    return await this.sendPost(\"/faculty/add-member\", body, true).then(response => {\n      return response.status == OK;\n    });\n  }\n\n  async getCoursesByDepartment(department = \"\") {\n    const body = {\n      department\n    };\n    return await this.sendPost(\"/courses/get-by-department\", body);\n  }\n\n  async addCourse(userid = \"\", firstName = \"\", lastName = \"\", year = 0, semester = \"\", courseNumber = 0, displayName = \"\", department = \"\") {\n    const body = {\n      Course: {\n        Coordinator: {\n          Id: userid,\n          firstName,\n          lastName\n        },\n        year,\n        semester,\n        courseNumber,\n        displayName,\n        department\n      }\n    };\n    return await this.sendPost(\"/courses/add-course\", body, true).then(response => {\n      return response.status == OK;\n    });\n  }\n\n  async removeCourse(year = 0, semester = \"\", courseNumber = 0, department = \"\") {\n    const body = {\n      Course: {\n        year,\n        semester,\n        courseNumber,\n        department\n      }\n    };\n    return await this.sendPost(\"/courses/remove-course\", body, true).then(response => {\n      return response.status == OK;\n    });\n  }\n\n  async getCourseOutcomesByCourse(year = 0, semester = \"\", courseNumber = 0, department = \"\") {\n    const body = {\n      Course: {\n        year,\n        semester,\n        courseNumber,\n        department\n      }\n    };\n    return await this.sendPost(\"/course-outcomes/by-course\", body);\n  }\n\n  async postCourseOutcomes(outcomes = []) {\n    //an outcome object contains the following:\n    //order (number), outcome (string), mappedStudentOutcomes(array of numbers)\n    //Example:\n    //{\n    //order: 1, outcome: \"Accomplish things\", mappedStudentOutcomes: [1, 0, 0, 1, 0, 1]\n    //}\n    const body = {\n      courseOutcomesList: outcomes\n    };\n    return await this.sendPost(\"/course-outcomes/post-outcomes\", body, true).then(response => {\n      return response.status == OK;\n    });\n    ;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ty/Desktop/ABET_frontend/abet-tool/api/api.js"],"names":["cookieCutter","root","OK","token","API","setToken","t","sendPost","route","body","returnRawResponse","url","get","fetch","method","cache","headers","referrerPolicy","JSON","stringify","then","response","json","catch","login","userid","password","status","expires","Date","setHours","getHours","toUTCString","set","logout","getCourses","semester","year","getAllCourses","Userid","Semester","Year","getFormBySection","department","course","section","Section","Instructor","Id","Department","CourseNumber","SectionNumber","getFormsByCourse","Course","Coordinator","getAllForms","postForm","form","default","Form","IsSectionCompleted","postComment","CoordinatorComment","IsCourseCompleted","getBlankForm","getDefaultYearAndSemester","text","ResultObj","parse","date","day","getDay","month","getMonth","getFullYear","postSection","getFacultyList","addFacultyMember","firstName","lastName","id","role","info","getCoursesByDepartment","addCourse","courseNumber","displayName","removeCourse","getCourseOutcomesByCourse","postCourseOutcomes","outcomes","courseOutcomesList"],"mappings":"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","sourcesContent":["// Helper API Class\r\nimport cookieCutter from 'cookie-cutter';\r\n\r\nconst root = \"https://localhost:44372/api\"; // The base URL for each request\r\nconst OK = 200; //200 Ok status code\r\nvar token = \"\"; //holds value of the token cookie\r\n\r\nexport default class API {\r\n    /* This function is for getInitialProps.\r\n    cookieCutter is undefined in getInitialProps,\r\n    so this function sets the token to the value of the cookie\r\n    passed in from getInitialProps. */\r\n    setToken(t = \"\") {\r\n        token = t;\r\n    }\r\n\r\n\r\n    // generic function for sending POST requests\r\n    //    Input: route and body\r\n    //    Output: The JSON that is returned from the route\r\n    async sendPost(route = \"\", body = {}, returnRawResponse = false) {\r\n        const url = root + route; // Combine the root URL with the specified route\r\n        \r\n        //if the request is not from getInitialProps, meaning cookieCutter is defined, retreive the cookie\r\n        if (typeof cookieCutter.get == \"function\") {\r\n            token = cookieCutter.get(\"token\");\r\n        }\r\n\r\n        return fetch(url, {\r\n            method: \"POST\",\r\n            cache: \"no-cache\",\r\n            headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": \"Bearer \" + token\r\n            },\r\n            referrerPolicy: \"no-referrer\",\r\n            body: JSON.stringify(body),\r\n        })\r\n            .then((response) => {\r\n                if (returnRawResponse)\r\n                    return response;\r\n                else\r\n                    return response.json();\r\n            })\r\n            .then((json) => { return json; })\r\n            .catch(() => { return; });\r\n    }\r\n\r\n\r\n    //---login(userid, password)---\r\n    //    Input: UserId, Password\r\n    //    Output: \"Admin\", \"Instructor\", \"Student/TA\" or boolean for failure\r\n    async login(userid = \"\", password = \"\") {\r\n        const body = { userid: userid, password: password };\r\n\r\n        return await this.sendPost(\"/login\", body, true).then((response) => {\r\n            if (response.status == OK) {\r\n                var expires = new Date();\r\n\r\n                expires.setHours(expires.getHours() + 24); //expires in 24 hours\r\n                expires = expires.toUTCString();\r\n                \r\n                return response.json().then((json) => {\r\n                    cookieCutter.set(\"token\", json[\"token\"], { expires }); //set token cookie\r\n                    return json[\"role\"]; //return the role\r\n                });\r\n            } else {\r\n                return false;\r\n            }\r\n        })\r\n        \r\n        //To use this data you must do the following:\r\n        //api.login(userid, password).then(role => {/*here is where the return value is accessible, it is either role string or a boolean indicating failure*/})\r\n    }\r\n\r\n    //---logout(userid)---\r\n    //    Input: None\r\n    //    Output: None\r\n    logout() {\r\n        cookieCutter.set(\"token\", \"\", { expires: new Date().toUTCString() });\r\n        cookieCutter.set(\"user\", \"\", { expires: new Date().toUTCString() });\r\n    }\r\n\r\n    \r\n    //---getCourses(userid, semester, year)---\r\n    //    Input: UserId, Semester, Year\r\n    //    Output: Sections for the corresponding UserId, Semester and Year\r\n    async getCourses(userid = \"\", semester = \"\", year = 0) {\r\n        const body = { userid: userid, semester: semester, year: year };\r\n\r\n        return await this.sendPost(\"/sections/by-userid-semester-year\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getCourses(userId, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n    }\r\n\r\n\r\n    //---getAllCourses(userid, semester, year)---  (Admin)\r\n    //    Input: UserId, Semester, Year\r\n    //    Output: Sections for the corresponding Semester and Year \r\n    async getAllCourses(userid = \"\", semester = \"\", year = 0) {\r\n        \r\n        const body = { Userid: userid, Semester: semester, Year: year };\r\n\r\n        return await this.sendPost(\"/sections/by-semester-year\", body);\r\n        \r\n        //To use this data you must do the following:\r\n        //api.getAllCourses(userid, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n    }\r\n\r\n\r\n    //---getFormsBySection(userid, year, semester, department, course, section)---\r\n    //    Input: UserId, Year, Semester, Department, CourseNumber, SectionNumber\r\n    //    Output: Forms for the corresponding UserId, Year, Semester, Department, CourseNumber, and SectionNumber\r\n    async getFormBySection(userid = \"\", year = 0, semester = \"\", department = \"\", course = 0, section = 0) {\r\n        const body = {\r\n            Section: {\r\n                Instructor: {\r\n                    Id: userid,\r\n                },\r\n                Year: year,   \r\n                Semester: semester,\r\n                Department: department,\r\n                CourseNumber: course,\r\n                SectionNumber: section\r\n            }\r\n        };\r\n\r\n        return await this.sendPost(\"/forms/by-section\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getFormsBySection(userid, year, semester, department, course, section).then(form => {/*here is where the data is accessible, form is an array of JSON objects*/})\r\n    }\r\n\r\n\r\n    //---getFormsByCourse(userid, year, semester, department, course)---\r\n    //    Input: UserId, Year, Semester, Department, CourseNumber\r\n    //    Output: Forms for the corresponding UserId, Year, Semester, Department, and CourseNumber\r\n    async getFormsByCourse(userid = \"\", year = 0, semester = \"\", department = \"\", course = 0) {\r\n        const body = {\r\n            Course: {\r\n                Coordinator: {\r\n                    Id: userid,\r\n                },\r\n                Year: year,\r\n                Semester: semester,\r\n                Department: department,\r\n                CourseNumber: course\r\n            }\r\n        };\r\n        \r\n        return await this.sendPost(\"/forms/by-course\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getFormsByCourse(userid, year, semester, department, course).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n    }\r\n\r\n\r\n    //---getAllForms(userid, semester, year)--- (Admin)\r\n    //    Input: UserId, Semester, Year\r\n    //    Output: Forms for the corresponding Semester and Year\r\n    async getAllForms(userid = \"\", semester = \"\", year = 0) {\r\n\r\n        const body = { userid: userid, semester: semester, year: year };\r\n\r\n        return await this.sendPost(\"/forms/by-semester-year\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getAllForms(userid, semester, year).then(courses => {/*here is where the data is accessible, forms is an array of JSON objects*/})\r\n    }\r\n\r\n\r\n    //---postForm(userid, year, semester, form)---\r\n    //    Input: UserId, Year, Semester, Form   (will also have pdf here later as an additional parameter)\r\n    //    Output: Success or Failure\r\n    async postForm(userid, year, semester, form = { default: \"nothing\" }) {\r\n        //console.log(\"postForm\");\r\n\r\n        // the body will also include any pdf to post in the future\r\n        const body = {\r\n            Form: {\r\n                Section: {\r\n                    Instructor: {\r\n                        Id: userid\r\n                    },\r\n                    Year: year,\r\n                    Semester: semester,\r\n                    Department: form[\"section\"][\"department\"],\r\n                    CourseNumber: form[\"section\"][\"courseNumber\"],\r\n                    SectionNumber: form[\"section\"][\"sectionNumber\"],\r\n                    IsSectionCompleted: form[\"section\"][\"isSectionCompleted\"]\r\n                }\r\n            }\r\n        };\r\n\r\n        return await this.sendPost(\"/forms/post-form\", body, true).then((response) => { return response.status == OK; });\r\n\r\n        //To use this data you must do the following:\r\n        //api.postForm(userid, year, semester, form).then(result => {/*here is where the return value is accessible, it is a boolean indicating success*/})\r\n    }\r\n\r\n\r\n    //---postComment(userid, year, semester, form)---\r\n    //    Input: UserId, Year, Semester, Form (with comment included)\r\n    //    Output: Success or Failure\r\n    async postComment(userid, year, semester, form = { default: \"nothing\" }) {\r\n        //console.log(\"postComment\");\r\n\r\n        const body = {\r\n            Course: {\r\n                Coordinator: {\r\n                    Id: userid,\r\n                },\r\n                Year: year,\r\n                Semester: semester,\r\n                Department: form[\"section\"][\"department\"],\r\n                CourseNumber: form[\"section\"][\"courseNumber\"],\r\n                CoordinatorComment: form[\"section\"][\"coordinatorComment\"],\r\n                IsCourseCompleted: form[\"section\"][\"isCourseCompleted\"]\r\n            }\r\n        };\r\n\r\n        return await this.sendPost(\"/courses/post-comment\", body, true).then((response) => { return response.status == OK; })\r\n\r\n        //To use this data you must do the following:\r\n        //api.postComment(userid, year, semester, form).then(result => {/*here is where the return value is accessible, it is a boolean indicating success*/})\r\n    }\r\n\r\n\r\n    //---getBlankForm(userid)---\r\n    //    Input: UserId\r\n    //    Output: Blank Form\r\n    async getBlankForm(userid) {\r\n        const body = { userid: userid };\r\n\r\n        return await this.sendPost(\"/forms/new-blank\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getBlankForm(userid).then(result => {/*here is where the return value is accessible, it is a JSON*/})\r\n\r\n    }\r\n\r\n\r\n    //--getDefaultYearAndSemester()--\r\n    //    Input: Nothing\r\n    //    Output: Object Including Current Default Year and Semester\r\n    async getDefaultYearAndSemester() {\r\n        var text = '{ \"year\": 0,' +         // create string of object\r\n                   ' \"semester\": \"\" }';\r\n        var ResultObj = JSON.parse(text);   // create object from the string\r\n\r\n        var date = new Date();              // get the current date\r\n        var day = date.getDay();            // get the current day\r\n        var month = date.getMonth() + 1;    // add one to month (by default January = 0)\r\n        ResultObj.year = date.getFullYear();// get the full year from the date\r\n        ResultObj.semester = \"fall\";        // just to be safe\r\n        \r\n        // Set the Default Semester Based on the Month\r\n        if ((month > 8) || (month == 8 && day >= 15)) {\r\n            ResultObj.semester = \"fall\";\r\n        }\r\n        else if ((month > 5) || (month == 5 && day >= 15)) {\r\n            ResultObj.semester = \"summer\";\r\n            // since this is just a default semester, it always defaults to the longer semesters\r\n            // this is why it doesn't default to smaller summer semesters\r\n        }\r\n        else {\r\n            ResultObj.semester = \"spring\";\r\n        }\r\n\r\n        return ResultObj;    // return object including the year and semester\r\n        //To use this data you must do the following:\r\n        //api.getDefaultYearAndSemester().then(result => {/*here is where the return value is accessible, it is a JSON*/})\r\n    }\r\n\r\n\r\n    //---postSection(userid, section)--- (Admin)\r\n    //    Input: UserId, Section (Object)\r\n    //    Output: Success or Failure\r\n    async postSection(userid, section = { default: \"nothing\" }) {\r\n        const body = {\r\n            userid: userid,\r\n            section: section\r\n        };\r\n\r\n        return await this.sendPost(\"/sections/post-section\", body, true).then((response) => { return response.status == OK; });\r\n\r\n        //To use this data you must do the following:\r\n        //api.postSection(userid, section).then(result => {/*here is where the return value is accessible, it is a boolean indicating success*/})\r\n    }\r\n\r\n    //---getFacultyList()--- (Admin)\r\n    //    Input: userid\r\n    //    Output: List of instructors, coordinators, adjunct faculties, and teaching fellows\r\n    async getFacultyList()\r\n    {\r\n        return await this.sendPost(\"/faculty/get-list\", {});\r\n    }\r\n\r\n    //---addFacultyMember(firstName, lastName, userid)--- (Admin)\r\n    //    Input: First Name, Last Name and User Id\r\n    //    Output: Success or Failure\r\n    async addFacultyMember(firstName, lastName, id, role)\r\n    {\r\n        const body = \r\n        {\r\n            info: {\r\n                firstName: firstName,\r\n                lastName: lastName,\r\n                id: id\r\n            },\r\n            role: role\r\n        };\r\n\r\n        return await this.sendPost(\"/faculty/add-member\", body, true).then ((response) => {return response.status == OK; });\r\n    }\r\n    \r\n    async getCoursesByDepartment(department = \"\") {\r\n        const body = {\r\n            department\r\n        };\r\n        \r\n        return await this.sendPost(\"/courses/get-by-department\", body);\r\n    }\r\n    \r\n    async addCourse(userid = \"\", firstName = \"\", lastName = \"\", year = 0, semester = \"\", courseNumber = 0, displayName = \"\", department = \"\")\r\n    {\r\n        const body = {\r\n            Course: {\r\n                Coordinator: {\r\n                    Id: userid,\r\n                    firstName,\r\n                    lastName\r\n                },\r\n                year,\r\n                semester,\r\n                courseNumber,\r\n                displayName,\r\n                department\r\n            }\r\n        };\r\n        \r\n        return await this.sendPost(\"/courses/add-course\", body, true).then((response) => { return response.status == OK; });\r\n    }\r\n    \r\n    async removeCourse(year = 0, semester = \"\", courseNumber = 0, department = \"\")\r\n    {\r\n        const body = {\r\n            Course: {\r\n                year,\r\n                semester,\r\n                courseNumber,\r\n                department\r\n            }\r\n        };\r\n        \r\n        return await this.sendPost(\"/courses/remove-course\", body, true).then((response) => { return response.status == OK; });\r\n    }\r\n\r\n    async getCourseOutcomesByCourse(year = 0, semester = \"\", courseNumber = 0, department = \"\")\r\n    {\r\n        const body = {\r\n            Course: {\r\n                year,\r\n                semester,\r\n                courseNumber,\r\n                department\r\n            }\r\n        };\r\n    \r\n        return await this.sendPost(\"/course-outcomes/by-course\", body);\r\n    }\r\n\r\n    async postCourseOutcomes(outcomes = [])\r\n    {\r\n        //an outcome object contains the following:\r\n        //order (number), outcome (string), mappedStudentOutcomes(array of numbers)\r\n        //Example:\r\n        //{\r\n        //order: 1, outcome: \"Accomplish things\", mappedStudentOutcomes: [1, 0, 0, 1, 0, 1]\r\n        //}\r\n\r\n        const body = {\r\n            courseOutcomesList: outcomes\r\n        };\r\n    \r\n        return await this.sendPost(\"/course-outcomes/post-outcomes\", body, true).then((response) => { return response.status == OK; });;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}