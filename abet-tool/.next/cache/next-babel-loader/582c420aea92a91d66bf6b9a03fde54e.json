{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ty\\\\Desktop\\\\ABET_frontend\\\\abet-tool\\\\components\\\\admin-components\\\\EditCourseAssignments\\\\Autocomplete.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Autocomplete.css\"; //autocomplete functionality from https://www.digitalocean.com/community/tutorials/react-react-autocomplete\n\nvar Autocomplete = /*#__PURE__*/function (_Component) {\n  _inherits(Autocomplete, _Component);\n\n  var _super = _createSuper(Autocomplete);\n\n  function Autocomplete(props) {\n    var _this;\n\n    _classCallCheck(this, Autocomplete);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (e) {\n      var suggestions = _this.props.suggestions;\n      var userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      var filteredSuggestions = suggestions.filter(function (suggestion) {\n        return suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1;\n      }); // Update the user input and filtered suggestions, reset the active\n      // suggestion and make sure the suggestions are shown\n\n      _this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (e) {\n      // Update the user input and reset the rest of the state\n      _this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (e) {\n      var _this$state = _this.state,\n          activeSuggestion = _this$state.activeSuggestion,\n          filteredSuggestions = _this$state.filteredSuggestions; // User pressed the enter key, update the input and close the\n      // suggestions\n\n      if (e.keyCode === 13) {\n        _this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n      } // User pressed the up arrow, decrement the index\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          _this.setState({\n            activeSuggestion: activeSuggestion - 1\n          });\n        } // User pressed the down arrow, increment the index\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            _this.setState({\n              activeSuggestion: activeSuggestion + 1\n            });\n          }\n    });\n\n    _this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n    return _this;\n  } // Event fired when the input value is changed\n\n\n  _createClass(Autocomplete, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var onChange = this.onChange,\n          onClick = this.onClick,\n          onKeyDown = this.onKeyDown,\n          _this$state2 = this.state,\n          activeSuggestion = _this$state2.activeSuggestion,\n          filteredSuggestions = _this$state2.filteredSuggestions,\n          showSuggestions = _this$state2.showSuggestions,\n          userInput = _this$state2.userInput;\n      var suggestionsListComponent;\n\n      if (showSuggestions && userInput) {\n        if (filteredSuggestions.length) {\n          suggestionsListComponent = __jsx(\"ul\", {\n            \"class\": \"suggestions\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 11\n            }\n          }, filteredSuggestions.map(function (suggestion, index) {\n            var className; // Flag the active suggestion with a class\n\n            if (index === activeSuggestion) {\n              className = \"suggestion-active\";\n            }\n\n            return __jsx(\"li\", {\n              className: className,\n              key: suggestion,\n              onClick: onClick,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }\n            }, suggestion);\n          }));\n        }\n      }\n\n      return __jsx(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 7\n        }\n      }, __jsx(\"input\", {\n        className: \"faculty-input\",\n        type: \"text\",\n        onChange: onChange,\n        onKeyDown: onKeyDown,\n        value: userInput,\n        placeholder: \"Unassigned\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }), suggestionsListComponent);\n    }\n  }]);\n\n  return Autocomplete;\n}(Component);\n\n_defineProperty(Autocomplete, \"propTypes\", {\n  suggestions: PropTypes.instanceOf(Array)\n});\n\n_defineProperty(Autocomplete, \"defaultProps\", {\n  suggestions: []\n});\n\nexport default Autocomplete;","map":{"version":3,"sources":["C:/Users/Ty/Desktop/ABET_frontend/abet-tool/components/admin-components/EditCourseAssignments/Autocomplete.js"],"names":["React","Component","Fragment","PropTypes","Autocomplete","props","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","innerText","state","keyCode","length","onChange","onClick","onKeyDown","suggestionsListComponent","map","index","className","instanceOf","Array"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Autocomplete.css\";\r\n\r\n//autocomplete functionality from https://www.digitalocean.com/community/tutorials/react-react-autocomplete\r\n\r\nclass Autocomplete extends Component {\r\n  static propTypes = {\r\n    suggestions: PropTypes.instanceOf(Array)\r\n  };\r\n\r\n  static defaultProps = {\r\n    suggestions: []\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // The active selection's index\r\n      activeSuggestion: 0,\r\n      // The suggestions that match the user's input\r\n      filteredSuggestions: [],\r\n      // Whether or not the suggestion list is shown\r\n      showSuggestions: false,\r\n      // What the user has entered\r\n      userInput: \"\"\r\n    };\r\n  }\r\n\r\n  // Event fired when the input value is changed\r\n  onChange = e => {\r\n    const { suggestions } = this.props;\r\n    const userInput = e.currentTarget.value;\r\n\r\n    // Filter our suggestions that don't contain the user's input\r\n    const filteredSuggestions = suggestions.filter(\r\n      suggestion =>\r\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n    );\r\n\r\n    // Update the user input and filtered suggestions, reset the active\r\n    // suggestion and make sure the suggestions are shown\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions,\r\n      showSuggestions: true,\r\n      userInput: e.currentTarget.value\r\n    });\r\n  };\r\n\r\n  // Event fired when the user clicks on a suggestion\r\n  onClick = e => {\r\n    // Update the user input and reset the rest of the state\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions: [],\r\n      showSuggestions: false,\r\n      userInput: e.currentTarget.innerText\r\n    });\r\n  };\r\n\r\n  // Event fired when the user presses a key down\r\n  onKeyDown = e => {\r\n    const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n    // User pressed the enter key, update the input and close the\r\n    // suggestions\r\n    if (e.keyCode === 13) {\r\n      this.setState({\r\n        activeSuggestion: 0,\r\n        showSuggestions: false,\r\n        userInput: filteredSuggestions[activeSuggestion]\r\n      });\r\n    }\r\n    // User pressed the up arrow, decrement the index\r\n    else if (e.keyCode === 38) {\r\n      if (activeSuggestion === 0) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n    }\r\n    // User pressed the down arrow, increment the index\r\n    else if (e.keyCode === 40) {\r\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onChange,\r\n      onClick,\r\n      onKeyDown,\r\n      state: {\r\n        activeSuggestion,\r\n        filteredSuggestions,\r\n        showSuggestions,\r\n        userInput\r\n      }\r\n    } = this;\r\n\r\n    let suggestionsListComponent;\r\n\r\n    if (showSuggestions && userInput) {\r\n      if (filteredSuggestions.length) {\r\n        suggestionsListComponent = (\r\n          <ul class=\"suggestions\">\r\n            {filteredSuggestions.map((suggestion, index) => {\r\n              let className;\r\n\r\n              // Flag the active suggestion with a class\r\n              if (index === activeSuggestion) {\r\n                className = \"suggestion-active\";\r\n              }\r\n\r\n              return (\r\n                <li\r\n                  className={className}\r\n                  key={suggestion}\r\n                  onClick={onClick}\r\n                >\r\n                  {suggestion}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <input\r\n          className=\"faculty-input\"\r\n          type=\"text\"\r\n          onChange={onChange}\r\n          onKeyDown={onKeyDown}\r\n          value={userInput}\r\n          placeholder=\"Unassigned\"\r\n        />\r\n        {suggestionsListComponent}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;"]},"metadata":{},"sourceType":"module"}