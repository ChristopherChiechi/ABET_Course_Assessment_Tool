import { __assign } from 'tslib';
import { isMotionValue } from '../../../value/utils/is-motion-value.js';
import { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.js';
import { useConstant } from '../../../utils/use-constant.js';

function useInitialMotionValues(visualElement) {
    var createStyle = function () {
        var _a = visualElement.build(), vars = _a.vars, style = _a.style;
        return __assign(__assign({}, vars), style);
    };
    return visualElement.isStatic ? createStyle() : useConstant(createStyle);
}
function useStyle(visualElement, props) {
    var styleProp = props.style || {};
    var style = {};
    /**
     * Copy non-Motion Values straight into style
     */
    for (var key in styleProp) {
        // TODO We might want this to be a hasValue check? Although this could be impure
        if (!isMotionValue(styleProp[key]) &&
            !isForcedMotionValue(key, props)) {
            style[key] = styleProp[key];
        }
    }
    style = __assign(__assign({}, style), useInitialMotionValues(visualElement));
    if (props.transformValues) {
        style = props.transformValues(style);
    }
    return style;
}
function useHTMLProps(visualElement, props) {
    // The `any` isn't ideal but it is the type of createElement props argument
    var htmlProps = {};
    var style = useStyle(visualElement, props);
    if (Boolean(props.drag)) {
        // Disable the ghost element when a user drags
        htmlProps.draggable = false;
        // Disable text selection
        style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout =
            "none";
        // Disable scrolling on the draggable direction
        style.touchAction =
            props.drag === true
                ? "none"
                : "pan-" + (props.drag === "x" ? "y" : "x");
    }
    htmlProps.style = style;
    return htmlProps;
}

export { useHTMLProps, useStyle };
