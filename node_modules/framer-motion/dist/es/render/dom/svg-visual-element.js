import { __assign } from 'tslib';
import { isMotionValue } from '../../value/utils/is-motion-value.js';
import { isTransformProp } from './utils/transform.js';
import { getDefaultValueType } from './utils/value-types.js';
import { visualElement } from '../index.js';
import { htmlConfig } from './html-visual-element.js';
import { buildSVGAttrs } from './utils/build-svg-attrs.js';
import { camelToDash } from './utils/camel-to-dash.js';
import { camelCaseAttributes } from './utils/svg-camel-case-attrs.js';

var zeroDimensions = {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
};
var svgMutableState = function () { return (__assign(__assign({}, htmlConfig.createRenderState()), { attrs: {}, dimensions: zeroDimensions })); };
var svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), { createRenderState: svgMutableState, onMount: function (element, instance, mutableState) {
        try {
            mutableState.dimensions =
                typeof instance.getBBox === "function"
                    ? instance.getBBox()
                    : instance.getBoundingClientRect();
        }
        catch (e) {
            // Most likely trying to measure an unrendered element under Firefox
            mutableState.dimensions = zeroDimensions;
        }
        if (isPath(instance)) {
            mutableState.totalPathLength = instance.getTotalLength();
        }
        /**
         * Ensure we render the element as soon as possible to reflect the measured dimensions.
         * Preferably this would happen synchronously but we put it in rAF to prevent layout thrashing.
         */
        element.scheduleRender();
    },
    getBaseTarget: function (props, key) {
        return props[key];
    },
    readValueFromInstance: function (domElement, key) {
        var _a;
        if (isTransformProp(key)) {
            return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;
        }
        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
        return domElement.getAttribute(key);
    },
    scrapeMotionValuesFromProps: function (props) {
        var newValues = htmlConfig.scrapeMotionValuesFromProps(props);
        for (var key in props) {
            if (isMotionValue(props[key])) {
                if (key === "x" || key === "y") {
                    key = "attr" + key.toUpperCase();
                }
                newValues[key] = props[key];
            }
        }
        return newValues;
    },
    build: function (_element, renderState, latestValues, projection, layoutState, options, props) {
        buildSVGAttrs(renderState, latestValues, projection, layoutState, options, props.transformTemplate);
    },
    render: function (element, mutableState) {
        htmlConfig.render(element, mutableState);
        for (var key in mutableState.attrs) {
            element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, mutableState.attrs[key]);
        }
    } }));
function isPath(element) {
    return element.tagName === "path";
}

export { svgMutableState, svgVisualElement };
