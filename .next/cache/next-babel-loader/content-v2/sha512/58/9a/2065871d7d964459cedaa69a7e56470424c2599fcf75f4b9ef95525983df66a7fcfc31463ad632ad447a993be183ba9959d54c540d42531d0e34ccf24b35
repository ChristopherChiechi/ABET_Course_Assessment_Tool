{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/OutcomeMapping/OutcomeMapping.js\";\nimport { useState, useEffect } from \"react\";\nimport React from 'react';\nimport { VStack, Text, Select } from '@chakra-ui/react';\nimport { RecoilRoot, atom, selector, useRecoilState, useRecoilValue } from 'recoil';\nimport StudentOutcomeList from \"./StudentOutcomeList\";\nimport programData from \"../../../fake-data/programs.json\";\nimport courseData from \"../../../fake-data/course.json\";\nimport { coursesAtom } from './recoilStore';\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\nimport { getAllCourses } from '../../../api/APIHelper';\nimport TableGroup from \"./TableGroup\";\nconst OutcomeMapping = /*#__PURE__*/React.memo(() => {\n  const programs = programData.programs;\n  const {\n    0: selectedProgram,\n    1: setSelectedProgram\n  } = useState();\n  const {\n    0: studentOutcomes,\n    1: setStudentOutcomes\n  } = useState();\n  const {\n    0: outcomeMapping,\n    1: setOutcomeMapping\n  } = useState();\n  const [courses, setCourses] = useRecoilState(coursesAtom);\n\n  const getCourses = async () => {\n    const courses = await getAllCourses(\"MT2020\", \"fall\", 2020); // console.log(course);\n  };\n\n  useEffect(() => {\n    document.getElementById(\"top\").scrollIntoView();\n    setStudentOutcomes(programs); //getCourses();\n  }, []);\n  useEffect(() => {\n    if (selectedProgram != null) {\n      const numOfStudentOutcomes = selectedProgram.outcomes.length;\n      const courseOutcomesArray = courseData.courses.map(course => {\n        return {\n          name: course.name,\n          code: course.code,\n          outcomes: course['course-outcomes'].map(outcome => {\n            return {\n              outcome: outcome,\n              studentMap: new Array(numOfStudentOutcomes).fill(0)\n            };\n          })\n        };\n      });\n      setOutcomeMapping(courseOutcomesArray);\n      setCourses(outcomeMapping);\n    }\n  }, [selectedProgram]);\n  useEffect(() => {// console.log(outcomeMapping);\n  }, [outcomeMapping]);\n\n  const handleSetOption = e => {\n    const selection = programs.filter(program => program.name == e.target.value)[0];\n    setSelectedProgram(selection);\n  };\n\n  const renderOptions = studentOutcomes && studentOutcomes.map((program, idx) => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: program.name,\n      children: program.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this);\n  });\n  const renderMappingTable = outcomeMapping ? outcomeMapping.map((course, idx) => {\n    return /*#__PURE__*/_jsxDEV(CourseOutcomeTable, {\n      course: course\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n  }) : null;\n  return /*#__PURE__*/_jsxDEV(RecoilRoot, {\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      id: \"top\",\n      w: \"80%\",\n      m: \"0 auto\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"2xl\",\n        fontWeight: \"bold\",\n        mt: \"1em\",\n        children: \"Student Outcome Mapping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        mt: \"1em\",\n        w: \"80%\",\n        id: \"course\",\n        variant: \"filled\",\n        onChange: handleSetOption,\n        value: selectedProgram,\n        children: renderOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: selectedProgram && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(StudentOutcomeList, {\n            selectedProgram: selectedProgram\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this), outcomeMapping ? /*#__PURE__*/_jsxDEV(TableGroup, {\n            courseData: outcomeMapping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 18\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n});\nexport default OutcomeMapping;","map":{"version":3,"sources":["/Users/armaandhanoa/Documents/Documents - Armaanâ€™s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/OutcomeMapping/OutcomeMapping.js"],"names":["useState","useEffect","React","VStack","Text","Select","RecoilRoot","atom","selector","useRecoilState","useRecoilValue","StudentOutcomeList","programData","courseData","coursesAtom","CourseOutcomeTable","getAllCourses","TableGroup","OutcomeMapping","memo","programs","selectedProgram","setSelectedProgram","studentOutcomes","setStudentOutcomes","outcomeMapping","setOutcomeMapping","courses","setCourses","getCourses","document","getElementById","scrollIntoView","numOfStudentOutcomes","outcomes","length","courseOutcomesArray","map","course","name","code","outcome","studentMap","Array","fill","handleSetOption","e","selection","filter","program","target","value","renderOptions","idx","renderMappingTable"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport React from 'react';\nimport { VStack, Text, Select } from '@chakra-ui/react';\nimport {\n  RecoilRoot,\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n} from 'recoil';\n\nimport StudentOutcomeList from \"./StudentOutcomeList\";\nimport programData from \"../../../fake-data/programs.json\";\nimport courseData from \"../../../fake-data/course.json\";\nimport { coursesAtom } from './recoilStore';\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\nimport { getAllCourses } from '../../../api/APIHelper';\nimport TableGroup from \"./TableGroup\";\n\nconst OutcomeMapping = React.memo(() => {\n  const programs = programData.programs;\n\n  const [selectedProgram, setSelectedProgram] = useState();\n  const [studentOutcomes, setStudentOutcomes] = useState();\n  const [outcomeMapping, setOutcomeMapping] = useState();\n  const [courses, setCourses] = useRecoilState(coursesAtom);\n\n  const getCourses = async () => {\n    const courses = await getAllCourses(\"MT2020\", \"fall\", 2020)\n   // console.log(course);\n  }\n\n  useEffect(() => {\n    document.getElementById(\"top\").scrollIntoView();\n    setStudentOutcomes(programs);\n    //getCourses();\n  },[]);\n\n  useEffect(() => {\n    if (selectedProgram != null ){\n      const numOfStudentOutcomes = selectedProgram.outcomes.length;\n      \n      const courseOutcomesArray = courseData.courses.map((course) => {\n        return {\n          name :course.name, \n          code: course.code,\n          outcomes: \n            course['course-outcomes'].map((outcome) => {\n              return {\n                outcome: outcome,\n                studentMap: new Array(numOfStudentOutcomes).fill(0)\n              }\n            })\n        }\n      });\n      setOutcomeMapping(courseOutcomesArray);\n      setCourses(outcomeMapping);\n    }\n  }, [selectedProgram]);\n\n  useEffect(() => {\n   // console.log(outcomeMapping);\n  }, [outcomeMapping]);\n\n  const handleSetOption = (e) => {\n    const selection = programs.filter((program) => program.name == e.target.value)[0];\n    setSelectedProgram(selection);\n  };\n\n  const renderOptions = studentOutcomes && studentOutcomes.map((program, idx) => {\n    return <option value={program.name} key={idx}>{program.name}</option>;\n  });\n  const renderMappingTable = outcomeMapping ? outcomeMapping.map((course, idx) => {\n    return <CourseOutcomeTable course={course} key={idx}/>\n  }) : null;\n\n  return (\n    <RecoilRoot>\n      <VStack id=\"top\" w=\"80%\" m=\"0 auto\">\n          <Text fontSize=\"2xl\" fontWeight=\"bold\" mt=\"1em\">\n            Student Outcome Mapping\n          </Text>\n          <Select\n            mt=\"1em\"\n            w=\"80%\"\n            id=\"course\"\n            variant=\"filled\"\n            onChange={handleSetOption}\n            value={selectedProgram}\n          >\n            {/* this should be filled with a list of courses from db */}\n            {renderOptions}\n          </Select>\n        <div>\n          {selectedProgram \n            &&\n              <div>\n                <StudentOutcomeList selectedProgram={selectedProgram} />\n                {/* {renderMappingTable} */}\n                {outcomeMapping ?\n                 <TableGroup courseData={outcomeMapping}/>\n                  : null\n                }\n              </div>\n          }\n        </div>\n      </VStack>\n    </RecoilRoot>\n  );\n});\n\nexport default OutcomeMapping;\n"]},"metadata":{},"sourceType":"module"}