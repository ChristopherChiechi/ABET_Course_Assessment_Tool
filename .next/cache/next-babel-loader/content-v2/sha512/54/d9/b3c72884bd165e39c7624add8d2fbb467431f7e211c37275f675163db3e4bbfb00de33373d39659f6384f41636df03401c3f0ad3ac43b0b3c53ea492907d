{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/OutcomeMapping/OutcomeMapping.js\";\nimport { useState, useEffect } from \"react\";\nimport React from 'react';\nimport { VStack, Text, Select } from '@chakra-ui/react';\nimport { RecoilRoot, atom, selector, useRecoilState, useRecoilValue } from 'recoil';\nimport StudentOutcomeList from \"./StudentOutcomeList\";\nimport programData from \"../../../fake-data/programs.json\";\nimport courseData from \"../../../fake-data/course.json\";\nimport { coursesAtom } from './recoilStore';\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\nimport { getAllCourses } from '../../../api/APIHelper';\nimport TableGroup from \"./TableGroup\";\nconst OutcomeMapping = /*#__PURE__*/React.memo(() => {\n  const programs = programData.programs;\n  const {\n    0: selectedProgram,\n    1: setSelectedProgram\n  } = useState();\n  const {\n    0: studentOutcomes,\n    1: setStudentOutcomes\n  } = useState();\n  const {\n    0: outcomeMapping,\n    1: setOutcomeMapping\n  } = useState();\n  const [courses, setCourses] = useRecoilState(coursesAtom);\n\n  const getCourses = async () => {\n    const courses = await getAllCourses(\"MT2020\", \"fall\", 2020); // console.log(course);\n  };\n\n  useEffect(() => {\n    document.getElementById(\"top\").scrollIntoView();\n    setStudentOutcomes(programs); //getCourses();\n  }, []); // useEffect(() => {\n  //   if (selectedProgram != null ){\n  //     const numOfStudentOutcomes = selectedProgram.outcomes.length;\n  //     const courseOutcomesArray = courseData.courses.map((course) => {\n  //       return {\n  //         name :course.name, \n  //         code: course.code,\n  //         outcomes: \n  //           course['course-outcomes'].map((outcome) => {\n  //             return {\n  //               outcome: outcome,\n  //               studentMap: new Array(numOfStudentOutcomes).fill(0)\n  //             }\n  //           })\n  //       }\n  //     });\n  //     setOutcomeMapping(courseOutcomesArray);\n  //     setCourses(outcomeMapping);\n  //   }\n  // }, [selectedProgram]);\n  // useEffect(() => {\n  //  // console.log(outcomeMapping);\n  // }, [outcomeMapping]);\n\n  const handleSetOption = e => {\n    const selection = programs.filter(program => program.name == e.target.value)[0];\n    setSelectedProgram(selection);\n    const numOfStudentOutcomes = selection.outcomes.length;\n    const courseOutcomesArray = courseData.courses.map((course, idx) => {\n      return {\n        name: course.name,\n        code: course.code,\n        index: idx,\n        outcomes: course['course-outcomes'].map(outcome => {\n          return {\n            outcome: outcome,\n            studentMap: new Array(numOfStudentOutcomes).fill(0)\n          };\n        })\n      };\n    });\n    setOutcomeMapping(courseOutcomesArray);\n    setCourses(courseOutcomesArray);\n    console.log(courses);\n  };\n\n  const handleCheck = (course, studentIdx, courseIdx) => {\n    //console.log(course);\n    //console.log(course.outcomes[0].studentMap);\n    let temp = outcomeMapping;\n    console.log(courseIdx);\n    const currentCheckValue = temp[course.index].outcomes[courseIdx].studentMap[studentIdx];\n    temp[course.index].outcomes[courseIdx].studentMap[studentIdx] = temp[course.index].outcomes[courseIdx].studentMap[studentIdx] === 0 ? 1 : 0;\n    console.log(temp[course.index]); // setOutcomeMapping({\n    // })\n  };\n\n  const renderOptions = studentOutcomes && studentOutcomes.map((program, idx) => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: program.name,\n      children: program.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(RecoilRoot, {\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      id: \"top\",\n      w: \"80%\",\n      m: \"0 auto\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"2xl\",\n        fontWeight: \"bold\",\n        mt: \"1em\",\n        children: \"Student Outcome Mapping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        mt: \"1em\",\n        w: \"80%\",\n        id: \"course\",\n        placeholder: \"Select Program\",\n        variant: \"filled\",\n        onChange: handleSetOption,\n        children: renderOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: selectedProgram ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(StudentOutcomeList, {\n            selectedProgram: selectedProgram\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), outcomeMapping ? outcomeMapping.map((course, idx) => {\n            return /*#__PURE__*/_jsxDEV(CourseOutcomeTable, {\n              course: course,\n              handleCheck: handleCheck\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 26\n            }, this);\n          }) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n});\nexport default OutcomeMapping;","map":{"version":3,"sources":["/Users/armaandhanoa/Documents/Documents - Armaanâ€™s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/OutcomeMapping/OutcomeMapping.js"],"names":["useState","useEffect","React","VStack","Text","Select","RecoilRoot","atom","selector","useRecoilState","useRecoilValue","StudentOutcomeList","programData","courseData","coursesAtom","CourseOutcomeTable","getAllCourses","TableGroup","OutcomeMapping","memo","programs","selectedProgram","setSelectedProgram","studentOutcomes","setStudentOutcomes","outcomeMapping","setOutcomeMapping","courses","setCourses","getCourses","document","getElementById","scrollIntoView","handleSetOption","e","selection","filter","program","name","target","value","numOfStudentOutcomes","outcomes","length","courseOutcomesArray","map","course","idx","code","index","outcome","studentMap","Array","fill","console","log","handleCheck","studentIdx","courseIdx","temp","currentCheckValue","renderOptions"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport React from 'react';\nimport { VStack, Text, Select } from '@chakra-ui/react';\nimport {\n  RecoilRoot,\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n} from 'recoil';\n\nimport StudentOutcomeList from \"./StudentOutcomeList\";\nimport programData from \"../../../fake-data/programs.json\";\nimport courseData from \"../../../fake-data/course.json\";\nimport { coursesAtom } from './recoilStore';\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\nimport { getAllCourses } from '../../../api/APIHelper';\nimport TableGroup from \"./TableGroup\";\n\nconst OutcomeMapping = React.memo(() => {\n  const programs = programData.programs;\n\n  const [selectedProgram, setSelectedProgram] = useState();\n  const [studentOutcomes, setStudentOutcomes] = useState();\n  const [outcomeMapping, setOutcomeMapping] = useState();\n  const [courses, setCourses] = useRecoilState(coursesAtom);\n\n  const getCourses = async () => {\n    const courses = await getAllCourses(\"MT2020\", \"fall\", 2020)\n    // console.log(course);\n  }\n\n  useEffect(() => {\n    document.getElementById(\"top\").scrollIntoView();\n    setStudentOutcomes(programs);\n    //getCourses();\n  }, []);\n\n  // useEffect(() => {\n  //   if (selectedProgram != null ){\n  //     const numOfStudentOutcomes = selectedProgram.outcomes.length;\n\n  //     const courseOutcomesArray = courseData.courses.map((course) => {\n  //       return {\n  //         name :course.name, \n  //         code: course.code,\n  //         outcomes: \n  //           course['course-outcomes'].map((outcome) => {\n  //             return {\n  //               outcome: outcome,\n  //               studentMap: new Array(numOfStudentOutcomes).fill(0)\n  //             }\n  //           })\n  //       }\n  //     });\n  //     setOutcomeMapping(courseOutcomesArray);\n  //     setCourses(outcomeMapping);\n  //   }\n  // }, [selectedProgram]);\n\n  // useEffect(() => {\n  //  // console.log(outcomeMapping);\n  // }, [outcomeMapping]);\n  \n  const handleSetOption = (e) => {\n    const selection = programs.filter((program) => program.name == e.target.value)[0];\n    setSelectedProgram(selection);\n    const numOfStudentOutcomes = selection.outcomes.length;\n    const courseOutcomesArray = courseData.courses.map((course, idx) => {\n      return {\n        name: course.name,\n        code: course.code,\n        index: idx,\n        outcomes:\n          course['course-outcomes'].map((outcome) => {\n            return {\n              outcome: outcome,\n              studentMap: new Array(numOfStudentOutcomes).fill(0)\n            }\n          })\n      }\n    });\n    setOutcomeMapping(courseOutcomesArray);\n    setCourses(courseOutcomesArray);\n    console.log(courses);\n  };\n\n  const handleCheck = (course, studentIdx, courseIdx) => {\n    //console.log(course);\n    //console.log(course.outcomes[0].studentMap);\n    let temp = outcomeMapping;\n    console.log(courseIdx);\n    const currentCheckValue = temp[course.index].outcomes[courseIdx].studentMap[studentIdx];\n    temp[course.index].outcomes[courseIdx].studentMap[studentIdx] = (temp[course.index].outcomes[courseIdx].studentMap[studentIdx] === 0) ? 1 : 0;\n    console.log(temp[course.index]);\n    // setOutcomeMapping({\n    // })\n  }\n\n  const renderOptions = studentOutcomes && studentOutcomes.map((program, idx) => {\n    return <option value={program.name} key={idx}>{program.name}</option>;\n  });\n\n  return (\n    <RecoilRoot>\n      <VStack id=\"top\" w=\"80%\" m=\"0 auto\">\n        <Text fontSize=\"2xl\" fontWeight=\"bold\" mt=\"1em\">\n          Student Outcome Mapping\n          </Text>\n        <Select\n          mt=\"1em\"\n          w=\"80%\"\n          id=\"course\"\n          placeholder=\"Select Program\"\n          variant=\"filled\"\n          onChange={handleSetOption}\n        >\n          {/* this should be filled with a list of courses from db */}\n          {renderOptions}\n        </Select>\n        <div>\n          {selectedProgram ?\n            <div>\n              <StudentOutcomeList selectedProgram={selectedProgram} />\n              {outcomeMapping ?\n                outcomeMapping.map((course, idx) => {\n                  return <CourseOutcomeTable course={course} key={idx} handleCheck={handleCheck}/>\n              })\n                : null\n              }\n            </div>\n            : null\n          }\n        </div>\n      </VStack>\n    </RecoilRoot>\n  );\n});\n\nexport default OutcomeMapping;\n"]},"metadata":{},"sourceType":"module"}