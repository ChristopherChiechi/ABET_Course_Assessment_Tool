{"ast":null,"code":"// Helper API Class\nimport cookieCutter from \"cookie-cutter\";\nconst root = \"https://localhost:44372/api\"; // The base URL for each request\n\nconst OK = 200; //200 Ok status code\n\nconst UNAUTHORIZED = 401; //401 Unauthorized status code\n\nconst NOT_LOGGED_IN_MSG = \"Error: Your session has expired. Please log in again.\";\nconst SERVER_ERROR_MSG = \"Internal Server Error: Please try again later.\";\nconst BAD_REQUEST_MSG = \"Error: Some of the provided parameters are invalid.\";\nvar token = \"\"; //holds value of the token cookie\n\nexport default class API {\n  /* This function is for getInitialProps.\r\n    cookieCutter is undefined in getInitialProps,\r\n    so this function sets the token to the value of the cookie\r\n    passed in from getInitialProps. */\n  setToken(t = \"\") {\n    token = t;\n  } // generic function for sending POST requests\n  //    Input: route and body\n  //    Output: The JSON that is returned from the route\n\n\n  async sendPost(route = \"\", body = {}) {\n    const url = root + route; // Combine the root URL with the specified route\n\n    var statusCode; //holds the status code of the response\n    //if the request is not from getInitialProps, meaning cookieCutter is defined, retreive the cookie\n\n    if (typeof cookieCutter.get == \"function\") {\n      token = cookieCutter.get(\"token\");\n    }\n\n    return fetch(url, {\n      method: \"POST\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      },\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(body)\n    }).then(response => {\n      statusCode = response.status;\n      return response.json();\n    }).then(json => {\n      if (statusCode == OK) return json;else if (statusCode != UNAUTHORIZED) {\n        console.log(new ErrorObj(NOT_LOGGED_IN_MSG, false));\n        return new ErrorObj(NOT_LOGGED_IN_MSG, false); //user's session has expired\n      } else {\n        if (json.hasOwnProperty(\"message\")) {\n          console.log(new ErrorObj(json[\"message\"]));\n          return new ErrorObj(json[\"message\"]); //custom error message from API\n        } else return new ErrorObj(BAD_REQUEST_MSG); //bad input parameters\n\n      }\n    }).catch(() => {\n      return new ErrorObj(SERVER_ERROR_MSG);\n    });\n  } //---login(userid, password)---\n  //    Input: UserId, Password\n  //    Output: \"Admin\", \"Instructor\", \"Student/TA\" or boolean for failure\n\n\n  async login(userid = \"\", password = \"\") {\n    const body = {\n      userid: userid,\n      password: password\n    };\n    return await this.sendPost(\"/login\", body).then(json => {\n      if (json.hasOwnProperty(\"token\")) {\n        var expires = new Date();\n        expires.setHours(expires.getHours() + 24); //expires in 24 hours\n\n        expires = expires.toUTCString();\n        cookieCutter.set(\"token\", json[\"token\"], {\n          expires\n        }); //set token cookie\n\n        return json[\"role\"]; //return the role\n      }\n    }); //To use this data you must do the following:\n    //api.login(userid, password).then(role => {/*here is where the return value is accessible, it is either role string or a boolean indicating failure*/})\n  } //---logout(userid)---\n  //    Input: None\n  //    Output: None\n\n\n  logout() {\n    cookieCutter.set(\"token\", \"\", {\n      expires: new Date().toUTCString()\n    });\n    cookieCutter.set(\"user\", \"\", {\n      expires: new Date().toUTCString()\n    });\n  } //---getCourses(userid, semester, year)---\n  //    Input: UserId, Semester, Year\n  //    Output: Sections for the corresponding UserId, Semester and Year\n\n\n  async getCourses(userid = \"\", semester = \"\", year = 0) {\n    const body = {\n      userid: userid,\n      semester: semester,\n      year: year\n    };\n    return await this.sendPost(\"/sections/by-userid-semester-year\", body); //To use this data you must do the following:\n    //api.getCourses(userId, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  } //---getAllCourses(userid, semester, year)---  (Admin)\n  //    Input: UserId, Semester, Year\n  //    Output: Sections for the corresponding Semester and Year\n\n\n  async getAllCourses(userid = \"\", semester = \"\", year = 0) {\n    const body = {\n      Userid: userid,\n      Semester: semester,\n      Year: year\n    };\n    return await this.sendPost(\"/sections/by-semester-year\", body); //To use this data you must do the following:\n    //api.getAllCourses(userid, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  } //---getCoursesBySemesterYear(semester, year)---  (Admin)\n  //    Input: Semester, Year\n  //    Output: All Courses for the corresponding semester and year\n\n\n  async getCoursesBySemesterYear(semester = \"\", year = 0) {\n    const body = {\n      semester: semester,\n      year: year\n    };\n    return await this.sendPost(\"/courses/get-by-year-semester\", body);\n  } //To use this data you must do the following:\n  //api.getCoursesBySemesterYear(semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  //---getFormsBySection(userid, year, semester, department, course, section)---\n  //    Input: UserId, Year, Semester, Department, CourseNumber, SectionNumber\n  //    Output: Forms for the corresponding UserId, Year, Semester, Department, CourseNumber, and SectionNumber\n\n\n  async getFormBySection(userid = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", sectionNumber = \"\") {\n    const body = {\n      Section: {\n        Instructor: {\n          Id: userid\n        },\n        Year: year,\n        Semester: semester,\n        Department: department,\n        CourseNumber: courseNumber,\n        SectionNumber: sectionNumber\n      }\n    };\n    return await this.sendPost(\"/forms/by-section\", body); //To use this data you must do the following:\n    //api.getFormsBySection(userid, year, semester, department, course, section).then(form => {/*here is where the data is accessible, form is an array of JSON objects*/})\n  } //---getFormsByCourse(userid, year, semester, department, course)---\n  //    Input: UserId, Year, Semester, Department, CourseNumber\n  //    Output: Forms for the corresponding UserId, Year, Semester, Department, and CourseNumber\n\n\n  async getFormsByCourse(userid = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\") {\n    const body = {\n      Course: {\n        Coordinator: {\n          Id: userid\n        },\n        Year: year,\n        Semester: semester,\n        Department: department,\n        CourseNumber: courseNumber\n      }\n    };\n    return await this.sendPost(\"/forms/by-course\", body); //To use this data you must do the following:\n    //api.getFormsByCourse(userid, year, semester, department, course).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  } //---getAllForms(userid, semester, year)--- (Admin)\n  //    Input: UserId, Semester, Year\n  //    Output: Forms for the corresponding Semester and Year\n\n\n  async getAllForms(userid = \"\", semester = \"\", year = 0) {\n    const body = {\n      userid: userid,\n      semester: semester,\n      year: year\n    };\n    return await this.sendPost(\"/forms/by-semester-year\", body); //To use this data you must do the following:\n    //api.getAllForms(userid, semester, year).then(courses => {/*here is where the data is accessible, forms is an array of JSON objects*/})\n  } //---postForm(userId, year, semester, department, courseNumber, sectionNumber, isSectionCompleted, outcomes, ITGrades, CSGrades, CEGrades)---\n  //    Input: ^^^   (will also have pdf here later as an additional parameter)\n  //    Output: Success or Failure\n\n\n  async postForm(userId = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", sectionNumber = \"\", isSectionCompleted = false, outcomes = [], ITGrades = {}, CSGrades = {}, CEGrades = {}) {\n    // the body will also include any pdf to post in the future\n    //outcomes: an array of Course_Outcomes objects\n    //Course_Outcomes class:\n    //string outcome, int numberOfIT, int numberOfCS, int numberOfCE, StudentWorks[] studentWorks\n    //StudentWorks class:\n    //string studentWork, string fileUploaded (<-- will implement later)\n    //IT, CS, CE Grades class:\n    //int A, int B, int C, int D, int E, int F, int W, int I, int totalStudents\n    const body = {\n      form: {\n        section: {\n          instructor: {\n            id: userId\n          },\n          year,\n          semester,\n          department,\n          courseNumber,\n          sectionNumber,\n          isSectionCompleted\n        },\n        outcomes,\n        ITGrades,\n        CSGrades,\n        CEGrades\n      }\n    };\n    return await this.sendPost(\"/forms/post-form\", body);\n  } //---postComment(userId, year, semester, department, courseNumber, coordinatorComment, isCourseCompleted)---\n  //    Input: UserId, Year, Semester, department, courseNumber, coordinatorComment, isCourseCompleted\n  //    Output: Success or Failure\n\n\n  async postComment(userId = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", coordinatorComment = \"\", isCourseCompleted = false) {\n    const body = {\n      course: {\n        Coordinator: {\n          Id: userId\n        },\n        year,\n        semester,\n        department,\n        courseNumber,\n        coordinatorComment,\n        isCourseCompleted\n      }\n    };\n    return await this.sendPost(\"/courses/post-comment\", body);\n  } //---getBlankForm(userid)---\n  //    Input: UserId\n  //    Output: Blank Form\n\n\n  async getBlankForm(userid) {\n    const body = {\n      userid: userid\n    };\n    return await this.sendPost(\"/forms/new-blank\", body); //To use this data you must do the following:\n    //api.getBlankForm(userid).then(result => {/*here is where the return value is accessible, it is a JSON*/})\n  } //--getDefaultYearAndSemester()--\n  //    Input: Nothing\n  //    Output: Object Including Current Default Year and Semester\n\n\n  getDefaultYearAndSemester() {\n    var text = '{ \"year\": 0,' + // create string of object\n    ' \"semester\": \"\" }';\n    var ResultObj = JSON.parse(text); // create object from the string\n\n    var date = new Date(); // get the current date\n\n    var day = date.getDay(); // get the current day\n\n    var month = date.getMonth() + 1; // add one to month (by default January = 0)\n\n    ResultObj.year = date.getFullYear(); // get the full year from the date\n\n    ResultObj.semester = \"fall\"; // just to be safe\n    // Set the Default Semester Based on the Month\n\n    if (month > 8 || month == 8 && day >= 15) {\n      ResultObj.semester = \"fall\";\n    } else if (month > 5 || month == 5 && day >= 15) {\n      ResultObj.semester = \"summer\"; // since this is just a default semester, it always defaults to the longer semesters\n      // this is why it doesn't default to smaller summer semesters\n    } else {\n      ResultObj.semester = \"spring\";\n    }\n\n    return ResultObj; // return object including the year and semester\n  } //---addSection(userid, firstName, lastName, year, semester, courseNumber, sectionNumber, department, numberOfStudents)--- (Admin)\n  //    Input: ^^^\n  //    Output: Success or Failure\n\n\n  async addSection(userid = \"\", firstName = \"\", lastName = \"\", year = 0, semester = \"\", courseNumber = \"\", sectionNumber = \"\", department = \"\", numberOfStudents = 0) {\n    const body = {\n      section: {\n        instructor: {\n          id: userid,\n          firstName,\n          lastName\n        },\n        year,\n        semester,\n        courseNumber,\n        sectionNumber,\n        department,\n        isSectionCompleted: false,\n        numberOfStudents\n      }\n    };\n    return await this.sendPost(\"/sections/add-section\", body);\n  } //---getFacultyList()--- (Admin)\n  //    Input: none\n  //    Output: List of instructors, coordinators, adjunct faculties, and teaching fellows\n\n\n  async getFacultyList() {\n    return await this.sendPost(\"/faculty/get-list\", {});\n  } //---addFacultyMember(firstName, lastName, userid, role)--- (Admin)\n  //    Input: First Name, Last Name and User Id\n  //    Output: Success or Failure\n\n\n  async addFacultyMember(firstName = \"\", lastName = \"\", userId = \"\", facultyType = \"\") {\n    const body = {\n      info: {\n        firstName: firstName,\n        lastName: lastName,\n        id: userId\n      },\n      facultyType: facultyType\n    };\n    return await this.sendPost(\"/faculty/add-member\", body);\n  } //---getCoursesByDepartment(department)--- (Admin)\n  //    Input: department\n  //    Output: array of courses\n\n\n  async getCoursesByDepartment(department = \"\") {\n    const body = {\n      department\n    };\n    return await this.sendPost(\"/courses/get-by-department\", body);\n  } //---addCourse(userid, firstName, lastName, year, semester, courseNumber, displayName, department)--- (Admin)\n  //    Input: ^^^\n  //    Output: success or failure\n\n\n  async addCourse(userid = \"\", firstName = \"\", lastName = \"\", year = 0, semester = \"\", courseNumber = \"\", displayName = \"\", department = \"\") {\n    const body = {\n      Course: {\n        Coordinator: {\n          Id: userid,\n          firstName,\n          lastName\n        },\n        year,\n        semester,\n        courseNumber,\n        displayName,\n        department\n      }\n    };\n    return await this.sendPost(\"/courses/add-course\", body);\n  } //---removeCourse(year, semester, courseNumber, department)--- (Admin)\n  //    Input: year, semester, courseNumber, department\n  //    Output: success or failure\n\n\n  async removeCourse(year = 0, semester = \"\", courseNumber = \"\", department = \"\") {\n    const body = {\n      Course: {\n        year,\n        semester,\n        courseNumber,\n        department\n      }\n    };\n    return await this.sendPost(\"/courses/remove-course\", body);\n  } //---getCourseOutcomesByCourse(year, semester, courseNumber, department)--- (Admin)\n  //    Input: year, semester, courseNumber, department\n  //    Output: array of course outcomes\n\n\n  async getCourseOutcomesByCourse(year = 0, semester = \"\", courseNumber = \"\", department = \"\") {\n    const body = {\n      Course: {\n        year,\n        semester,\n        courseNumber,\n        department\n      }\n    };\n    return await this.sendPost(\"/course-outcomes/by-course\", body);\n  } //---postCourseOutcomes(outcomes)--- (Admin)\n  //    Input: array of outcome objects (see notes below)\n  //    Output: success or failure\n\n\n  async postCourseOutcomes(outcomes = []) {\n    //an outcome object contains the following:\n    //order (number), outcome (string), mappedStudentOutcomes(array of numbers)\n    //Example:\n    //{\n    //    order: 1, outcome: \"Accomplish things\", mappedStudentOutcomes: [1, 0, 0, 1, 0, 1]\n    //}\n    const body = {\n      courseOutcomesList: outcomes\n    };\n    return await this.sendPost(\"/course-outcomes/post-outcomes\", body);\n  }\n\n}\n\nclass ErrorObj {\n  constructor(message = \"\", isLoggedIn = true) {\n    this.success = false;\n    this.message = message;\n    this.isLoggedIn = isLoggedIn;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ty/Desktop/ABET_frontend/api/api.js"],"names":["cookieCutter","root","OK","UNAUTHORIZED","NOT_LOGGED_IN_MSG","SERVER_ERROR_MSG","BAD_REQUEST_MSG","token","API","setToken","t","sendPost","route","body","url","statusCode","get","fetch","method","cache","headers","Authorization","referrerPolicy","JSON","stringify","then","response","status","json","console","log","ErrorObj","hasOwnProperty","catch","login","userid","password","expires","Date","setHours","getHours","toUTCString","set","logout","getCourses","semester","year","getAllCourses","Userid","Semester","Year","getCoursesBySemesterYear","getFormBySection","department","courseNumber","sectionNumber","Section","Instructor","Id","Department","CourseNumber","SectionNumber","getFormsByCourse","Course","Coordinator","getAllForms","postForm","userId","isSectionCompleted","outcomes","ITGrades","CSGrades","CEGrades","form","section","instructor","id","postComment","coordinatorComment","isCourseCompleted","course","getBlankForm","getDefaultYearAndSemester","text","ResultObj","parse","date","day","getDay","month","getMonth","getFullYear","addSection","firstName","lastName","numberOfStudents","getFacultyList","addFacultyMember","facultyType","info","getCoursesByDepartment","addCourse","displayName","removeCourse","getCourseOutcomesByCourse","postCourseOutcomes","courseOutcomesList","constructor","message","isLoggedIn","success"],"mappings":"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","sourcesContent":["// Helper API Class\r\nimport cookieCutter from \"cookie-cutter\";\r\n\r\nconst root = \"https://localhost:44372/api\"; // The base URL for each request\r\nconst OK = 200; //200 Ok status code\r\nconst UNAUTHORIZED = 401; //401 Unauthorized status code\r\nconst NOT_LOGGED_IN_MSG =\r\n  \"Error: Your session has expired. Please log in again.\";\r\nconst SERVER_ERROR_MSG = \"Internal Server Error: Please try again later.\";\r\nconst BAD_REQUEST_MSG = \"Error: Some of the provided parameters are invalid.\";\r\nvar token = \"\"; //holds value of the token cookie\r\n\r\nexport default class API {\r\n  /* This function is for getInitialProps.\r\n    cookieCutter is undefined in getInitialProps,\r\n    so this function sets the token to the value of the cookie\r\n    passed in from getInitialProps. */\r\n  setToken(t = \"\") {\r\n    token = t;\r\n  }\r\n\r\n  // generic function for sending POST requests\r\n  //    Input: route and body\r\n  //    Output: The JSON that is returned from the route\r\n  async sendPost(route = \"\", body = {}) {\r\n    const url = root + route; // Combine the root URL with the specified route\r\n    var statusCode; //holds the status code of the response\r\n\r\n    //if the request is not from getInitialProps, meaning cookieCutter is defined, retreive the cookie\r\n    if (typeof cookieCutter.get == \"function\") {\r\n      token = cookieCutter.get(\"token\");\r\n    }\r\n\r\n    return fetch(url, {\r\n      method: \"POST\",\r\n      cache: \"no-cache\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n      referrerPolicy: \"no-referrer\",\r\n      body: JSON.stringify(body),\r\n    })\r\n      .then((response) => {\r\n        statusCode = response.status;\r\n\r\n        return response.json();\r\n      })\r\n      .then((json) => {\r\n        if (statusCode == OK) return json;\r\n        else if (statusCode != UNAUTHORIZED) {\r\n          console.log(new ErrorObj(NOT_LOGGED_IN_MSG, false));\r\n          return new ErrorObj(NOT_LOGGED_IN_MSG, false); //user's session has expired\r\n        } else {\r\n          if (json.hasOwnProperty(\"message\")) {\r\n            console.log(new ErrorObj(json[\"message\"]));\r\n            return new ErrorObj(json[\"message\"]); //custom error message from API\r\n          } else return new ErrorObj(BAD_REQUEST_MSG); //bad input parameters\r\n        }\r\n      })\r\n      .catch(() => {\r\n        return new ErrorObj(SERVER_ERROR_MSG);\r\n      });\r\n  }\r\n\r\n  //---login(userid, password)---\r\n  //    Input: UserId, Password\r\n  //    Output: \"Admin\", \"Instructor\", \"Student/TA\" or boolean for failure\r\n  async login(userid = \"\", password = \"\") {\r\n    const body = { userid: userid, password: password };\r\n\r\n    return await this.sendPost(\"/login\", body).then((json) => {\r\n      if (json.hasOwnProperty(\"token\")) {\r\n        var expires = new Date();\r\n\r\n        expires.setHours(expires.getHours() + 24); //expires in 24 hours\r\n        expires = expires.toUTCString();\r\n\r\n        cookieCutter.set(\"token\", json[\"token\"], { expires }); //set token cookie\r\n        return json[\"role\"]; //return the role\r\n      }\r\n    });\r\n\r\n    //To use this data you must do the following:\r\n    //api.login(userid, password).then(role => {/*here is where the return value is accessible, it is either role string or a boolean indicating failure*/})\r\n  }\r\n\r\n  //---logout(userid)---\r\n  //    Input: None\r\n  //    Output: None\r\n  logout() {\r\n    cookieCutter.set(\"token\", \"\", { expires: new Date().toUTCString() });\r\n    cookieCutter.set(\"user\", \"\", { expires: new Date().toUTCString() });\r\n  }\r\n\r\n  //---getCourses(userid, semester, year)---\r\n  //    Input: UserId, Semester, Year\r\n  //    Output: Sections for the corresponding UserId, Semester and Year\r\n  async getCourses(userid = \"\", semester = \"\", year = 0) {\r\n    const body = { userid: userid, semester: semester, year: year };\r\n\r\n    return await this.sendPost(\"/sections/by-userid-semester-year\", body);\r\n\r\n    //To use this data you must do the following:\r\n    //api.getCourses(userId, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n  }\r\n\r\n  //---getAllCourses(userid, semester, year)---  (Admin)\r\n  //    Input: UserId, Semester, Year\r\n  //    Output: Sections for the corresponding Semester and Year\r\n  async getAllCourses(userid = \"\", semester = \"\", year = 0) {\r\n    const body = { Userid: userid, Semester: semester, Year: year };\r\n\r\n    return await this.sendPost(\"/sections/by-semester-year\", body);\r\n\r\n    //To use this data you must do the following:\r\n    //api.getAllCourses(userid, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n  }\r\n  //---getCoursesBySemesterYear(semester, year)---  (Admin)\r\n  //    Input: Semester, Year\r\n  //    Output: All Courses for the corresponding semester and year\r\n  async getCoursesBySemesterYear(semester = \"\", year = 0) {\r\n    const body = {\r\n      semester: semester,\r\n      year: year,\r\n    };\r\n\r\n    return await this.sendPost(\"/courses/get-by-year-semester\", body);\r\n  }\r\n  //To use this data you must do the following:\r\n  //api.getCoursesBySemesterYear(semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n\r\n  //---getFormsBySection(userid, year, semester, department, course, section)---\r\n  //    Input: UserId, Year, Semester, Department, CourseNumber, SectionNumber\r\n  //    Output: Forms for the corresponding UserId, Year, Semester, Department, CourseNumber, and SectionNumber\r\n  async getFormBySection(\r\n    userid = \"\",\r\n    year = 0,\r\n    semester = \"\",\r\n    department = \"\",\r\n    courseNumber = \"\",\r\n    sectionNumber = \"\"\r\n  ) {\r\n    const body = {\r\n      Section: {\r\n        Instructor: {\r\n          Id: userid,\r\n        },\r\n        Year: year,\r\n        Semester: semester,\r\n        Department: department,\r\n        CourseNumber: courseNumber,\r\n        SectionNumber: sectionNumber,\r\n      },\r\n    };\r\n\r\n    return await this.sendPost(\"/forms/by-section\", body);\r\n\r\n    //To use this data you must do the following:\r\n    //api.getFormsBySection(userid, year, semester, department, course, section).then(form => {/*here is where the data is accessible, form is an array of JSON objects*/})\r\n  }\r\n\r\n  //---getFormsByCourse(userid, year, semester, department, course)---\r\n  //    Input: UserId, Year, Semester, Department, CourseNumber\r\n  //    Output: Forms for the corresponding UserId, Year, Semester, Department, and CourseNumber\r\n  async getFormsByCourse(\r\n    userid = \"\",\r\n    year = 0,\r\n    semester = \"\",\r\n    department = \"\",\r\n    courseNumber = \"\"\r\n  ) {\r\n    const body = {\r\n      Course: {\r\n        Coordinator: {\r\n          Id: userid,\r\n        },\r\n        Year: year,\r\n        Semester: semester,\r\n        Department: department,\r\n        CourseNumber: courseNumber,\r\n      },\r\n    };\r\n\r\n    return await this.sendPost(\"/forms/by-course\", body);\r\n\r\n    //To use this data you must do the following:\r\n    //api.getFormsByCourse(userid, year, semester, department, course).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n  }\r\n\r\n  //---getAllForms(userid, semester, year)--- (Admin)\r\n  //    Input: UserId, Semester, Year\r\n  //    Output: Forms for the corresponding Semester and Year\r\n  async getAllForms(userid = \"\", semester = \"\", year = 0) {\r\n    const body = { userid: userid, semester: semester, year: year };\r\n\r\n    return await this.sendPost(\"/forms/by-semester-year\", body);\r\n\r\n    //To use this data you must do the following:\r\n    //api.getAllForms(userid, semester, year).then(courses => {/*here is where the data is accessible, forms is an array of JSON objects*/})\r\n  }\r\n\r\n  //---postForm(userId, year, semester, department, courseNumber, sectionNumber, isSectionCompleted, outcomes, ITGrades, CSGrades, CEGrades)---\r\n  //    Input: ^^^   (will also have pdf here later as an additional parameter)\r\n  //    Output: Success or Failure\r\n  async postForm(\r\n    userId = \"\",\r\n    year = 0,\r\n    semester = \"\",\r\n    department = \"\",\r\n    courseNumber = \"\",\r\n    sectionNumber = \"\",\r\n    isSectionCompleted = false,\r\n    outcomes = [],\r\n    ITGrades = {},\r\n    CSGrades = {},\r\n    CEGrades = {}\r\n  ) {\r\n    // the body will also include any pdf to post in the future\r\n\r\n    //outcomes: an array of Course_Outcomes objects\r\n    //Course_Outcomes class:\r\n    //string outcome, int numberOfIT, int numberOfCS, int numberOfCE, StudentWorks[] studentWorks\r\n    //StudentWorks class:\r\n    //string studentWork, string fileUploaded (<-- will implement later)\r\n\r\n    //IT, CS, CE Grades class:\r\n    //int A, int B, int C, int D, int E, int F, int W, int I, int totalStudents\r\n\r\n    const body = {\r\n      form: {\r\n        section: {\r\n          instructor: {\r\n            id: userId,\r\n          },\r\n          year,\r\n          semester,\r\n          department,\r\n          courseNumber,\r\n          sectionNumber,\r\n          isSectionCompleted,\r\n        },\r\n        outcomes,\r\n        ITGrades,\r\n        CSGrades,\r\n        CEGrades,\r\n      },\r\n    };\r\n\r\n    return await this.sendPost(\"/forms/post-form\", body);\r\n  }\r\n\r\n  //---postComment(userId, year, semester, department, courseNumber, coordinatorComment, isCourseCompleted)---\r\n  //    Input: UserId, Year, Semester, department, courseNumber, coordinatorComment, isCourseCompleted\r\n  //    Output: Success or Failure\r\n  async postComment(\r\n    userId = \"\",\r\n    year = 0,\r\n    semester = \"\",\r\n    department = \"\",\r\n    courseNumber = \"\",\r\n    coordinatorComment = \"\",\r\n    isCourseCompleted = false\r\n  ) {\r\n    const body = {\r\n      course: {\r\n        Coordinator: {\r\n          Id: userId,\r\n        },\r\n        year,\r\n        semester,\r\n        department,\r\n        courseNumber,\r\n        coordinatorComment,\r\n        isCourseCompleted,\r\n      },\r\n    };\r\n\r\n    return await this.sendPost(\"/courses/post-comment\", body);\r\n  }\r\n\r\n  //---getBlankForm(userid)---\r\n  //    Input: UserId\r\n  //    Output: Blank Form\r\n  async getBlankForm(userid) {\r\n    const body = { userid: userid };\r\n\r\n    return await this.sendPost(\"/forms/new-blank\", body);\r\n\r\n    //To use this data you must do the following:\r\n    //api.getBlankForm(userid).then(result => {/*here is where the return value is accessible, it is a JSON*/})\r\n  }\r\n\r\n  //--getDefaultYearAndSemester()--\r\n  //    Input: Nothing\r\n  //    Output: Object Including Current Default Year and Semester\r\n  getDefaultYearAndSemester() {\r\n    var text =\r\n      '{ \"year\": 0,' + // create string of object\r\n      ' \"semester\": \"\" }';\r\n    var ResultObj = JSON.parse(text); // create object from the string\r\n\r\n    var date = new Date(); // get the current date\r\n    var day = date.getDay(); // get the current day\r\n    var month = date.getMonth() + 1; // add one to month (by default January = 0)\r\n    ResultObj.year = date.getFullYear(); // get the full year from the date\r\n    ResultObj.semester = \"fall\"; // just to be safe\r\n\r\n    // Set the Default Semester Based on the Month\r\n    if (month > 8 || (month == 8 && day >= 15)) {\r\n      ResultObj.semester = \"fall\";\r\n    } else if (month > 5 || (month == 5 && day >= 15)) {\r\n      ResultObj.semester = \"summer\";\r\n      // since this is just a default semester, it always defaults to the longer semesters\r\n      // this is why it doesn't default to smaller summer semesters\r\n    } else {\r\n      ResultObj.semester = \"spring\";\r\n    }\r\n\r\n    return ResultObj; // return object including the year and semester\r\n  }\r\n\r\n  //---addSection(userid, firstName, lastName, year, semester, courseNumber, sectionNumber, department, numberOfStudents)--- (Admin)\r\n  //    Input: ^^^\r\n  //    Output: Success or Failure\r\n  async addSection(\r\n    userid = \"\",\r\n    firstName = \"\",\r\n    lastName = \"\",\r\n    year = 0,\r\n    semester = \"\",\r\n    courseNumber = \"\",\r\n    sectionNumber = \"\",\r\n    department = \"\",\r\n    numberOfStudents = 0\r\n  ) {\r\n    const body = {\r\n      section: {\r\n        instructor: {\r\n          id: userid,\r\n          firstName,\r\n          lastName,\r\n        },\r\n        year,\r\n        semester,\r\n        courseNumber,\r\n        sectionNumber,\r\n        department,\r\n        isSectionCompleted: false,\r\n        numberOfStudents,\r\n      },\r\n    };\r\n\r\n    return await this.sendPost(\"/sections/add-section\", body);\r\n  }\r\n\r\n  //---getFacultyList()--- (Admin)\r\n  //    Input: none\r\n  //    Output: List of instructors, coordinators, adjunct faculties, and teaching fellows\r\n  async getFacultyList() {\r\n    return await this.sendPost(\"/faculty/get-list\", {});\r\n  }\r\n\r\n  //---addFacultyMember(firstName, lastName, userid, role)--- (Admin)\r\n  //    Input: First Name, Last Name and User Id\r\n  //    Output: Success or Failure\r\n  async addFacultyMember(\r\n    firstName = \"\",\r\n    lastName = \"\",\r\n    userId = \"\",\r\n    facultyType = \"\"\r\n  ) {\r\n    const body = {\r\n      info: {\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n        id: userId,\r\n      },\r\n      facultyType: facultyType,\r\n    };\r\n\r\n    return await this.sendPost(\"/faculty/add-member\", body);\r\n  }\r\n\r\n  //---getCoursesByDepartment(department)--- (Admin)\r\n  //    Input: department\r\n  //    Output: array of courses\r\n  async getCoursesByDepartment(department = \"\") {\r\n    const body = {\r\n      department,\r\n    };\r\n\r\n    return await this.sendPost(\"/courses/get-by-department\", body);\r\n  }\r\n\r\n  //---addCourse(userid, firstName, lastName, year, semester, courseNumber, displayName, department)--- (Admin)\r\n  //    Input: ^^^\r\n  //    Output: success or failure\r\n  async addCourse(\r\n    userid = \"\",\r\n    firstName = \"\",\r\n    lastName = \"\",\r\n    year = 0,\r\n    semester = \"\",\r\n    courseNumber = \"\",\r\n    displayName = \"\",\r\n    department = \"\"\r\n  ) {\r\n    const body = {\r\n      Course: {\r\n        Coordinator: {\r\n          Id: userid,\r\n          firstName,\r\n          lastName,\r\n        },\r\n        year,\r\n        semester,\r\n        courseNumber,\r\n        displayName,\r\n        department,\r\n      },\r\n    };\r\n\r\n    return await this.sendPost(\"/courses/add-course\", body);\r\n  }\r\n\r\n  //---removeCourse(year, semester, courseNumber, department)--- (Admin)\r\n  //    Input: year, semester, courseNumber, department\r\n  //    Output: success or failure\r\n  async removeCourse(\r\n    year = 0,\r\n    semester = \"\",\r\n    courseNumber = \"\",\r\n    department = \"\"\r\n  ) {\r\n    const body = {\r\n      Course: {\r\n        year,\r\n        semester,\r\n        courseNumber,\r\n        department,\r\n      },\r\n    };\r\n\r\n    return await this.sendPost(\"/courses/remove-course\", body);\r\n  }\r\n\r\n  //---getCourseOutcomesByCourse(year, semester, courseNumber, department)--- (Admin)\r\n  //    Input: year, semester, courseNumber, department\r\n  //    Output: array of course outcomes\r\n  async getCourseOutcomesByCourse(\r\n    year = 0,\r\n    semester = \"\",\r\n    courseNumber = \"\",\r\n    department = \"\"\r\n  ) {\r\n    const body = {\r\n      Course: {\r\n        year,\r\n        semester,\r\n        courseNumber,\r\n        department,\r\n      },\r\n    };\r\n\r\n    return await this.sendPost(\"/course-outcomes/by-course\", body);\r\n  }\r\n\r\n  //---postCourseOutcomes(outcomes)--- (Admin)\r\n  //    Input: array of outcome objects (see notes below)\r\n  //    Output: success or failure\r\n  async postCourseOutcomes(outcomes = []) {\r\n    //an outcome object contains the following:\r\n    //order (number), outcome (string), mappedStudentOutcomes(array of numbers)\r\n    //Example:\r\n    //{\r\n    //    order: 1, outcome: \"Accomplish things\", mappedStudentOutcomes: [1, 0, 0, 1, 0, 1]\r\n    //}\r\n\r\n    const body = {\r\n      courseOutcomesList: outcomes,\r\n    };\r\n\r\n    return await this.sendPost(\"/course-outcomes/post-outcomes\", body);\r\n  }\r\n}\r\n\r\nclass ErrorObj {\r\n  constructor(message = \"\", isLoggedIn = true) {\r\n    this.success = false;\r\n    this.message = message;\r\n    this.isLoggedIn = isLoggedIn;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}