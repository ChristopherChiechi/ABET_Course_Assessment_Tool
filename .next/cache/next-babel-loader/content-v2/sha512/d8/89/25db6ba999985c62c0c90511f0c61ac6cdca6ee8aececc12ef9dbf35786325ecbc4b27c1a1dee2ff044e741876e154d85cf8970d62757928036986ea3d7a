{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/OutcomeMapping/OutcomeMapping.js\";\nimport { useState, useEffect } from \"react\";\nimport { VStack, Text, Select } from '@chakra-ui/react';\nimport StudentOutcomeList from \"./StudentOutcomeList\";\nimport programData from \"../../../fake-data/programs.json\";\nimport courseData from \"../../../fake-data/course.json\";\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\nimport { getAllCourses } from '../../../api/APIHelper';\n\nconst OutcomeMapping = () => {\n  const programs = programData.programs;\n  const {\n    0: selectedProgram,\n    1: setSelectedProgram\n  } = useState();\n  const {\n    0: studentOutcomes,\n    1: setStudentOutcomes\n  } = useState();\n  const {\n    0: outcomeMapping,\n    1: setOutcomeMapping\n  } = useState();\n\n  const getCourses = async () => {\n    const courses = await getAllCourses(\"MT2020\", \"fall\", 2020);\n    console.log(course);\n  };\n\n  useEffect(() => {\n    document.getElementById(\"top\").scrollIntoView();\n    setStudentOutcomes(programs); //getCourses();\n  }, []);\n  useEffect(() => {\n    if (selectedProgram != null) {\n      const numOfStudentOutcomes = selectedProgram.outcomes.length;\n      console.log(numOfStudentOutcomes);\n      const courseOutcomesArray = courseData.courses.map(course => {\n        return {\n          name: course.name,\n          code: course.code,\n          outcomes: course['course-outcomes'].map(outcome => {\n            return {\n              outcome: outcome,\n              studentMap: new Array(numOfStudentOutcomes).fill(0)\n            };\n          })\n        };\n      });\n      console.log(courseOutcomesArray);\n      setOutcomeMapping(courseOutcomesArray);\n    }\n  }, [selectedProgram]);\n\n  const handleSetOption = e => {\n    const selection = programs.filter(program => program.name == e.target.value)[0];\n    setSelectedProgram(selection);\n  };\n\n  const renderOptions = studentOutcomes && studentOutcomes.map((program, idx) => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: program.name,\n      children: program.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  });\n  const renderMappingTable = outcomeMapping ? outcomeMapping.map((course, idx) => {\n    return /*#__PURE__*/_jsxDEV(CourseOutcomeTable, {\n      course: course\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  }) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 8\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      id: \"top\",\n      w: \"80%\",\n      m: \"0 auto\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"2xl\",\n        fontWeight: \"bold\",\n        mt: \"1em\",\n        children: \"Student Outcome Mapping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        mt: \"1em\",\n        w: \"80%\",\n        id: \"course\",\n        placeholder: \"Select program\",\n        variant: \"filled\",\n        onChange: handleSetOption,\n        value: selectedProgram,\n        children: renderOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: selectedProgram && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(StudentOutcomeList, {\n            selectedProgram: selectedProgram\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this), renderMappingTable]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nexport default OutcomeMapping;","map":{"version":3,"sources":["/Users/armaandhanoa/Documents/Documents - Armaanâ€™s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/OutcomeMapping/OutcomeMapping.js"],"names":["useState","useEffect","VStack","Text","Select","StudentOutcomeList","programData","courseData","CourseOutcomeTable","getAllCourses","OutcomeMapping","programs","selectedProgram","setSelectedProgram","studentOutcomes","setStudentOutcomes","outcomeMapping","setOutcomeMapping","getCourses","courses","console","log","course","document","getElementById","scrollIntoView","numOfStudentOutcomes","outcomes","length","courseOutcomesArray","map","name","code","outcome","studentMap","Array","fill","handleSetOption","e","selection","filter","program","target","value","renderOptions","idx","renderMappingTable"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { VStack, Text, Select } from '@chakra-ui/react';\nimport StudentOutcomeList from \"./StudentOutcomeList\";\nimport programData from \"../../../fake-data/programs.json\";\nimport courseData from \"../../../fake-data/course.json\";\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\nimport { getAllCourses } from '../../../api/APIHelper';\n\nconst OutcomeMapping = () => {\n  const programs = programData.programs;\n\n  const [selectedProgram, setSelectedProgram] = useState();\n  const [studentOutcomes, setStudentOutcomes] = useState();\n  const [outcomeMapping, setOutcomeMapping] = useState();\n\n  const getCourses = async () => {\n    const courses = await getAllCourses(\"MT2020\", \"fall\", 2020)\n    console.log(course);\n  }\n\n  useEffect(() => {\n    document.getElementById(\"top\").scrollIntoView();\n    setStudentOutcomes(programs);\n    //getCourses();\n  },[]);\n\n  useEffect(() => {\n    if (selectedProgram != null ){\n      const numOfStudentOutcomes = selectedProgram.outcomes.length;\n      console.log(numOfStudentOutcomes);\n      \n      const courseOutcomesArray = courseData.courses.map((course) => {\n        return {\n          name :course.name, \n          code: course.code,\n          outcomes: \n            course['course-outcomes'].map((outcome) => {\n              return {\n                outcome: outcome,\n                studentMap: new Array(numOfStudentOutcomes).fill(0)\n              }\n            })\n        }\n      });\n      console.log(courseOutcomesArray);\n      setOutcomeMapping(courseOutcomesArray);\n    }\n  }, [selectedProgram])\n\n  const handleSetOption = (e) => {\n    const selection = programs.filter((program) => program.name == e.target.value)[0];\n    setSelectedProgram(selection);\n  };\n\n  const renderOptions = studentOutcomes && studentOutcomes.map((program, idx) => {\n    return <option value={program.name} key={idx}>{program.name}</option>;\n  });\n  const renderMappingTable = outcomeMapping ? outcomeMapping.map((course, idx) => {\n    return <CourseOutcomeTable course={course} key={idx}/>\n  }) : <div></div>\n\n  return (\n    <>\n      <VStack id=\"top\" w=\"80%\" m=\"0 auto\">\n          <Text fontSize=\"2xl\" fontWeight=\"bold\" mt=\"1em\">\n            Student Outcome Mapping\n          </Text>\n          <Select\n            mt=\"1em\"\n            w=\"80%\"\n            id=\"course\"\n            placeholder=\"Select program\"\n            variant=\"filled\"\n            onChange={handleSetOption}\n            value={selectedProgram}\n          >\n            {/* this should be filled with a list of courses from db */}\n            {renderOptions}\n          </Select>\n        <div>\n          {selectedProgram \n            &&\n              <div>\n                <StudentOutcomeList selectedProgram={selectedProgram} />\n                {renderMappingTable}\n              </div>\n          }\n        </div>\n      </VStack>\n    </>\n  );\n};\n\nexport default OutcomeMapping;\n"]},"metadata":{},"sourceType":"module"}