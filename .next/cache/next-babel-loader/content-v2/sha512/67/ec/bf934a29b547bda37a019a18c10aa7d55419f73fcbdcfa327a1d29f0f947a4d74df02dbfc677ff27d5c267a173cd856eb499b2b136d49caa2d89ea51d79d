{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/OutcomeMapping/OutcomeMapping.js\";\nimport { useState, useEffect } from \"react\";\nimport { VStack, Text, Select } from '@chakra-ui/react';\nimport StudentOutcomeList from \"./StudentOutcomeList\";\nimport programData from \"../../../fake-data/programs.json\";\nimport courseData from \"../../../fake-data/course.json\";\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\n\nconst OutcomeMapping = () => {\n  const programs = programData.programs;\n  const {\n    0: selectedProgram,\n    1: setSelectedProgram\n  } = useState();\n  const {\n    0: studentOutcomes,\n    1: setStudentOutcomes\n  } = useState();\n  const {\n    0: outcomeMapping,\n    1: setOutcomeMapping\n  } = useState();\n  useEffect(() => {\n    document.getElementById(\"top\").scrollIntoView();\n    setStudentOutcomes(programs);\n  }, []);\n  useEffect(() => {\n    if (selectedProgram != null) {\n      console.log(selectedProgram); //const numOfStudentOutcomes = selectedProgram.outcomes.length;\n      // const courseOutcomesArray = courseData.courses.map((course) => {\n      //   return {\n      //     name :course.name, \n      //     code: course.code,\n      //     outcomes: \n      //       course['course-outcomes'].map((outcome) => {\n      //         return {\n      //           outcome: outcome,\n      //           studentMap: new Array(numOfStudentOutcomes).fill(0)\n      //         }\n      //       })\n      //   }\n      // });\n      // setOutcomeMapping(courseOutcomesArray);\n    }\n  }, [selectedProgram]);\n\n  const handleSetOption = e => {\n    setSelectedProgram(e.target.value);\n    console.log(selectedProgram);\n  };\n\n  const renderOptions = studentOutcomes && studentOutcomes.map(program => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: program,\n      children: program.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  });\n  const renderMappingTable = outcomeMapping ? outcomeMapping.map(course => {\n    return /*#__PURE__*/_jsxDEV(CourseOutcomeTable, {\n      course: course\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 8\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      id: \"top\",\n      w: \"80%\",\n      m: \"0 auto\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"2xl\",\n        fontWeight: \"bold\",\n        mt: \"1em\",\n        children: \"Student Outcome Mapping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        mt: \"1em\",\n        w: \"80%\",\n        id: \"course\",\n        placeholder: \"Select program\",\n        variant: \"filled\",\n        onChange: handleSetOption,\n        value: selectedProgram,\n        children: renderOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: selectedProgram && /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nexport default OutcomeMapping;","map":{"version":3,"sources":["/Users/armaandhanoa/Documents/Documents - Armaanâ€™s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/OutcomeMapping/OutcomeMapping.js"],"names":["useState","useEffect","VStack","Text","Select","StudentOutcomeList","programData","courseData","CourseOutcomeTable","OutcomeMapping","programs","selectedProgram","setSelectedProgram","studentOutcomes","setStudentOutcomes","outcomeMapping","setOutcomeMapping","document","getElementById","scrollIntoView","console","log","handleSetOption","e","target","value","renderOptions","map","program","name","renderMappingTable","course"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,MAAvB,QAAqC,kBAArC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,QAAQ,GAAGJ,WAAW,CAACI,QAA7B;AAEA,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,EAAtD;AACA,QAAM;AAAA,OAACa,eAAD;AAAA,OAAkBC;AAAlB,MAAwCd,QAAQ,EAAtD;AACA,QAAM;AAAA,OAACe,cAAD;AAAA,OAAiBC;AAAjB,MAAsChB,QAAQ,EAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EAA+BC,cAA/B;AACAL,IAAAA,kBAAkB,CAACJ,QAAD,CAAlB;AACD,GAHQ,EAGP,EAHO,CAAT;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,eAAe,IAAI,IAAvB,EAA6B;AAC3BS,MAAAA,OAAO,CAACC,GAAR,CAAYV,eAAZ,EAD2B,CAE3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF,GApBQ,EAoBN,CAACA,eAAD,CApBM,CAAT;;AAsBA,QAAMW,eAAe,GAAIC,CAAD,IAAO;AAC7BX,IAAAA,kBAAkB,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYV,eAAZ;AACD,GAHD;;AAKA,QAAMe,aAAa,GAAGb,eAAe,IAAIA,eAAe,CAACc,GAAhB,CAAqBC,OAAD,IAAa;AACxE,wBAAO;AAAQ,MAAA,KAAK,EAAEA,OAAf;AAAA,gBAAyBA,OAAO,CAACC;AAAjC;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFwC,CAAzC;AAGA,QAAMC,kBAAkB,GAAGf,cAAc,GAAGA,cAAc,CAACY,GAAf,CAAoBI,MAAD,IAAY;AACzE,wBAAO,QAAC,kBAAD;AAAoB,MAAA,MAAM,EAAEA;AAA5B;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAF2C,CAAH,gBAEpC;AAAA;AAAA;AAAA;AAAA,UAFL;AAIA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,KAAX;AAAiB,MAAA,CAAC,EAAC,KAAnB;AAAyB,MAAA,CAAC,EAAC,QAA3B;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAC,KAAf;AAAqB,QAAA,UAAU,EAAC,MAAhC;AAAuC,QAAA,EAAE,EAAC,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,MAAD;AACE,QAAA,EAAE,EAAC,KADL;AAEE,QAAA,CAAC,EAAC,KAFJ;AAGE,QAAA,EAAE,EAAC,QAHL;AAIE,QAAA,WAAW,EAAC,gBAJd;AAKE,QAAA,OAAO,EAAC,QALV;AAME,QAAA,QAAQ,EAAET,eANZ;AAOE,QAAA,KAAK,EAAEX,eAPT;AAAA,kBAUGe;AAVH;AAAA;AAAA;AAAA;AAAA,cAJJ,eAgBE;AAAA,kBACGf,eAAe,iBAEZ;AAAA;AAAA;AAAA;AAAA;AAHN;AAAA;AAAA;AAAA;AAAA,cAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA8BD,CA5ED;;AA8EA,eAAeF,cAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { VStack, Text, Select } from '@chakra-ui/react';\nimport StudentOutcomeList from \"./StudentOutcomeList\";\nimport programData from \"../../../fake-data/programs.json\";\nimport courseData from \"../../../fake-data/course.json\";\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\n\nconst OutcomeMapping = () => {\n  const programs = programData.programs;\n\n  const [selectedProgram, setSelectedProgram] = useState();\n  const [studentOutcomes, setStudentOutcomes] = useState();\n  const [outcomeMapping, setOutcomeMapping] = useState();\n\n  useEffect(() => {\n    document.getElementById(\"top\").scrollIntoView();\n    setStudentOutcomes(programs);\n  },[]);\n\n  useEffect(() => {\n    if (selectedProgram != null ){\n      console.log(selectedProgram);\n      //const numOfStudentOutcomes = selectedProgram.outcomes.length;\n      \n      // const courseOutcomesArray = courseData.courses.map((course) => {\n      //   return {\n      //     name :course.name, \n      //     code: course.code,\n      //     outcomes: \n      //       course['course-outcomes'].map((outcome) => {\n      //         return {\n      //           outcome: outcome,\n      //           studentMap: new Array(numOfStudentOutcomes).fill(0)\n      //         }\n      //       })\n      //   }\n      // });\n      // setOutcomeMapping(courseOutcomesArray);\n    }\n  }, [selectedProgram])\n\n  const handleSetOption = (e) => {\n    setSelectedProgram(e.target.value);\n    console.log(selectedProgram);\n  };\n\n  const renderOptions = studentOutcomes && studentOutcomes.map((program) => {\n    return <option value={program}>{program.name}</option>;\n  });\n  const renderMappingTable = outcomeMapping ? outcomeMapping.map((course) => {\n    return <CourseOutcomeTable course={course}/>\n  }) : <div></div>\n\n  return (\n    <>\n      <VStack id=\"top\" w=\"80%\" m=\"0 auto\">\n          <Text fontSize=\"2xl\" fontWeight=\"bold\" mt=\"1em\">\n            Student Outcome Mapping\n          </Text>\n          <Select\n            mt=\"1em\"\n            w=\"80%\"\n            id=\"course\"\n            placeholder=\"Select program\"\n            variant=\"filled\"\n            onChange={handleSetOption}\n            value={selectedProgram}\n          >\n            {/* this should be filled with a list of courses from db */}\n            {renderOptions}\n          </Select>\n        <div>\n          {selectedProgram \n            &&\n              <div>\n                {/* <StudentOutcomeList selectedProgram={selectedProgram} />\n                {renderMappingTable} */}\n              </div>\n          }\n        </div>\n      </VStack>\n    </>\n  );\n};\n\nexport default OutcomeMapping;\n"]},"metadata":{},"sourceType":"module"}