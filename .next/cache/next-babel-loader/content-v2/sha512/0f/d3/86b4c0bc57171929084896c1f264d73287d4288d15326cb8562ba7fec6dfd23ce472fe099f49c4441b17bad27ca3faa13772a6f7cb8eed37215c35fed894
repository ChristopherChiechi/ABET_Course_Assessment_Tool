{"ast":null,"code":"import _regeneratorRuntime from \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Helper API Class\nimport cookieCutter from 'cookie-cutter';\nvar root = \"https://localhost:44372/api\"; // The base URL for each request\n\nvar OK = 200; //200 Ok status code\n\nvar UNAUTHORIZED = 401; //401 Unauthorized status code\n\nvar NOT_LOGGED_IN_MSG = \"Error: Your session has expired. Please log in again.\";\nvar SERVER_ERROR_MSG = \"Internal Server Error: Please try again later.\";\nvar BAD_REQUEST_MSG = \"Error: Some of the provided parameters are invalid.\";\nvar token = \"\"; //holds value of the token cookie\n\nvar API = /*#__PURE__*/function () {\n  function API() {\n    _classCallCheck(this, API);\n  }\n\n  _createClass(API, [{\n    key: \"setToken\",\n\n    /* This function is for getInitialProps.\r\n    cookieCutter is undefined in getInitialProps,\r\n    so this function sets the token to the value of the cookie\r\n    passed in from getInitialProps. */\n    value: function setToken() {\n      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      token = t;\n    } // generic function for sending POST requests\n    //    Input: route and body\n    //    Output: The JSON that is returned from the route\n\n  }, {\n    key: \"sendPost\",\n    value: function () {\n      var _sendPost = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var route,\n            body,\n            isFileDownload,\n            fileName,\n            url,\n            statusCode,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                route = _args.length > 0 && _args[0] !== undefined ? _args[0] : \"\";\n                body = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                isFileDownload = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;\n                fileName = _args.length > 3 && _args[3] !== undefined ? _args[3] : \"\";\n                url = root + route; // Combine the root URL with the specified route\n\n                //holds the status code of the response\n                //if the request is not from getInitialProps, meaning cookieCutter is defined, retreive the cookie\n                if (typeof cookieCutter.get == \"function\") {\n                  token = cookieCutter.get(\"token\");\n                }\n\n                _context.next = 8;\n                return fetch(url, {\n                  method: \"POST\",\n                  cache: \"no-cache\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": \"Bearer \" + token\n                  },\n                  referrerPolicy: \"no-referrer\",\n                  body: JSON.stringify(body)\n                }).then(function (response) {\n                  statusCode = response.status;\n                  if (statusCode == UNAUTHORIZED) //this check has to be here for some reason ¯\\_(ツ)_/¯\n                    return;else if (isFileDownload) return response.blob();else return response.json();\n                }).then(function (json) {\n                  if (statusCode == OK) {\n                    if (isFileDownload) {\n                      //download the responded file\n                      var a = document.createElement(\"a\");\n                      a.href = URL.createObjectURL(json);\n                      a.setAttribute(\"download\", fileName);\n                      a.click();\n                      return;\n                    } else return json;\n                  } else if (statusCode == UNAUTHORIZED) return new ErrorObj(NOT_LOGGED_IN_MSG, false); //user's session has expired\n                  else {\n                      if (json.hasOwnProperty(\"message\")) return new ErrorObj(json[\"message\"]); //custom error message from API\n                      else return new ErrorObj(BAD_REQUEST_MSG); //default bad input parameters message\n                    }\n                })[\"catch\"](function () {\n                  return new ErrorObj(SERVER_ERROR_MSG);\n                });\n\n              case 8:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function sendPost() {\n        return _sendPost.apply(this, arguments);\n      }\n\n      return sendPost;\n    }()\n  }, {\n    key: \"sendFile\",\n    value: function () {\n      var _sendFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var route,\n            formData,\n            url,\n            statusCode,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                route = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : \"\";\n                formData = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : new FormData();\n                url = root + route; // Combine the root URL with the specified route\n\n                _context2.next = 5;\n                return fetch(url, {\n                  method: 'POST',\n                  body: formData,\n                  headers: {\n                    \"Authorization\": \"Bearer \" + token\n                  }\n                }).then(function (response) {\n                  statusCode = response.status;\n                  if (statusCode == UNAUTHORIZED) //this check has to be here for some reason ¯\\_(ツ)_/¯\n                    return;else return response.json();\n                }).then(function (json) {\n                  if (statusCode == OK) return json;else if (statusCode == UNAUTHORIZED) return new ErrorObj(NOT_LOGGED_IN_MSG, false); //user's session has expired\n                  else {\n                      if (json.hasOwnProperty(\"message\")) return new ErrorObj(json[\"message\"]); //custom error message from API\n                      else return new ErrorObj(BAD_REQUEST_MSG); //default bad input parameters message\n                    }\n                })[\"catch\"](function () {\n                  return new ErrorObj(SERVER_ERROR_MSG);\n                });\n\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function sendFile() {\n        return _sendFile.apply(this, arguments);\n      }\n\n      return sendFile;\n    }() //---login(userid, password)---\n    //    Input: UserId, Password\n    //    Output: \"Admin\", \"Instructor\", \"Student/TA\" or boolean for failure\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var userid,\n            password,\n            body,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                userid = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : \"\";\n                password = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : \"\";\n                body = {\n                  userid: userid,\n                  password: password\n                };\n                _context3.next = 5;\n                return this.sendPost(\"/login\", body).then(function (json) {\n                  if (json.hasOwnProperty(\"token\")) {\n                    var expires = new Date();\n                    expires.setHours(expires.getHours() + 24); //expires in 24 hours\n\n                    expires = expires.toUTCString();\n                    cookieCutter.set(\"token\", json[\"token\"], {\n                      expires: expires\n                    }); //set token cookie\n\n                    return json[\"role\"]; //return the role\n                  }\n                });\n\n              case 5:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function login() {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }() //---logout(userid)---\n    //    Input: None\n    //    Output: None\n\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      cookieCutter.set(\"token\", \"\", {\n        expires: new Date().toUTCString()\n      });\n      cookieCutter.set(\"user\", \"\", {\n        expires: new Date().toUTCString()\n      });\n    } //---getCourses(userid, semester, year)---\n    //    Input: UserId, Semester, Year\n    //    Output: Sections for the corresponding UserId, Semester and Year\n\n  }, {\n    key: \"getCourses\",\n    value: function () {\n      var _getCourses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var userid,\n            semester,\n            year,\n            body,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                userid = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : \"\";\n                semester = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : \"\";\n                year = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : 0;\n                body = {\n                  userid: userid,\n                  semester: semester,\n                  year: year\n                };\n                _context4.next = 6;\n                return this.sendPost(\"/sections/by-userid-semester-year\", body);\n\n              case 6:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getCourses() {\n        return _getCourses.apply(this, arguments);\n      }\n\n      return getCourses;\n    }() //---getAllCourses(userid, semester, year)---  (Admin)\n    //    Input: UserId, Semester, Year\n    //    Output: Sections for the corresponding Semester and Year \n\n  }, {\n    key: \"getAllCourses\",\n    value: function () {\n      var _getAllCourses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var userid,\n            semester,\n            year,\n            body,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                userid = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : \"\";\n                semester = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : \"\";\n                year = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : 0;\n                body = {\n                  Userid: userid,\n                  Semester: semester,\n                  Year: year\n                };\n                _context5.next = 6;\n                return this.sendPost(\"/sections/by-semester-year\", body);\n\n              case 6:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getAllCourses() {\n        return _getAllCourses.apply(this, arguments);\n      }\n\n      return getAllCourses;\n    }() //---getCoursesBySemesterYear(semester, year)---  (Admin)\n    //    Input: Semester, Year\n    //    Output: All Courses for the corresponding semester and year \n\n  }, {\n    key: \"getCoursesBySemesterYear\",\n    value: function () {\n      var _getCoursesBySemesterYear = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var semester,\n            year,\n            body,\n            _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                semester = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : \"\";\n                year = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : 0;\n                body = {\n                  semester: semester,\n                  year: year\n                };\n                _context6.next = 5;\n                return this.sendPost(\"/courses/get-by-year-semester\", body);\n\n              case 5:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getCoursesBySemesterYear() {\n        return _getCoursesBySemesterYear.apply(this, arguments);\n      }\n\n      return getCoursesBySemesterYear;\n    }() //To use this data you must do the following:\n    //api.getCoursesBySemesterYear(semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n    //---getFormsBySection(userid, year, semester, department, course, section)---\n    //    Input: UserId, Year, Semester, Department, CourseNumber, SectionNumber\n    //    Output: Forms for the corresponding UserId, Year, Semester, Department, CourseNumber, and SectionNumber\n\n  }, {\n    key: \"getFormBySection\",\n    value: function () {\n      var _getFormBySection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var userid,\n            year,\n            semester,\n            department,\n            courseNumber,\n            sectionNumber,\n            body,\n            _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                userid = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : \"\";\n                year = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : 0;\n                semester = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : \"\";\n                department = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : \"\";\n                courseNumber = _args7.length > 4 && _args7[4] !== undefined ? _args7[4] : \"\";\n                sectionNumber = _args7.length > 5 && _args7[5] !== undefined ? _args7[5] : \"\";\n                body = {\n                  Section: {\n                    Instructor: {\n                      Id: userid\n                    },\n                    Year: year,\n                    Semester: semester,\n                    Department: department,\n                    CourseNumber: courseNumber,\n                    SectionNumber: sectionNumber\n                  }\n                };\n                _context7.next = 9;\n                return this.sendPost(\"/forms/by-section\", body);\n\n              case 9:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 10:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getFormBySection() {\n        return _getFormBySection.apply(this, arguments);\n      }\n\n      return getFormBySection;\n    }() //---getFormsByCourse(userid, year, semester, department, course)---\n    //    Input: UserId, Year, Semester, Department, CourseNumber\n    //    Output: Forms for the corresponding UserId, Year, Semester, Department, and CourseNumber\n\n  }, {\n    key: \"getFormsByCourse\",\n    value: function () {\n      var _getFormsByCourse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var userid,\n            year,\n            semester,\n            department,\n            courseNumber,\n            body,\n            _args8 = arguments;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                userid = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : \"\";\n                year = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : 0;\n                semester = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : \"\";\n                department = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : \"\";\n                courseNumber = _args8.length > 4 && _args8[4] !== undefined ? _args8[4] : \"\";\n                body = {\n                  Course: {\n                    Coordinator: {\n                      Id: userid\n                    },\n                    Year: year,\n                    Semester: semester,\n                    Department: department,\n                    CourseNumber: courseNumber\n                  }\n                };\n                _context8.next = 8;\n                return this.sendPost(\"/forms/by-course\", body);\n\n              case 8:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getFormsByCourse() {\n        return _getFormsByCourse.apply(this, arguments);\n      }\n\n      return getFormsByCourse;\n    }() //---getAllForms(userid, semester, year)--- (Admin)\n    //    Input: UserId, Semester, Year\n    //    Output: Forms for the corresponding Semester and Year\n\n  }, {\n    key: \"getAllForms\",\n    value: function () {\n      var _getAllForms = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var userid,\n            semester,\n            year,\n            body,\n            _args9 = arguments;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                userid = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : \"\";\n                semester = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : \"\";\n                year = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : 0;\n                body = {\n                  userid: userid,\n                  semester: semester,\n                  year: year\n                };\n                _context9.next = 6;\n                return this.sendPost(\"/forms/by-semester-year\", body);\n\n              case 6:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getAllForms() {\n        return _getAllForms.apply(this, arguments);\n      }\n\n      return getAllForms;\n    }() //---postForm(userId, year, semester, department, courseNumber, sectionNumber, isSectionCompleted, outcomes, ITGrades, CSGrades, CEGrades)---\n    //    Input: ^^^   (will also have pdf here later as an additional parameter)\n    //    Output: Success or Failure\n\n  }, {\n    key: \"postForm\",\n    value: function () {\n      var _postForm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var userId,\n            year,\n            semester,\n            department,\n            courseNumber,\n            sectionNumber,\n            isSectionCompleted,\n            outcomes,\n            ITGrades,\n            CSGrades,\n            CEGrades,\n            body,\n            _args10 = arguments;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                userId = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : \"\";\n                year = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : 0;\n                semester = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : \"\";\n                department = _args10.length > 3 && _args10[3] !== undefined ? _args10[3] : \"\";\n                courseNumber = _args10.length > 4 && _args10[4] !== undefined ? _args10[4] : \"\";\n                sectionNumber = _args10.length > 5 && _args10[5] !== undefined ? _args10[5] : \"\";\n                isSectionCompleted = _args10.length > 6 && _args10[6] !== undefined ? _args10[6] : false;\n                outcomes = _args10.length > 7 && _args10[7] !== undefined ? _args10[7] : [];\n                ITGrades = _args10.length > 8 && _args10[8] !== undefined ? _args10[8] : {};\n                CSGrades = _args10.length > 9 && _args10[9] !== undefined ? _args10[9] : {};\n                CEGrades = _args10.length > 10 && _args10[10] !== undefined ? _args10[10] : {};\n                // the body will also include any pdf to post in the future\n                //outcomes: an array of Course_Outcomes objects\n                //Course_Outcomes class:\n                //string outcome, int numberOfIT, int numberOfCS, int numberOfCE, StudentWorks[] studentWorks\n                //StudentWorks class:\n                //string studentWork, string fileUploaded (<-- will implement later)\n                //IT, CS, CE Grades class:\n                //int A, int B, int C, int D, int E, int F, int W, int I, int totalStudents\n                body = {\n                  form: {\n                    section: {\n                      instructor: {\n                        id: userId\n                      },\n                      year: year,\n                      semester: semester,\n                      department: department,\n                      courseNumber: courseNumber,\n                      sectionNumber: sectionNumber,\n                      isSectionCompleted: isSectionCompleted\n                    },\n                    outcomes: outcomes,\n                    ITGrades: ITGrades,\n                    CSGrades: CSGrades,\n                    CEGrades: CEGrades\n                  }\n                };\n                _context10.next = 14;\n                return this.sendPost(\"/forms/post-form\", body);\n\n              case 14:\n                return _context10.abrupt(\"return\", _context10.sent);\n\n              case 15:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function postForm() {\n        return _postForm.apply(this, arguments);\n      }\n\n      return postForm;\n    }() //---postComment(userId, year, semester, department, courseNumber, coordinatorComment, isCourseCompleted)---\n    //    Input: UserId, Year, Semester, department, courseNumber, coordinatorComment, isCourseCompleted\n    //    Output: Success or Failure\n\n  }, {\n    key: \"postComment\",\n    value: function () {\n      var _postComment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var userId,\n            year,\n            semester,\n            department,\n            courseNumber,\n            coordinatorComment,\n            isCourseCompleted,\n            body,\n            _args11 = arguments;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                userId = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : \"\";\n                year = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : 0;\n                semester = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : \"\";\n                department = _args11.length > 3 && _args11[3] !== undefined ? _args11[3] : \"\";\n                courseNumber = _args11.length > 4 && _args11[4] !== undefined ? _args11[4] : \"\";\n                coordinatorComment = _args11.length > 5 && _args11[5] !== undefined ? _args11[5] : \"\";\n                isCourseCompleted = _args11.length > 6 && _args11[6] !== undefined ? _args11[6] : false;\n                body = {\n                  course: {\n                    Coordinator: {\n                      Id: userId\n                    },\n                    year: year,\n                    semester: semester,\n                    department: department,\n                    courseNumber: courseNumber,\n                    coordinatorComment: coordinatorComment,\n                    isCourseCompleted: isCourseCompleted\n                  }\n                };\n                _context11.next = 10;\n                return this.sendPost(\"/courses/post-comment\", body);\n\n              case 10:\n                return _context11.abrupt(\"return\", _context11.sent);\n\n              case 11:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function postComment() {\n        return _postComment.apply(this, arguments);\n      }\n\n      return postComment;\n    }() //---getBlankForm(userid)---\n    //    Input: Section object containing: CourseNumber, SectionNumber, and Id\n    //    Output: Blank Form\n    //async getBlankForm(userid) {\n\n  }, {\n    key: \"getBlankForm\",\n    value: function () {\n      var _getBlankForm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var courseNumber,\n            sectionNumber,\n            sectionId,\n            body,\n            _args12 = arguments;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                courseNumber = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : \"\";\n                sectionNumber = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : \"\";\n                sectionId = _args12.length > 2 && _args12[2] !== undefined ? _args12[2] : 0;\n                body = {\n                  Section: {\n                    CourseNumber: courseNumber,\n                    SectionNumber: sectionNumber,\n                    Id: sectionId\n                  }\n                };\n                _context12.next = 6;\n                return this.sendPost(\"/forms/new-blank\", body);\n\n              case 6:\n                return _context12.abrupt(\"return\", _context12.sent);\n\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getBlankForm() {\n        return _getBlankForm.apply(this, arguments);\n      }\n\n      return getBlankForm;\n    }() //--getDefaultYearAndSemester()--\n    //    Input: Nothing\n    //    Output: Object Including Current Default Year and Semester\n\n  }, {\n    key: \"getDefaultYearAndSemester\",\n    value: function getDefaultYearAndSemester() {\n      var text = '{ \"year\": 0,' + // create string of object\n      ' \"semester\": \"\" }';\n      var ResultObj = JSON.parse(text); // create object from the string\n\n      var date = new Date(); // get the current date\n\n      var day = date.getDay(); // get the current day\n\n      var month = date.getMonth() + 1; // add one to month (by default January = 0)\n\n      ResultObj.year = date.getFullYear(); // get the full year from the date\n\n      ResultObj.semester = \"fall\"; // just to be safe\n      // Set the Default Semester Based on the Month\n\n      if (month > 8 || month == 8 && day >= 15) {\n        ResultObj.semester = \"fall\";\n      } else if (month > 5 || month == 5 && day >= 15) {\n        ResultObj.semester = \"summer\"; // since this is just a default semester, it always defaults to the longer semesters\n        // this is why it doesn't default to smaller summer semesters\n      } else {\n        ResultObj.semester = \"spring\";\n      }\n\n      return ResultObj; // return object including the year and semester\n    } //---addSection(userid, firstName, lastName, year, semester, courseNumber, sectionNumber, department, numberOfStudents)--- (Admin)\n    //    Input: ^^^\n    //    Output: Success or Failure\n\n  }, {\n    key: \"addSection\",\n    value: function () {\n      var _addSection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var userid,\n            firstName,\n            lastName,\n            year,\n            semester,\n            courseNumber,\n            sectionNumber,\n            department,\n            numberOfStudents,\n            body,\n            _args13 = arguments;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                userid = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : \"\";\n                firstName = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : \"\";\n                lastName = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : \"\";\n                year = _args13.length > 3 && _args13[3] !== undefined ? _args13[3] : 0;\n                semester = _args13.length > 4 && _args13[4] !== undefined ? _args13[4] : \"\";\n                courseNumber = _args13.length > 5 && _args13[5] !== undefined ? _args13[5] : \"\";\n                sectionNumber = _args13.length > 6 && _args13[6] !== undefined ? _args13[6] : \"\";\n                department = _args13.length > 7 && _args13[7] !== undefined ? _args13[7] : \"\";\n                numberOfStudents = _args13.length > 8 && _args13[8] !== undefined ? _args13[8] : 0;\n                body = {\n                  section: {\n                    instructor: {\n                      id: userid,\n                      firstName: firstName,\n                      lastName: lastName\n                    },\n                    year: year,\n                    semester: semester,\n                    courseNumber: courseNumber,\n                    sectionNumber: sectionNumber,\n                    department: department,\n                    isSectionCompleted: false,\n                    numberOfStudents: numberOfStudents\n                  }\n                };\n                _context13.next = 12;\n                return this.sendPost(\"/sections/add-section\", body);\n\n              case 12:\n                return _context13.abrupt(\"return\", _context13.sent);\n\n              case 13:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function addSection() {\n        return _addSection.apply(this, arguments);\n      }\n\n      return addSection;\n    }() //---getFacultyList()--- (Admin)\n    //    Input: none\n    //    Output: List of instructors, coordinators, adjunct faculties, and teaching fellows\n\n  }, {\n    key: \"getFacultyList\",\n    value: function () {\n      var _getFacultyList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.sendPost(\"/faculty/get-list\", {});\n\n              case 2:\n                return _context14.abrupt(\"return\", _context14.sent);\n\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getFacultyList() {\n        return _getFacultyList.apply(this, arguments);\n      }\n\n      return getFacultyList;\n    }() //---addFacultyMember(firstName, lastName, userid, role)--- (Admin)\n    //    Input: First Name, Last Name and User Id\n    //    Output: Success or Failure\n\n  }, {\n    key: \"addFacultyMember\",\n    value: function () {\n      var _addFacultyMember = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var firstName,\n            lastName,\n            userId,\n            facultyType,\n            body,\n            _args15 = arguments;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                firstName = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : \"\";\n                lastName = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : \"\";\n                userId = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : \"\";\n                facultyType = _args15.length > 3 && _args15[3] !== undefined ? _args15[3] : \"\";\n                body = {\n                  info: {\n                    firstName: firstName,\n                    lastName: lastName,\n                    id: userId\n                  },\n                  facultyType: facultyType\n                };\n                _context15.next = 7;\n                return this.sendPost(\"/faculty/add-member\", body);\n\n              case 7:\n                return _context15.abrupt(\"return\", _context15.sent);\n\n              case 8:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function addFacultyMember() {\n        return _addFacultyMember.apply(this, arguments);\n      }\n\n      return addFacultyMember;\n    }() //---getCoursesByDepartment(department)--- (Admin)\n    //    Input: department\n    //    Output: array of courses\n\n  }, {\n    key: \"getCoursesByDepartment\",\n    value: function () {\n      var _getCoursesByDepartment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        var department,\n            body,\n            _args16 = arguments;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                department = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : \"\";\n                body = {\n                  department: department\n                };\n                _context16.next = 4;\n                return this.sendPost(\"/courses/get-by-department\", body);\n\n              case 4:\n                return _context16.abrupt(\"return\", _context16.sent);\n\n              case 5:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getCoursesByDepartment() {\n        return _getCoursesByDepartment.apply(this, arguments);\n      }\n\n      return getCoursesByDepartment;\n    }() //---addProgram(program)--- (Admin)\n    //    Input: program name\n    //    Output: success or failure\n\n  }, {\n    key: \"addProgram\",\n    value: function () {\n      var _addProgram = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        var program,\n            body,\n            _args17 = arguments;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                program = _args17.length > 0 && _args17[0] !== undefined ? _args17[0] : \"\";\n                body = {\n                  program: program\n                };\n                _context17.next = 4;\n                return this.sendPost(\"/programs/add-program\", body);\n\n              case 4:\n                return _context17.abrupt(\"return\", _context17.sent);\n\n              case 5:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function addProgram() {\n        return _addProgram.apply(this, arguments);\n      }\n\n      return addProgram;\n    }() //---addCourse(userid, firstName, lastName, year, semester, courseNumber, displayName, department)--- (Admin)\n    //    Input: ^^^\n    //    Output: success or failure\n\n  }, {\n    key: \"addCourse\",\n    value: function () {\n      var _addCourse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        var userid,\n            firstName,\n            lastName,\n            year,\n            semester,\n            courseNumber,\n            displayName,\n            department,\n            body,\n            _args18 = arguments;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                userid = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : \"\";\n                firstName = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : \"\";\n                lastName = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : \"\";\n                year = _args18.length > 3 && _args18[3] !== undefined ? _args18[3] : 0;\n                semester = _args18.length > 4 && _args18[4] !== undefined ? _args18[4] : \"\";\n                courseNumber = _args18.length > 5 && _args18[5] !== undefined ? _args18[5] : \"\";\n                displayName = _args18.length > 6 && _args18[6] !== undefined ? _args18[6] : \"\";\n                department = _args18.length > 7 && _args18[7] !== undefined ? _args18[7] : \"\";\n                body = {\n                  Course: {\n                    Coordinator: {\n                      Id: userid,\n                      firstName: firstName,\n                      lastName: lastName\n                    },\n                    year: year,\n                    semester: semester,\n                    courseNumber: courseNumber,\n                    displayName: displayName,\n                    department: department\n                  }\n                };\n                _context18.next = 11;\n                return this.sendPost(\"/courses/add-course\", body);\n\n              case 11:\n                return _context18.abrupt(\"return\", _context18.sent);\n\n              case 12:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function addCourse() {\n        return _addCourse.apply(this, arguments);\n      }\n\n      return addCourse;\n    }() //---removeCourse(year, semester, courseNumber, department)--- (Admin)\n    //    Input: year, semester, courseNumber, department\n    //    Output: success or failure\n\n  }, {\n    key: \"removeCourse\",\n    value: function () {\n      var _removeCourse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n        var year,\n            semester,\n            courseNumber,\n            department,\n            body,\n            _args19 = arguments;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                year = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : 0;\n                semester = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : \"\";\n                courseNumber = _args19.length > 2 && _args19[2] !== undefined ? _args19[2] : \"\";\n                department = _args19.length > 3 && _args19[3] !== undefined ? _args19[3] : \"\";\n                body = {\n                  Course: {\n                    year: year,\n                    semester: semester,\n                    courseNumber: courseNumber,\n                    department: department\n                  }\n                };\n                _context19.next = 7;\n                return this.sendPost(\"/courses/remove-course\", body);\n\n              case 7:\n                return _context19.abrupt(\"return\", _context19.sent);\n\n              case 8:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function removeCourse() {\n        return _removeCourse.apply(this, arguments);\n      }\n\n      return removeCourse;\n    }() //---getCourseOutcomesByCourse(year, semester, courseNumber, department)--- (Admin)\n    //    Input: year, semester, courseNumber, department\n    //    Output: array of course outcomes\n\n  }, {\n    key: \"getCourseOutcomesByCourse\",\n    value: function () {\n      var _getCourseOutcomesByCourse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n        var year,\n            semester,\n            courseNumber,\n            department,\n            body,\n            _args20 = arguments;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                year = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : 0;\n                semester = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : \"\";\n                courseNumber = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : \"\";\n                department = _args20.length > 3 && _args20[3] !== undefined ? _args20[3] : \"\";\n                body = {\n                  Course: {\n                    year: year,\n                    semester: semester,\n                    courseNumber: courseNumber,\n                    department: department\n                  }\n                };\n                _context20.next = 7;\n                return this.sendPost(\"/course-outcomes/by-course\", body);\n\n              case 7:\n                return _context20.abrupt(\"return\", _context20.sent);\n\n              case 8:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function getCourseOutcomesByCourse() {\n        return _getCourseOutcomesByCourse.apply(this, arguments);\n      }\n\n      return getCourseOutcomesByCourse;\n    }() //---postCourseOutcomes(outcomes)--- (Admin)\n    //    Input: array of outcome objects (see notes below)\n    //    Output: success or failure\n\n  }, {\n    key: \"postCourseOutcomes\",\n    value: function () {\n      var _postCourseOutcomes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {\n        var outcomes,\n            body,\n            _args21 = arguments;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                outcomes = _args21.length > 0 && _args21[0] !== undefined ? _args21[0] : [];\n                //an outcome object contains the following:\n                //order (number), outcome (string), mappedStudentOutcomes(array of numbers)\n                //Example:\n                //{\n                //    order: 1, outcome: \"Accomplish things\", mappedStudentOutcomes: [1, 0, 0, 1, 0, 1]\n                //}\n                body = {\n                  courseOutcomesList: outcomes\n                };\n                _context21.next = 4;\n                return this.sendPost(\"/course-outcomes/post-outcomes\", body);\n\n              case 4:\n                return _context21.abrupt(\"return\", _context21.sent);\n\n              case 5:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function postCourseOutcomes() {\n        return _postCourseOutcomes.apply(this, arguments);\n      }\n\n      return postCourseOutcomes;\n    }() //---postSection(userid, firstName, lastName, year, semester, courseNumber, sectionNumber, department, numberOfStudents)--- (Instructor)\n    //   Input: Section object\n    //   Output: success or failure\n\n  }, {\n    key: \"postSection\",\n    value: function () {\n      var _postSection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n        var userid,\n            year,\n            semester,\n            courseNumber,\n            sectionNumber,\n            department,\n            firstName,\n            lastName,\n            numberOfStudents,\n            body,\n            _args22 = arguments;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                userid = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : \"\";\n                year = _args22.length > 1 && _args22[1] !== undefined ? _args22[1] : 0;\n                semester = _args22.length > 2 && _args22[2] !== undefined ? _args22[2] : \"\";\n                courseNumber = _args22.length > 3 && _args22[3] !== undefined ? _args22[3] : \"\";\n                sectionNumber = _args22.length > 4 && _args22[4] !== undefined ? _args22[4] : \"\";\n                department = _args22.length > 5 && _args22[5] !== undefined ? _args22[5] : \"\";\n                firstName = _args22.length > 6 && _args22[6] !== undefined ? _args22[6] : \"\";\n                lastName = _args22.length > 7 && _args22[7] !== undefined ? _args22[7] : \"\";\n                numberOfStudents = _args22.length > 8 && _args22[8] !== undefined ? _args22[8] : 0;\n                body = {\n                  section: {\n                    instructor: {\n                      id: userid,\n                      firstName: firstName,\n                      lastName: lastName\n                    },\n                    year: year,\n                    semester: semester,\n                    courseNumber: courseNumber,\n                    sectionNumber: sectionNumber,\n                    department: department,\n                    isSectionCompleted: false,\n                    NumberOfStudents: NumberOfStudents\n                  }\n                };\n                _context22.next = 12;\n                return this.sendPost(\"/sections/post-section\", body);\n\n              case 12:\n                return _context22.abrupt(\"return\", _context22.sent);\n\n              case 13:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function postSection() {\n        return _postSection.apply(this, arguments);\n      }\n\n      return postSection;\n    }()\n  }, {\n    key: \"uploadAccessDb\",\n    value: function () {\n      var _uploadAccessDb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n        var formData,\n            _args23 = arguments;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                formData = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : new FormData();\n                _context23.next = 3;\n                return this.sendFile('/upload-access-db', formData);\n\n              case 3:\n                return _context23.abrupt(\"return\", _context23.sent);\n\n              case 4:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function uploadAccessDb() {\n        return _uploadAccessDb.apply(this, arguments);\n      }\n\n      return uploadAccessDb;\n    }()\n  }, {\n    key: \"uploadStudentWork\",\n    value: function () {\n      var _uploadStudentWork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n        var formData,\n            outcomeId,\n            courseNumber,\n            sectionNumber,\n            semester,\n            year,\n            _args24 = arguments;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                formData = _args24.length > 0 && _args24[0] !== undefined ? _args24[0] : new FormData();\n                outcomeId = _args24.length > 1 && _args24[1] !== undefined ? _args24[1] : 0;\n                courseNumber = _args24.length > 2 && _args24[2] !== undefined ? _args24[2] : \"\";\n                sectionNumber = _args24.length > 3 && _args24[3] !== undefined ? _args24[3] : \"\";\n                semester = _args24.length > 4 && _args24[4] !== undefined ? _args24[4] : \"\";\n                year = _args24.length > 5 && _args24[5] !== undefined ? _args24[5] : 0;\n                //outcomeId is a unique id that identifies a certain outcome in the DB\n                //it will come from the DB when the instructor form page is loaded\n                formData.append(\"outcomeId\", outcomeId);\n                formData.append(\"courseNumber\", courseNumber);\n                formData.append(\"sectionNumber\", sectionNumber);\n                formData.append(\"semester\", semester);\n                formData.append(\"year\", year);\n                _context24.next = 13;\n                return this.sendFile('/student-work/upload', formData);\n\n              case 13:\n                return _context24.abrupt(\"return\", _context24.sent);\n\n              case 14:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function uploadStudentWork() {\n        return _uploadStudentWork.apply(this, arguments);\n      }\n\n      return uploadStudentWork;\n    }()\n  }, {\n    key: \"downloadStudentWork\",\n    value: function () {\n      var _downloadStudentWork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {\n        var fileId,\n            fileName,\n            _args25 = arguments;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                fileId = _args25.length > 0 && _args25[0] !== undefined ? _args25[0] : \"\";\n                fileName = _args25.length > 1 && _args25[1] !== undefined ? _args25[1] : \"\";\n                _context25.next = 4;\n                return this.sendPost(\"/student-work/download\", {\n                  fileId: fileId\n                }, true, fileName);\n\n              case 4:\n                return _context25.abrupt(\"return\", _context25.sent);\n\n              case 5:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function downloadStudentWork() {\n        return _downloadStudentWork.apply(this, arguments);\n      }\n\n      return downloadStudentWork;\n    }()\n  }]);\n\n  return API;\n}();\n\nexport { API as default };\n\nvar ErrorObj = function ErrorObj() {\n  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var isLoggedIn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  _classCallCheck(this, ErrorObj);\n\n  this.failure = true;\n  this.message = message;\n  this.isLoggedIn = isLoggedIn;\n};","map":{"version":3,"sources":["/Users/armaandhanoa/Documents/Documents - Armaan’s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/api/api.js"],"names":["cookieCutter","root","OK","UNAUTHORIZED","NOT_LOGGED_IN_MSG","SERVER_ERROR_MSG","BAD_REQUEST_MSG","token","API","t","route","body","isFileDownload","fileName","url","get","fetch","method","cache","headers","referrerPolicy","JSON","stringify","then","response","statusCode","status","blob","json","a","document","createElement","href","URL","createObjectURL","setAttribute","click","ErrorObj","hasOwnProperty","formData","FormData","userid","password","sendPost","expires","Date","setHours","getHours","toUTCString","set","semester","year","Userid","Semester","Year","department","courseNumber","sectionNumber","Section","Instructor","Id","Department","CourseNumber","SectionNumber","Course","Coordinator","userId","isSectionCompleted","outcomes","ITGrades","CSGrades","CEGrades","form","section","instructor","id","coordinatorComment","isCourseCompleted","course","sectionId","text","ResultObj","parse","date","day","getDay","month","getMonth","getFullYear","firstName","lastName","numberOfStudents","facultyType","info","program","displayName","courseOutcomesList","NumberOfStudents","sendFile","outcomeId","append","fileId","message","isLoggedIn","failure"],"mappings":"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","sourcesContent":["// Helper API Class\r\nimport cookieCutter from 'cookie-cutter';\r\n\r\nconst root = \"https://localhost:44372/api\"; // The base URL for each request\r\nconst OK = 200;           //200 Ok status code\r\nconst UNAUTHORIZED = 401; //401 Unauthorized status code\r\nconst NOT_LOGGED_IN_MSG = \"Error: Your session has expired. Please log in again.\";\r\nconst SERVER_ERROR_MSG = \"Internal Server Error: Please try again later.\";\r\nconst BAD_REQUEST_MSG = \"Error: Some of the provided parameters are invalid.\";\r\nvar token = \"\";           //holds value of the token cookie\r\n\r\nexport default class API {\r\n    /* This function is for getInitialProps.\r\n    cookieCutter is undefined in getInitialProps,\r\n    so this function sets the token to the value of the cookie\r\n    passed in from getInitialProps. */\r\n    setToken(t = \"\") {\r\n        token = t;\r\n    }\r\n\r\n    // generic function for sending POST requests\r\n    //    Input: route and body\r\n    //    Output: The JSON that is returned from the route\r\n    async sendPost(route = \"\", body = {}, isFileDownload = false, fileName = \"\") {\r\n        const url = root + route; // Combine the root URL with the specified route\r\n        var statusCode; //holds the status code of the response\r\n\r\n        //if the request is not from getInitialProps, meaning cookieCutter is defined, retreive the cookie\r\n        if (typeof cookieCutter.get == \"function\") {\r\n            token = cookieCutter.get(\"token\");\r\n        }\r\n\r\n        return await fetch(url, {\r\n            method: \"POST\",\r\n            cache: \"no-cache\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + token\r\n            },\r\n            referrerPolicy: \"no-referrer\",\r\n            body: JSON.stringify(body),\r\n        })\r\n            .then((response) => {\r\n                statusCode = response.status;\r\n\r\n                if (statusCode == UNAUTHORIZED) //this check has to be here for some reason ¯\\_(ツ)_/¯\r\n                    return;\r\n                else if (isFileDownload)\r\n                    return response.blob();\r\n                else\r\n                    return response.json();\r\n            })\r\n            .then((json) => {\r\n                if (statusCode == OK) {\r\n                    if (isFileDownload) { //download the responded file\r\n                        var a = document.createElement(\"a\");\r\n                    \r\n                        a.href = URL.createObjectURL(json);\r\n                        a.setAttribute(\"download\", fileName);\r\n                        a.click();\r\n                        return;\r\n                    }\r\n                    else\r\n                        return json;\r\n                }\r\n                else if (statusCode == UNAUTHORIZED)\r\n                    return new ErrorObj(NOT_LOGGED_IN_MSG, false); //user's session has expired\r\n                else {\r\n                    if (json.hasOwnProperty(\"message\"))\r\n                        return new ErrorObj(json[\"message\"]); //custom error message from API\r\n                    else\r\n                        return new ErrorObj(BAD_REQUEST_MSG); //default bad input parameters message\r\n                }\r\n            })\r\n            .catch(() => { return new ErrorObj(SERVER_ERROR_MSG); });\r\n    }\r\n\r\n    async sendFile(route = \"\", formData = new FormData()) {\r\n        const url = root + route; // Combine the root URL with the specified route\r\n        var statusCode; //holds the status code of the response\r\n\r\n        return await fetch(url, {\r\n            method: 'POST',\r\n            body: formData,\r\n            headers: {\r\n            \"Authorization\": \"Bearer \" + token\r\n            }\r\n        })\r\n            .then((response) => {\r\n                statusCode = response.status;\r\n\r\n                if (statusCode == UNAUTHORIZED) //this check has to be here for some reason ¯\\_(ツ)_/¯\r\n                    return;\r\n                else\r\n                    return response.json();\r\n            })\r\n            .then((json) => {\r\n                if (statusCode == OK)\r\n                    return json;\r\n                else if (statusCode == UNAUTHORIZED)\r\n                    return new ErrorObj(NOT_LOGGED_IN_MSG, false); //user's session has expired\r\n                else {\r\n                    if (json.hasOwnProperty(\"message\"))\r\n                        return new ErrorObj(json[\"message\"]); //custom error message from API\r\n                    else\r\n                        return new ErrorObj(BAD_REQUEST_MSG); //default bad input parameters message\r\n                }\r\n            })\r\n            .catch(() => { return new ErrorObj(SERVER_ERROR_MSG); });\r\n    }\r\n\r\n    //---login(userid, password)---\r\n    //    Input: UserId, Password\r\n    //    Output: \"Admin\", \"Instructor\", \"Student/TA\" or boolean for failure\r\n    async login(userid = \"\", password = \"\") {\r\n        const body = { userid: userid, password: password };\r\n        \r\n        return await this.sendPost(\"/login\", body).then((json) => {\r\n            if (json.hasOwnProperty(\"token\")) {\r\n                var expires = new Date();\r\n    \r\n                expires.setHours(expires.getHours() + 24); //expires in 24 hours\r\n                expires = expires.toUTCString();\r\n                \r\n                cookieCutter.set(\"token\", json[\"token\"], { expires }); //set token cookie\r\n                return json[\"role\"]; //return the role\r\n            }\r\n        });\r\n        \r\n        //To use this data you must do the following:\r\n        //api.login(userid, password).then(role => {/*here is where the return value is accessible, it is either role string or a boolean indicating failure*/})\r\n    }\r\n\r\n    //---logout(userid)---\r\n    //    Input: None\r\n    //    Output: None\r\n    logout() {\r\n        cookieCutter.set(\"token\", \"\", { expires: new Date().toUTCString() });\r\n        cookieCutter.set(\"user\", \"\", { expires: new Date().toUTCString() });\r\n    }\r\n    \r\n    //---getCourses(userid, semester, year)---\r\n    //    Input: UserId, Semester, Year\r\n    //    Output: Sections for the corresponding UserId, Semester and Year\r\n    async getCourses(userid = \"\", semester = \"\", year = 0) {\r\n        const body = { userid: userid, semester: semester, year: year };\r\n\r\n        return await this.sendPost(\"/sections/by-userid-semester-year\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getCourses(userId, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n    }\r\n\r\n    //---getAllCourses(userid, semester, year)---  (Admin)\r\n    //    Input: UserId, Semester, Year\r\n    //    Output: Sections for the corresponding Semester and Year \r\n    async getAllCourses(userid = \"\", semester = \"\", year = 0) {\r\n        const body = { Userid: userid, Semester: semester, Year: year };\r\n\r\n        return await this.sendPost(\"/sections/by-semester-year\", body);\r\n        \r\n        //To use this data you must do the following:\r\n        //api.getAllCourses(userid, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n    }\r\n    //---getCoursesBySemesterYear(semester, year)---  (Admin)\r\n    //    Input: Semester, Year\r\n    //    Output: All Courses for the corresponding semester and year \r\n    async getCoursesBySemesterYear(semester = \"\", year = 0) \r\n    {\r\n        const body = { \r\n            semester: semester, \r\n            year: year \r\n        };\r\n\r\n        return await this.sendPost(\"/courses/get-by-year-semester\", body);\r\n    }\r\n    //To use this data you must do the following:\r\n    //api.getCoursesBySemesterYear(semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n\r\n    //---getFormsBySection(userid, year, semester, department, course, section)---\r\n    //    Input: UserId, Year, Semester, Department, CourseNumber, SectionNumber\r\n    //    Output: Forms for the corresponding UserId, Year, Semester, Department, CourseNumber, and SectionNumber\r\n    async getFormBySection(userid = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", sectionNumber = \"\") {\r\n        const body = {\r\n            Section: {\r\n                Instructor: {\r\n                    Id: userid,\r\n                },\r\n                Year: year,   \r\n                Semester: semester,\r\n                Department: department,\r\n                CourseNumber: courseNumber,\r\n                SectionNumber: sectionNumber\r\n            }\r\n        };\r\n\r\n        return await this.sendPost(\"/forms/by-section\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getFormsBySection(userid, year, semester, department, course, section).then(form => {/*here is where the data is accessible, form is an array of JSON objects*/})\r\n    }\r\n\r\n    //---getFormsByCourse(userid, year, semester, department, course)---\r\n    //    Input: UserId, Year, Semester, Department, CourseNumber\r\n    //    Output: Forms for the corresponding UserId, Year, Semester, Department, and CourseNumber\r\n    async getFormsByCourse(userid = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\") {\r\n        const body = {\r\n            Course: {\r\n                Coordinator: {\r\n                    Id: userid,\r\n                },\r\n                Year: year,\r\n                Semester: semester,\r\n                Department: department,\r\n                CourseNumber: courseNumber\r\n            }\r\n        };\r\n        \r\n        return await this.sendPost(\"/forms/by-course\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getFormsByCourse(userid, year, semester, department, course).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\r\n    }\r\n\r\n    //---getAllForms(userid, semester, year)--- (Admin)\r\n    //    Input: UserId, Semester, Year\r\n    //    Output: Forms for the corresponding Semester and Year\r\n    async getAllForms(userid = \"\", semester = \"\", year = 0) {\r\n\r\n        const body = { userid: userid, semester: semester, year: year };\r\n\r\n        return await this.sendPost(\"/forms/by-semester-year\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getAllForms(userid, semester, year).then(courses => {/*here is where the data is accessible, forms is an array of JSON objects*/})\r\n    }\r\n\r\n    //---postForm(userId, year, semester, department, courseNumber, sectionNumber, isSectionCompleted, outcomes, ITGrades, CSGrades, CEGrades)---\r\n    //    Input: ^^^   (will also have pdf here later as an additional parameter)\r\n    //    Output: Success or Failure\r\n    async postForm(userId = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", sectionNumber = \"\", isSectionCompleted = false, outcomes = [], ITGrades = {}, CSGrades = {}, CEGrades = {}) {\r\n        // the body will also include any pdf to post in the future\r\n\r\n        //outcomes: an array of Course_Outcomes objects\r\n        //Course_Outcomes class:\r\n        //string outcome, int numberOfIT, int numberOfCS, int numberOfCE, StudentWorks[] studentWorks\r\n        //StudentWorks class:\r\n        //string studentWork, string fileUploaded (<-- will implement later)\r\n\r\n        //IT, CS, CE Grades class:\r\n        //int A, int B, int C, int D, int E, int F, int W, int I, int totalStudents\r\n\r\n        const body = {\r\n            form: {\r\n                section: {\r\n                    instructor: {\r\n                        id: userId\r\n                    },\r\n                    year,\r\n                    semester,\r\n                    department,\r\n                    courseNumber,\r\n                    sectionNumber,\r\n                    isSectionCompleted\r\n                },\r\n                outcomes,\r\n                ITGrades,\r\n                CSGrades,\r\n                CEGrades\r\n            }\r\n        };\r\n\r\n        return await this.sendPost(\"/forms/post-form\", body);\r\n    }\r\n\r\n    //---postComment(userId, year, semester, department, courseNumber, coordinatorComment, isCourseCompleted)---\r\n    //    Input: UserId, Year, Semester, department, courseNumber, coordinatorComment, isCourseCompleted\r\n    //    Output: Success or Failure\r\n    async postComment(userId = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", coordinatorComment = \"\", isCourseCompleted = false) {\r\n        const body = {\r\n            course: {\r\n                Coordinator: {\r\n                    Id: userId,\r\n                },\r\n                year,\r\n                semester,\r\n                department,\r\n                courseNumber,\r\n                coordinatorComment,\r\n                isCourseCompleted\r\n            }\r\n        };\r\n\r\n        return await this.sendPost(\"/courses/post-comment\", body);\r\n    }\r\n\r\n    //---getBlankForm(userid)---\r\n    //    Input: Section object containing: CourseNumber, SectionNumber, and Id\r\n    //    Output: Blank Form\r\n    //async getBlankForm(userid) {\r\n    async getBlankForm(courseNumber = \"\", sectionNumber = \"\", sectionId = 0) {\r\n        const body = { \r\n            Section: {\r\n                CourseNumber: courseNumber,\r\n                SectionNumber: sectionNumber,\r\n                Id: sectionId\r\n            }\r\n        };\r\n\r\n        return await this.sendPost(\"/forms/new-blank\", body);\r\n\r\n        //To use this data you must do the following:\r\n        //api.getBlankForm(userid).then(result => {/*here is where the return value is accessible, it is a JSON*/})\r\n    }\r\n\r\n    //--getDefaultYearAndSemester()--\r\n    //    Input: Nothing\r\n    //    Output: Object Including Current Default Year and Semester\r\n    getDefaultYearAndSemester() {\r\n        var text = '{ \"year\": 0,' +         // create string of object\r\n                   ' \"semester\": \"\" }';\r\n        var ResultObj = JSON.parse(text);   // create object from the string\r\n\r\n        var date = new Date();              // get the current date\r\n        var day = date.getDay();            // get the current day\r\n        var month = date.getMonth() + 1;    // add one to month (by default January = 0)\r\n        ResultObj.year = date.getFullYear();// get the full year from the date\r\n        ResultObj.semester = \"fall\";        // just to be safe\r\n        \r\n        // Set the Default Semester Based on the Month\r\n        if ((month > 8) || (month == 8 && day >= 15)) {\r\n            ResultObj.semester = \"fall\";\r\n        }\r\n        else if ((month > 5) || (month == 5 && day >= 15)) {\r\n            ResultObj.semester = \"summer\";\r\n            // since this is just a default semester, it always defaults to the longer semesters\r\n            // this is why it doesn't default to smaller summer semesters\r\n        }\r\n        else {\r\n            ResultObj.semester = \"spring\";\r\n        }\r\n\r\n        return ResultObj;    // return object including the year and semester\r\n    }\r\n\r\n    //---addSection(userid, firstName, lastName, year, semester, courseNumber, sectionNumber, department, numberOfStudents)--- (Admin)\r\n    //    Input: ^^^\r\n    //    Output: Success or Failure\r\n    async addSection(userid = \"\", firstName = \"\", lastName = \"\", year = 0, semester = \"\", courseNumber = \"\", sectionNumber = \"\", department = \"\", numberOfStudents = 0) {\r\n        const body = {\r\n            section: {\r\n                instructor: {\r\n                    id: userid,\r\n                    firstName,\r\n                    lastName\r\n                },\r\n                year,\r\n                semester,\r\n                courseNumber,\r\n                sectionNumber,\r\n                department,\r\n                isSectionCompleted: false,\r\n                numberOfStudents\r\n            }\r\n            \r\n        };\r\n\r\n        return await this.sendPost(\"/sections/add-section\", body);\r\n    }\r\n\r\n    //---getFacultyList()--- (Admin)\r\n    //    Input: none\r\n    //    Output: List of instructors, coordinators, adjunct faculties, and teaching fellows\r\n    async getFacultyList()\r\n    {\r\n        return await this.sendPost(\"/faculty/get-list\", {});\r\n    }\r\n    \r\n    //---addFacultyMember(firstName, lastName, userid, role)--- (Admin)\r\n    //    Input: First Name, Last Name and User Id\r\n    //    Output: Success or Failure\r\n    async addFacultyMember(firstName = \"\", lastName = \"\", userId = \"\", facultyType = \"\")\r\n    {\r\n        const body = \r\n        {\r\n            info: {\r\n                firstName: firstName,\r\n                lastName: lastName,\r\n                id: userId\r\n            },\r\n            facultyType: facultyType\r\n        };\r\n\r\n        return await this.sendPost(\"/faculty/add-member\", body);\r\n    }\r\n    \r\n    //---getCoursesByDepartment(department)--- (Admin)\r\n    //    Input: department\r\n    //    Output: array of courses\r\n    async getCoursesByDepartment(department = \"\") {\r\n        const body = {\r\n            department\r\n        };\r\n        \r\n        return await this.sendPost(\"/courses/get-by-department\", body);\r\n    }\r\n    \r\n    //---addProgram(program)--- (Admin)\r\n    //    Input: program name\r\n    //    Output: success or failure\r\n    async addProgram(program = \"\") {\r\n        const body = {\r\n            program\r\n        };\r\n        \r\n        return await this.sendPost(\"/programs/add-program\", body);\r\n    }\r\n    \r\n    //---addCourse(userid, firstName, lastName, year, semester, courseNumber, displayName, department)--- (Admin)\r\n    //    Input: ^^^\r\n    //    Output: success or failure\r\n    async addCourse(userid = \"\", firstName = \"\", lastName = \"\", year = 0, semester = \"\", courseNumber = \"\", displayName = \"\", department = \"\")\r\n    {\r\n        const body = {\r\n            Course: {\r\n                Coordinator: {\r\n                    Id: userid,\r\n                    firstName,\r\n                    lastName\r\n                },\r\n                year,\r\n                semester,\r\n                courseNumber,\r\n                displayName,\r\n                department\r\n            }\r\n        };\r\n        \r\n        return await this.sendPost(\"/courses/add-course\", body);\r\n    }\r\n    \r\n    //---removeCourse(year, semester, courseNumber, department)--- (Admin)\r\n    //    Input: year, semester, courseNumber, department\r\n    //    Output: success or failure\r\n    async removeCourse(year = 0, semester = \"\", courseNumber = \"\", department = \"\")\r\n    {\r\n        const body = {\r\n            Course: {\r\n                year,\r\n                semester,\r\n                courseNumber,\r\n                department\r\n            }\r\n        };\r\n        \r\n        return await this.sendPost(\"/courses/remove-course\", body);\r\n    }\r\n\r\n    //---getCourseOutcomesByCourse(year, semester, courseNumber, department)--- (Admin)\r\n    //    Input: year, semester, courseNumber, department\r\n    //    Output: array of course outcomes\r\n    async getCourseOutcomesByCourse(year = 0, semester = \"\", courseNumber = \"\", department = \"\")\r\n    {\r\n        const body = {\r\n            Course: {\r\n                year,\r\n                semester,\r\n                courseNumber,\r\n                department\r\n            }\r\n        };\r\n    \r\n        return await this.sendPost(\"/course-outcomes/by-course\", body);\r\n    }\r\n\r\n    //---postCourseOutcomes(outcomes)--- (Admin)\r\n    //    Input: array of outcome objects (see notes below)\r\n    //    Output: success or failure\r\n    async postCourseOutcomes(outcomes = [])\r\n    {\r\n        //an outcome object contains the following:\r\n        //order (number), outcome (string), mappedStudentOutcomes(array of numbers)\r\n        //Example:\r\n        //{\r\n        //    order: 1, outcome: \"Accomplish things\", mappedStudentOutcomes: [1, 0, 0, 1, 0, 1]\r\n        //}\r\n\r\n        const body = {\r\n            courseOutcomesList: outcomes\r\n        };\r\n    \r\n        return await this.sendPost(\"/course-outcomes/post-outcomes\", body);\r\n    }\r\n    \r\n    //---postSection(userid, firstName, lastName, year, semester, courseNumber, sectionNumber, department, numberOfStudents)--- (Instructor)\r\n    //   Input: Section object\r\n    //   Output: success or failure\r\n    async postSection(userid = \"\", year = 0, semester = \"\", courseNumber = \"\", sectionNumber = \"\", department = \"\", firstName = \"\", lastName = \"\", numberOfStudents = 0) {\r\n        const body = {\r\n            section: {\r\n                instructor: {\r\n                    id: userid,\r\n                    firstName,\r\n                    lastName\r\n                },\r\n                year,\r\n                semester,\r\n                courseNumber,\r\n                sectionNumber,\r\n                department,\r\n                isSectionCompleted: false,\r\n                NumberOfStudents\r\n            }\r\n\r\n        };\r\n\r\n        return await this.sendPost(\"/sections/post-section\", body);\r\n    }\r\n    \r\n    async uploadAccessDb(formData = new FormData()) \r\n    {\r\n        return await this.sendFile('/upload-access-db', formData);\r\n    }\r\n    \r\n    async uploadStudentWork(formData = new FormData(), outcomeId = 0, courseNumber = \"\", sectionNumber = \"\", semester = \"\", year = 0) \r\n    {\r\n        //outcomeId is a unique id that identifies a certain outcome in the DB\r\n        //it will come from the DB when the instructor form page is loaded\r\n\r\n        formData.append(\"outcomeId\", outcomeId);\r\n        formData.append(\"courseNumber\", courseNumber);\r\n        formData.append(\"sectionNumber\", sectionNumber);\r\n        formData.append(\"semester\", semester);\r\n        formData.append(\"year\", year);\r\n        return await this.sendFile('/student-work/upload', formData);\r\n    }\r\n\r\n    async downloadStudentWork(fileId = \"\", fileName = \"\") {\r\n        //fileId is the unique file name given to a file when it is uploaded\r\n        //fileName is the original file name the file had before it was uploaded\r\n        //both of these values will come from the DB when the instructor form page is loaded\r\n    \r\n        return await this.sendPost(\"/student-work/download\", { fileId }, true, fileName);\r\n    }\r\n}\r\n\r\nclass ErrorObj {\r\n    constructor(message = \"\", isLoggedIn = true) {\r\n        this.failure = true;\r\n        this.message = message;\r\n        this.isLoggedIn = isLoggedIn;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}