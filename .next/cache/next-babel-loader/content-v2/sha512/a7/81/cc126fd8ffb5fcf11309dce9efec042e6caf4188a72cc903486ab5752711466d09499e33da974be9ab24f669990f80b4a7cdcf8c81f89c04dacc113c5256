{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/EditCourseAssignments/Autocomplete.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\"; //autocomplete functionality from https://www.digitalocean.com/community/tutorials/react-react-autocomplete\n\nvar Autocomplete = /*#__PURE__*/function (_Component) {\n  _inherits(Autocomplete, _Component);\n\n  var _super = _createSuper(Autocomplete);\n\n  function Autocomplete(props) {\n    var _this;\n\n    _classCallCheck(this, Autocomplete);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (e) {\n      var suggestions = _this.props.suggestions;\n      var userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      var filteredSuggestions = suggestions.filter(function (suggestion) {\n        return suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1;\n      }); // Update the user input and filtered suggestions, reset the active\n      // suggestion and make sure the suggestions are shown\n\n      _this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (e) {\n      // Update the user input and reset the rest of the state\n      _this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (e) {\n      var _this$state = _this.state,\n          activeSuggestion = _this$state.activeSuggestion,\n          filteredSuggestions = _this$state.filteredSuggestions; // User pressed the enter key, update the input and close the\n      // suggestions\n\n      if (e.keyCode === 13) {\n        _this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n      } // User pressed the up arrow, decrement the index\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          _this.setState({\n            activeSuggestion: activeSuggestion - 1\n          });\n        } // User pressed the down arrow, increment the index\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            _this.setState({\n              activeSuggestion: activeSuggestion + 1\n            });\n          }\n    });\n\n    _this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n    return _this;\n  } // Event fired when the input value is changed\n\n\n  _createClass(Autocomplete, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var onChange = this.onChange,\n          onClick = this.onClick,\n          onKeyDown = this.onKeyDown,\n          _this$state2 = this.state,\n          activeSuggestion = _this$state2.activeSuggestion,\n          filteredSuggestions = _this$state2.filteredSuggestions,\n          showSuggestions = _this$state2.showSuggestions,\n          userInput = _this$state2.userInput;\n      var suggestionsListComponent;\n\n      if (showSuggestions && userInput) {\n        if (filteredSuggestions.length) {\n          suggestionsListComponent = /*#__PURE__*/_jsxDEV(\"ul\", {\n            \"class\": \"suggestions\",\n            children: filteredSuggestions.map(function (suggestion, index) {\n              var className; // Flag the active suggestion with a class\n\n              if (index === activeSuggestion) {\n                className = \"suggestion-active\";\n              }\n\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                className: className,\n                onClick: onClick,\n                children: suggestion\n              }, suggestion, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, _this2);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this);\n        }\n      }\n\n      return /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"faculty-input\",\n          type: \"text\",\n          onChange: onChange,\n          onKeyDown: onKeyDown,\n          value: userInput,\n          placeholder: \"Unassigned\",\n          border: \"1px solid #999\",\n          padding: \"0.5rem\",\n          height: \"30px\",\n          width: \"225px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this), suggestionsListComponent]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return Autocomplete;\n}(Component);\n\n_defineProperty(Autocomplete, \"propTypes\", {\n  suggestions: PropTypes.instanceOf(Array)\n});\n\n_defineProperty(Autocomplete, \"defaultProps\", {\n  suggestions: []\n});\n\nexport default Autocomplete;","map":{"version":3,"sources":["/Users/armaandhanoa/Documents/Documents - Armaanâ€™s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/EditCourseAssignments/Autocomplete.js"],"names":["React","Component","Fragment","PropTypes","Autocomplete","props","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","innerText","state","keyCode","length","onChange","onClick","onKeyDown","suggestionsListComponent","map","index","className","instanceOf","Array"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;IAEMC,Y;;;;;AASJ,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,+DAgBR,UAACC,CAAD,EAAO;AAAA,UACRC,WADQ,GACQ,MAAKF,KADb,CACRE,WADQ;AAEhB,UAAMC,SAAS,GAAGF,CAAC,CAACG,aAAF,CAAgBC,KAAlC,CAFgB,CAIhB;;AACA,UAAMC,mBAAmB,GAAGJ,WAAW,CAACK,MAAZ,CAC1B,UAACC,UAAD;AAAA,eACEA,UAAU,CAACC,WAAX,GAAyBC,OAAzB,CAAiCP,SAAS,CAACM,WAAV,EAAjC,IAA4D,CAAC,CAD/D;AAAA,OAD0B,CAA5B,CALgB,CAUhB;AACA;;AACA,YAAKE,QAAL,CAAc;AACZC,QAAAA,gBAAgB,EAAE,CADN;AAEZN,QAAAA,mBAAmB,EAAnBA,mBAFY;AAGZO,QAAAA,eAAe,EAAE,IAHL;AAIZV,QAAAA,SAAS,EAAEF,CAAC,CAACG,aAAF,CAAgBC;AAJf,OAAd;AAMD,KAlCkB;;AAAA,8DAqCT,UAACJ,CAAD,EAAO;AACf;AACA,YAAKU,QAAL,CAAc;AACZC,QAAAA,gBAAgB,EAAE,CADN;AAEZN,QAAAA,mBAAmB,EAAE,EAFT;AAGZO,QAAAA,eAAe,EAAE,KAHL;AAIZV,QAAAA,SAAS,EAAEF,CAAC,CAACG,aAAF,CAAgBU;AAJf,OAAd;AAMD,KA7CkB;;AAAA,gEAgDP,UAACb,CAAD,EAAO;AAAA,wBACiC,MAAKc,KADtC;AAAA,UACTH,gBADS,eACTA,gBADS;AAAA,UACSN,mBADT,eACSA,mBADT,EAGjB;AACA;;AACA,UAAIL,CAAC,CAACe,OAAF,KAAc,EAAlB,EAAsB;AACpB,cAAKL,QAAL,CAAc;AACZC,UAAAA,gBAAgB,EAAE,CADN;AAEZC,UAAAA,eAAe,EAAE,KAFL;AAGZV,UAAAA,SAAS,EAAEG,mBAAmB,CAACM,gBAAD;AAHlB,SAAd;AAKD,OAND,CAOA;AAPA,WAQK,IAAIX,CAAC,CAACe,OAAF,KAAc,EAAlB,EAAsB;AACzB,cAAIJ,gBAAgB,KAAK,CAAzB,EAA4B;AAC1B;AACD;;AAED,gBAAKD,QAAL,CAAc;AAAEC,YAAAA,gBAAgB,EAAEA,gBAAgB,GAAG;AAAvC,WAAd;AACD,SANI,CAOL;AAPK,aAQA,IAAIX,CAAC,CAACe,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAIJ,gBAAgB,GAAG,CAAnB,KAAyBN,mBAAmB,CAACW,MAAjD,EAAyD;AACvD;AACD;;AAED,kBAAKN,QAAL,CAAc;AAAEC,cAAAA,gBAAgB,EAAEA,gBAAgB,GAAG;AAAvC,aAAd;AACD;AACF,KA5EkB;;AAGjB,UAAKG,KAAL,GAAa;AACX;AACAH,MAAAA,gBAAgB,EAAE,CAFP;AAGX;AACAN,MAAAA,mBAAmB,EAAE,EAJV;AAKX;AACAO,MAAAA,eAAe,EAAE,KANN;AAOX;AACAV,MAAAA,SAAS,EAAE;AARA,KAAb;AAHiB;AAalB,G,CAED;;;;;6BA+DS;AAAA;;AAAA,UAELe,QAFK,GAWH,IAXG,CAELA,QAFK;AAAA,UAGLC,OAHK,GAWH,IAXG,CAGLA,OAHK;AAAA,UAILC,SAJK,GAWH,IAXG,CAILA,SAJK;AAAA,yBAWH,IAXG,CAKLL,KALK;AAAA,UAMHH,gBANG,gBAMHA,gBANG;AAAA,UAOHN,mBAPG,gBAOHA,mBAPG;AAAA,UAQHO,eARG,gBAQHA,eARG;AAAA,UASHV,SATG,gBASHA,SATG;AAaP,UAAIkB,wBAAJ;;AAEA,UAAIR,eAAe,IAAIV,SAAvB,EAAkC;AAChC,YAAIG,mBAAmB,CAACW,MAAxB,EAAgC;AAC9BI,UAAAA,wBAAwB,gBACtB;AAAI,qBAAM,aAAV;AAAA,sBACGf,mBAAmB,CAACgB,GAApB,CAAwB,UAACd,UAAD,EAAae,KAAb,EAAuB;AAC9C,kBAAIC,SAAJ,CAD8C,CAG9C;;AACA,kBAAID,KAAK,KAAKX,gBAAd,EAAgC;AAC9BY,gBAAAA,SAAS,GAAG,mBAAZ;AACD;;AAED,kCACE;AAAI,gBAAA,SAAS,EAAEA,SAAf;AAA2C,gBAAA,OAAO,EAAEL,OAApD;AAAA,0BACGX;AADH,iBAA+BA,UAA/B;AAAA;AAAA;AAAA;AAAA,wBADF;AAKD,aAbA;AADH;AAAA;AAAA;AAAA;AAAA,kBADF;AAkBD;AACF;;AAED,0BACE,QAAC,QAAD;AAAA,gCACE;AACE,UAAA,SAAS,EAAC,eADZ;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,QAAQ,EAAEU,QAHZ;AAIE,UAAA,SAAS,EAAEE,SAJb;AAKE,UAAA,KAAK,EAAEjB,SALT;AAME,UAAA,WAAW,EAAC,YANd;AAOE,UAAA,MAAM,EAAC,gBAPT;AAQE,UAAA,OAAO,EAAC,QARV;AASE,UAAA,MAAM,EAAC,MATT;AAUE,UAAA,KAAK,EAAC;AAVR;AAAA;AAAA;AAAA;AAAA,gBADF,EAaGkB,wBAbH;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAiBD;;;;EA9IwBzB,S;;gBAArBG,Y,eACe;AACjBG,EAAAA,WAAW,EAAEJ,SAAS,CAAC2B,UAAV,CAAqBC,KAArB;AADI,C;;gBADf3B,Y,kBAKkB;AACpBG,EAAAA,WAAW,EAAE;AADO,C;;AA4IxB,eAAeH,YAAf","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\n//autocomplete functionality from https://www.digitalocean.com/community/tutorials/react-react-autocomplete\n\nclass Autocomplete extends Component {\n  static propTypes = {\n    suggestions: PropTypes.instanceOf(Array),\n  };\n\n  static defaultProps = {\n    suggestions: [],\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\",\n    };\n  }\n\n  // Event fired when the input value is changed\n  onChange = (e) => {\n    const { suggestions } = this.props;\n    const userInput = e.currentTarget.value;\n\n    // Filter our suggestions that don't contain the user's input\n    const filteredSuggestions = suggestions.filter(\n      (suggestion) =>\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n\n    // Update the user input and filtered suggestions, reset the active\n    // suggestion and make sure the suggestions are shown\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions,\n      showSuggestions: true,\n      userInput: e.currentTarget.value,\n    });\n  };\n\n  // Event fired when the user clicks on a suggestion\n  onClick = (e) => {\n    // Update the user input and reset the rest of the state\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: e.currentTarget.innerText,\n    });\n  };\n\n  // Event fired when the user presses a key down\n  onKeyDown = (e) => {\n    const { activeSuggestion, filteredSuggestions } = this.state;\n\n    // User pressed the enter key, update the input and close the\n    // suggestions\n    if (e.keyCode === 13) {\n      this.setState({\n        activeSuggestion: 0,\n        showSuggestions: false,\n        userInput: filteredSuggestions[activeSuggestion],\n      });\n    }\n    // User pressed the up arrow, decrement the index\n    else if (e.keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\n    }\n    // User pressed the down arrow, increment the index\n    else if (e.keyCode === 40) {\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\n        return;\n      }\n\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\n    }\n  };\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput,\n      },\n    } = this;\n\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = (\n          <ul class=\"suggestions\">\n            {filteredSuggestions.map((suggestion, index) => {\n              let className;\n\n              // Flag the active suggestion with a class\n              if (index === activeSuggestion) {\n                className = \"suggestion-active\";\n              }\n\n              return (\n                <li className={className} key={suggestion} onClick={onClick}>\n                  {suggestion}\n                </li>\n              );\n            })}\n          </ul>\n        );\n      }\n    }\n\n    return (\n      <Fragment>\n        <input\n          className=\"faculty-input\"\n          type=\"text\"\n          onChange={onChange}\n          onKeyDown={onKeyDown}\n          value={userInput}\n          placeholder=\"Unassigned\"\n          border=\"1px solid #999\"\n          padding=\"0.5rem\"\n          height=\"30px\"\n          width=\"225px\"\n        />\n        {suggestionsListComponent}\n      </Fragment>\n    );\n  }\n}\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}