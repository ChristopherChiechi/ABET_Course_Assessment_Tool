{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"C:/Users/schic/OneDrive/Documents/UNT/Fall_20/4901 Capstone/Capstone Project/Frontend2/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:/Users/schic/OneDrive/Documents/UNT/Fall_20/4901 Capstone/Capstone Project/Frontend2/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/schic/OneDrive/Documents/UNT/Fall_20/4901 Capstone/Capstone Project/Frontend2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\schic\\\\OneDrive\\\\Documents\\\\UNT\\\\Fall_20\\\\4901 Capstone\\\\Capstone Project\\\\Frontend2\\\\components\\\\admin-components\\\\OutcomeMapping\\\\OutcomeMapping.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport React from 'react';\nimport { VStack, Text, Select } from '@chakra-ui/react';\nimport { RecoilRoot, atom, selector, useRecoilState, useRecoilValue } from 'recoil';\nimport StudentOutcomeList from \"./StudentOutcomeList\";\nimport programData from \"../../../fake-data/programs.json\";\nimport courseData from \"../../../fake-data/course.json\";\nimport { coursesAtom } from './recoilStore';\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\nimport { getAllCourses } from '../../../api/APIHelper';\nimport TableGroup from \"./TableGroup\";\nvar OutcomeMapping = /*#__PURE__*/React.memo(_c = _s(function () {\n  _s();\n\n  var programs = programData.programs;\n\n  var _useState = useState(),\n      selectedProgram = _useState[0],\n      setSelectedProgram = _useState[1];\n\n  var _useState2 = useState(),\n      studentOutcomes = _useState2[0],\n      setStudentOutcomes = _useState2[1];\n\n  var _useState3 = useState(),\n      outcomeMapping = _useState3[0],\n      setOutcomeMapping = _useState3[1]; //const [courses, setCourses] = useRecoilState(coursesAtom);\n\n\n  var getCourses = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var courses;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getAllCourses(\"MT2020\", \"fall\", 2020);\n\n            case 2:\n              courses = _context.sent;\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getCourses() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    document.getElementById(\"top\").scrollIntoView();\n    setStudentOutcomes(programs); //getCourses();\n  }, []); // useEffect(() => {\n  //   if (selectedProgram != null ){\n  //     const numOfStudentOutcomes = selectedProgram.outcomes.length;\n  //     const courseOutcomesArray = courseData.courses.map((course) => {\n  //       return {\n  //         name :course.name, \n  //         code: course.code,\n  //         outcomes: \n  //           course['course-outcomes'].map((outcome) => {\n  //             return {\n  //               outcome: outcome,\n  //               studentMap: new Array(numOfStudentOutcomes).fill(0)\n  //             }\n  //           })\n  //       }\n  //     });\n  //     setOutcomeMapping(courseOutcomesArray);\n  //     setCourses(outcomeMapping);\n  //   }\n  // }, [selectedProgram]);\n  // useEffect(() => {\n  //  // console.log(outcomeMapping);\n  // }, [outcomeMapping]);\n\n  var handleSetOption = function handleSetOption(e) {\n    var selection = programs.filter(function (program) {\n      return program.name == e.target.value;\n    })[0];\n    setSelectedProgram(selection);\n    var numOfStudentOutcomes = selection.outcomes.length;\n    var courseOutcomesArray = courseData.courses.map(function (course, idx) {\n      return {\n        name: course.name,\n        code: course.code,\n        index: idx,\n        outcomes: course['course-outcomes'].map(function (outcome) {\n          return {\n            outcome: outcome,\n            studentMap: new Array(numOfStudentOutcomes).fill(0)\n          };\n        })\n      };\n    });\n    setOutcomeMapping(courseOutcomesArray);\n  };\n\n  var handleCheck = function handleCheck(course, studentIdx, courseIdx) {\n    //console.log(course);\n    //console.log(course.outcomes[0].studentMap);\n    var temp = _toConsumableArray(outcomeMapping);\n\n    var currentCheckValue = temp[course.index].outcomes[courseIdx].studentMap[studentIdx];\n    temp[course.index].outcomes[courseIdx].studentMap[studentIdx] = currentCheckValue === 0 ? 1 : 0;\n    console.log(temp[course.index]); // setOutcomeMapping({\n    // })\n  };\n\n  var renderOptions = studentOutcomes && studentOutcomes.map(function (program, idx) {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: program.name,\n      children: program.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 12\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(RecoilRoot, {\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      id: \"top\",\n      w: \"80%\",\n      m: \"0 auto\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"2xl\",\n        fontWeight: \"bold\",\n        mt: \"1em\",\n        children: \"Student Outcome Mapping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Select, {\n        mt: \"1em\",\n        w: \"80%\",\n        id: \"course\",\n        placeholder: \"Select Program\",\n        variant: \"filled\",\n        onChange: handleSetOption,\n        children: renderOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: selectedProgram ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(StudentOutcomeList, {\n            selectedProgram: selectedProgram\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, _this), outcomeMapping ? outcomeMapping.map(function (course, idx) {\n            return /*#__PURE__*/_jsxDEV(CourseOutcomeTable, {\n              course: course,\n              handleCheck: handleCheck\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 26\n            }, _this);\n          }) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, _this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, _this);\n}, \"s6ZVNBq6YqUdw3WP2haQidvuOWk=\"));\n_c2 = OutcomeMapping;\nexport default OutcomeMapping;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"OutcomeMapping$React.memo\");\n$RefreshReg$(_c2, \"OutcomeMapping\");","map":{"version":3,"sources":["C:/Users/schic/OneDrive/Documents/UNT/Fall_20/4901 Capstone/Capstone Project/Frontend2/components/admin-components/OutcomeMapping/OutcomeMapping.js"],"names":["useState","useEffect","React","VStack","Text","Select","RecoilRoot","atom","selector","useRecoilState","useRecoilValue","StudentOutcomeList","programData","courseData","coursesAtom","CourseOutcomeTable","getAllCourses","TableGroup","OutcomeMapping","memo","programs","selectedProgram","setSelectedProgram","studentOutcomes","setStudentOutcomes","outcomeMapping","setOutcomeMapping","getCourses","courses","document","getElementById","scrollIntoView","handleSetOption","e","selection","filter","program","name","target","value","numOfStudentOutcomes","outcomes","length","courseOutcomesArray","map","course","idx","code","index","outcome","studentMap","Array","fill","handleCheck","studentIdx","courseIdx","temp","currentCheckValue","console","log","renderOptions"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport React from 'react';\r\nimport { VStack, Text, Select } from '@chakra-ui/react';\r\nimport {\r\n  RecoilRoot,\r\n  atom,\r\n  selector,\r\n  useRecoilState,\r\n  useRecoilValue,\r\n} from 'recoil';\r\n\r\nimport StudentOutcomeList from \"./StudentOutcomeList\";\r\nimport programData from \"../../../fake-data/programs.json\";\r\nimport courseData from \"../../../fake-data/course.json\";\r\nimport { coursesAtom } from './recoilStore';\r\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\r\nimport { getAllCourses } from '../../../api/APIHelper';\r\nimport TableGroup from \"./TableGroup\";\r\n\r\nconst OutcomeMapping = React.memo(() => {\r\n  const programs = programData.programs;\r\n\r\n  const [selectedProgram, setSelectedProgram] = useState();\r\n  const [studentOutcomes, setStudentOutcomes] = useState();\r\n  const [outcomeMapping, setOutcomeMapping] = useState();\r\n  //const [courses, setCourses] = useRecoilState(coursesAtom);\r\n\r\n  const getCourses = async () => {\r\n    const courses = await getAllCourses(\"MT2020\", \"fall\", 2020)\r\n    // console.log(course);\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.getElementById(\"top\").scrollIntoView();\r\n    setStudentOutcomes(programs);\r\n    //getCourses();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (selectedProgram != null ){\r\n  //     const numOfStudentOutcomes = selectedProgram.outcomes.length;\r\n\r\n  //     const courseOutcomesArray = courseData.courses.map((course) => {\r\n  //       return {\r\n  //         name :course.name, \r\n  //         code: course.code,\r\n  //         outcomes: \r\n  //           course['course-outcomes'].map((outcome) => {\r\n  //             return {\r\n  //               outcome: outcome,\r\n  //               studentMap: new Array(numOfStudentOutcomes).fill(0)\r\n  //             }\r\n  //           })\r\n  //       }\r\n  //     });\r\n  //     setOutcomeMapping(courseOutcomesArray);\r\n  //     setCourses(outcomeMapping);\r\n  //   }\r\n  // }, [selectedProgram]);\r\n\r\n  // useEffect(() => {\r\n  //  // console.log(outcomeMapping);\r\n  // }, [outcomeMapping]);\r\n  \r\n  const handleSetOption = (e) => {\r\n    const selection = programs.filter((program) => program.name == e.target.value)[0];\r\n    setSelectedProgram(selection);\r\n    const numOfStudentOutcomes = selection.outcomes.length;\r\n    const courseOutcomesArray = courseData.courses.map((course, idx) => {\r\n      return {\r\n        name: course.name,\r\n        code: course.code,\r\n        index: idx,\r\n        outcomes:\r\n          course['course-outcomes'].map((outcome) => {\r\n            return {\r\n              outcome: outcome,\r\n              studentMap: new Array(numOfStudentOutcomes).fill(0)\r\n            }\r\n          })\r\n      }\r\n    });\r\n    setOutcomeMapping(courseOutcomesArray);\r\n  };\r\n\r\n  const handleCheck = (course, studentIdx, courseIdx) => {\r\n    //console.log(course);\r\n    //console.log(course.outcomes[0].studentMap);\r\n    let temp = [...outcomeMapping];\r\n    const currentCheckValue = temp[course.index].outcomes[courseIdx].studentMap[studentIdx];\r\n    temp[course.index].outcomes[courseIdx].studentMap[studentIdx] = (currentCheckValue === 0) ? 1 : 0;\r\n    console.log(temp[course.index]);\r\n    // setOutcomeMapping({\r\n    // })\r\n  }\r\n\r\n  const renderOptions = studentOutcomes && studentOutcomes.map((program, idx) => {\r\n    return <option value={program.name} key={idx}>{program.name}</option>;\r\n  });\r\n\r\n  return (\r\n    <RecoilRoot>\r\n      <VStack id=\"top\" w=\"80%\" m=\"0 auto\">\r\n        <Text fontSize=\"2xl\" fontWeight=\"bold\" mt=\"1em\">\r\n          Student Outcome Mapping\r\n          </Text>\r\n        <Select\r\n          mt=\"1em\"\r\n          w=\"80%\"\r\n          id=\"course\"\r\n          placeholder=\"Select Program\"\r\n          variant=\"filled\"\r\n          onChange={handleSetOption}\r\n        >\r\n          {/* this should be filled with a list of courses from db */}\r\n          {renderOptions}\r\n        </Select>\r\n        <div>\r\n          {selectedProgram ?\r\n            <div>\r\n              <StudentOutcomeList selectedProgram={selectedProgram} />\r\n              {outcomeMapping ?\r\n                outcomeMapping.map((course, idx) => {\r\n                  return <CourseOutcomeTable course={course} key={idx} handleCheck={handleCheck}/>\r\n              })\r\n                : null\r\n              }\r\n            </div>\r\n            : null\r\n          }\r\n        </div>\r\n      </VStack>\r\n    </RecoilRoot>\r\n  );\r\n});\r\n\r\nexport default OutcomeMapping;\r\n"]},"metadata":{},"sourceType":"module"}