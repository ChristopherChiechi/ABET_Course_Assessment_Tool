{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/OutcomeMapping/OutcomeMapping.js\";\nimport { useState, useEffect, useReducer } from \"react\";\nimport { VStack, Text, Select } from '@chakra-ui/react';\nimport StudentOutcomeList from \"./StudentOutcomeList\";\nimport programData from \"../../../fake-data/programs.json\";\nimport courseData from \"../../../fake-data/course.json\";\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\nimport { getAllCourses } from '../../../api/APIHelper';\nimport TableGroup from \"./TableGroup\";\n\nconst OutcomeMapping = () => {\n  const programs = programData.programs;\n  const forceUpdate = useReducer(() => ({}))[1];\n  const {\n    0: selectedProgram,\n    1: setSelectedProgram\n  } = useState();\n  const {\n    0: studentOutcomes,\n    1: setStudentOutcomes\n  } = useState();\n  const {\n    0: outcomeMapping,\n    1: setOutcomeMapping\n  } = useState();\n\n  const getCourses = async () => {\n    const courses = await getAllCourses(\"MT2020\", \"fall\", 2020); // console.log(course);\n  };\n\n  useEffect(() => {\n    document.getElementById(\"top\").scrollIntoView();\n    setStudentOutcomes(programs);\n    getCourses();\n  }, []);\n  useEffect(() => {\n    if (selectedProgram != null) {\n      const numOfStudentOutcomes = selectedProgram.outcomes.length;\n      const courseOutcomesArray = courseData.courses.map(course => {\n        return {\n          name: course.name,\n          code: course.code,\n          outcomes: course['course-outcomes'].map(outcome => {\n            return {\n              outcome: outcome,\n              studentMap: new Array(numOfStudentOutcomes).fill(0)\n            };\n          })\n        };\n      });\n      setOutcomeMapping(courseOutcomesArray);\n      forceUpdate();\n    }\n  }, [selectedProgram]);\n  useEffect(() => {\n    // console.log(outcomeMapping);\n    forceUpdate();\n  }, [outcomeMapping]);\n\n  const handleSetOption = e => {\n    const selection = programs.filter(program => program.name == e.target.value)[0];\n    setSelectedProgram(selection);\n  };\n\n  const renderOptions = studentOutcomes && studentOutcomes.map((program, idx) => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: program.name,\n      children: program.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  });\n  const renderMappingTable = outcomeMapping ? outcomeMapping.map((course, idx) => {\n    return /*#__PURE__*/_jsxDEV(CourseOutcomeTable, {\n      course: course\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }, this);\n  }) : null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      id: \"top\",\n      w: \"80%\",\n      m: \"0 auto\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"2xl\",\n        fontWeight: \"bold\",\n        mt: \"1em\",\n        children: \"Student Outcome Mapping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        mt: \"1em\",\n        w: \"80%\",\n        id: \"course\",\n        placeholder: \"Select program\",\n        variant: \"filled\",\n        onChange: handleSetOption,\n        value: selectedProgram,\n        children: renderOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: selectedProgram && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(StudentOutcomeList, {\n            selectedProgram: selectedProgram\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TableGroup, {\n            courseData: outcomeMapping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nexport default OutcomeMapping;","map":{"version":3,"sources":["/Users/armaandhanoa/Documents/Documents - Armaanâ€™s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/OutcomeMapping/OutcomeMapping.js"],"names":["useState","useEffect","useReducer","VStack","Text","Select","StudentOutcomeList","programData","courseData","CourseOutcomeTable","getAllCourses","TableGroup","OutcomeMapping","programs","forceUpdate","selectedProgram","setSelectedProgram","studentOutcomes","setStudentOutcomes","outcomeMapping","setOutcomeMapping","getCourses","courses","document","getElementById","scrollIntoView","numOfStudentOutcomes","outcomes","length","courseOutcomesArray","map","course","name","code","outcome","studentMap","Array","fill","handleSetOption","e","selection","filter","program","target","value","renderOptions","idx","renderMappingTable"],"mappings":"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","sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\nimport { VStack, Text, Select } from '@chakra-ui/react';\nimport StudentOutcomeList from \"./StudentOutcomeList\";\nimport programData from \"../../../fake-data/programs.json\";\nimport courseData from \"../../../fake-data/course.json\";\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\nimport { getAllCourses } from '../../../api/APIHelper';\nimport TableGroup from \"./TableGroup\";\n\nconst OutcomeMapping = () => {\n  const programs = programData.programs;\n  const forceUpdate = useReducer(() => ({}))[1]\n\n  const [selectedProgram, setSelectedProgram] = useState();\n  const [studentOutcomes, setStudentOutcomes] = useState();\n  const [outcomeMapping, setOutcomeMapping] = useState();\n\n  const getCourses = async () => {\n    const courses = await getAllCourses(\"MT2020\", \"fall\", 2020)\n   // console.log(course);\n  }\n\n  useEffect(() => {\n    document.getElementById(\"top\").scrollIntoView();\n    setStudentOutcomes(programs);\n    getCourses();\n  },[]);\n\n  useEffect(() => {\n    if (selectedProgram != null ){\n      const numOfStudentOutcomes = selectedProgram.outcomes.length;\n      \n      const courseOutcomesArray = courseData.courses.map((course) => {\n        return {\n          name :course.name, \n          code: course.code,\n          outcomes: \n            course['course-outcomes'].map((outcome) => {\n              return {\n                outcome: outcome,\n                studentMap: new Array(numOfStudentOutcomes).fill(0)\n              }\n            })\n        }\n      });\n      setOutcomeMapping(courseOutcomesArray);\n      forceUpdate();\n    }\n  }, [selectedProgram]);\n\n  useEffect(() => {\n   // console.log(outcomeMapping);\n   forceUpdate();\n  }, [outcomeMapping]);\n\n  const handleSetOption = (e) => {\n    const selection = programs.filter((program) => program.name == e.target.value)[0];\n    setSelectedProgram(selection);\n  };\n\n  const renderOptions = studentOutcomes && studentOutcomes.map((program, idx) => {\n    return <option value={program.name} key={idx}>{program.name}</option>;\n  });\n  const renderMappingTable = outcomeMapping ? outcomeMapping.map((course, idx) => {\n    return <CourseOutcomeTable course={course} key={idx}/>\n  }) : null;\n\n  return (\n    <>\n      <VStack id=\"top\" w=\"80%\" m=\"0 auto\">\n          <Text fontSize=\"2xl\" fontWeight=\"bold\" mt=\"1em\">\n            Student Outcome Mapping\n          </Text>\n          <Select\n            mt=\"1em\"\n            w=\"80%\"\n            id=\"course\"\n            placeholder=\"Select program\"\n            variant=\"filled\"\n            onChange={handleSetOption}\n            value={selectedProgram}\n          >\n            {/* this should be filled with a list of courses from db */}\n            {renderOptions}\n          </Select>\n        <div>\n          {selectedProgram \n            &&\n              <div>\n                <StudentOutcomeList selectedProgram={selectedProgram} />\n                {/* {renderMappingTable} */}\n                <TableGroup courseData={outcomeMapping}/>\n              </div>\n          }\n        </div>\n      </VStack>\n    </>\n  );\n};\n\nexport default OutcomeMapping;\n"]},"metadata":{},"sourceType":"module"}