{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/OutcomeMapping/OutcomeMapping.js\";\nimport { useState, useEffect } from \"react\";\nimport { VStack, Badge, Select } from '@chakra-ui/react';\nimport { RecoilRoot, atom, selector, useRecoilState, useRecoilValue } from 'recoil';\nimport StudentOutcomeList from \"./StudentOutcomeList\";\nimport programData from \"../../../fake-data/programs.json\";\nimport courseData from \"../../../fake-data/course.json\";\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\n\nconst OutcomeMapping = () => {\n  const programs = programData.programs;\n  const {\n    0: option,\n    1: setOption\n  } = useState();\n  const {\n    0: studentOutcomes,\n    1: setStudentOutcomes\n  } = useState();\n  const {\n    0: outcomeMapping,\n    1: setOutcomeMapping\n  } = useState();\n  const test = atom({\n    key: 'test',\n    default: 'hello'\n  });\n  useEffect(() => {\n    document.getElementById(\"top\").scrollIntoView();\n    setStudentOutcomes(programs);\n  }, []);\n  useEffect(() => {\n    if (option != null) {\n      const numOfStudentOutcomes = studentOutcomes.length;\n      const courseOutcomesArray = courseData.courses.map(course => {\n        return {\n          name: course.name,\n          code: course.code,\n          outcomes: course['course-outcomes'].map(outcome => {\n            return {\n              outcome: outcome,\n              studentMap: new Array(numOfStudentOutcomes).fill(0)\n            };\n          })\n        };\n      });\n      setOutcomeMapping(courseOutcomesArray);\n    }\n  }, [option]);\n\n  const handleSetOption = e => {\n    setOption(e.target.value);\n  };\n\n  const renderOptions = programs.map(program => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: program.name,\n      children: program.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  });\n  const selectedProgram = programs.filter(program => program.name == option)[0];\n  const renderMappingTable = outcomeMapping ? outcomeMapping.map(course => {\n    return /*#__PURE__*/_jsxDEV(CourseOutcomeTable, {\n      course: course,\n      studentOutcomes: studentOutcomes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  }) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 8\n  }, this);\n  return /*#__PURE__*/_jsxDEV(RecoilRoot, {\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      id: \"top\",\n      w: \"80%\",\n      m: \"0 auto\",\n      children: [/*#__PURE__*/_jsxDEV(Badge, {\n        fontSize: \"2xl\",\n        mt: \"1em\",\n        children: \"Student Outcome Mapping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        mt: \"1em\",\n        w: \"80%\",\n        id: \"course\",\n        placeholder: \"Select program\",\n        variant: \"filled\",\n        onChange: handleSetOption,\n        value: option,\n        children: renderOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: option ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(StudentOutcomeList, {\n            selectedProgram: selectedProgram\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this), renderMappingTable]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\nexport default OutcomeMapping;","map":{"version":3,"sources":["/Users/armaandhanoa/Documents/Documents - Armaanâ€™s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/components/admin-components/OutcomeMapping/OutcomeMapping.js"],"names":["useState","useEffect","VStack","Badge","Select","RecoilRoot","atom","selector","useRecoilState","useRecoilValue","StudentOutcomeList","programData","courseData","CourseOutcomeTable","OutcomeMapping","programs","option","setOption","studentOutcomes","setStudentOutcomes","outcomeMapping","setOutcomeMapping","test","key","default","document","getElementById","scrollIntoView","numOfStudentOutcomes","length","courseOutcomesArray","courses","map","course","name","code","outcomes","outcome","studentMap","Array","fill","handleSetOption","e","target","value","renderOptions","program","selectedProgram","filter","renderMappingTable"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { VStack, Badge, Select } from '@chakra-ui/react';\nimport {\n  RecoilRoot,\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n} from 'recoil';\nimport StudentOutcomeList from \"./StudentOutcomeList\";\nimport programData from \"../../../fake-data/programs.json\";\nimport courseData from \"../../../fake-data/course.json\";\nimport CourseOutcomeTable from \"./CourseOutcomeTable\";\n\nconst OutcomeMapping = () => {\n  const programs = programData.programs;\n\n  const [option, setOption] = useState();\n  const [studentOutcomes, setStudentOutcomes] = useState();\n  const [outcomeMapping, setOutcomeMapping] = useState();\n\n  const test = atom({\n    key: 'test',\n    default: 'hello'\n  })\n\n  useEffect(() => {\n    document.getElementById(\"top\").scrollIntoView();\n    setStudentOutcomes(programs);\n  },[]);\n\n  useEffect(() => {\n    if (option != null){\n      const numOfStudentOutcomes = studentOutcomes.length;\n      const courseOutcomesArray = courseData.courses.map((course) => {\n        return {\n          name :course.name, \n          code: course.code,\n          outcomes: \n            course['course-outcomes'].map((outcome) => {\n              return {\n                outcome: outcome,\n                studentMap: new Array(numOfStudentOutcomes).fill(0)\n              }\n            })\n        }\n      });\n      setOutcomeMapping(courseOutcomesArray);\n    }\n  }, [option])\n\n  const handleSetOption = (e) => {\n    setOption(e.target.value);\n  };\n\n  const renderOptions = programs.map((program) => {\n    return <option value={program.name}>{program.name}</option>;\n  });\n  const selectedProgram = programs.filter((program) => program.name == option)[0];\n  const renderMappingTable = outcomeMapping ? outcomeMapping.map((course) => {\n    return <CourseOutcomeTable course={course} studentOutcomes={studentOutcomes}/>\n  }) : <div></div>\n\n  return (\n    <RecoilRoot>\n      <VStack id=\"top\" w=\"80%\" m=\"0 auto\">\n          <Badge fontSize=\"2xl\" mt=\"1em\">\n            Student Outcome Mapping\n          </Badge>\n          <Select\n            mt=\"1em\"\n            w=\"80%\"\n            id=\"course\"\n            placeholder=\"Select program\"\n            variant=\"filled\"\n            onChange={handleSetOption}\n            value={option}\n          >\n            {/* this should be filled with a list of courses from db */}\n            {renderOptions}\n          </Select>\n        <div>\n          {option \n            ? \n              <div>\n                <StudentOutcomeList selectedProgram={selectedProgram} />\n                {renderMappingTable}\n              </div>\n            : \n              <div></div>\n          }\n        </div>\n      </VStack>\n    </RecoilRoot>\n  );\n};\n\nexport default OutcomeMapping;\n"]},"metadata":{},"sourceType":"module"}