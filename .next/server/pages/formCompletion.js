module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = require('../ssr-module-cache.js');
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./pages/formCompletion.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./api/APIHelper.js":
/*!**************************!*\
  !*** ./api/APIHelper.js ***!
  \**************************/
/*! exports provided: getCourses, getInstructorCourses, getCoordinatorCourses, getFormBySection, postCoordinatorComment, postInstructorForm, login, getAllCourses, getFacultyList, getCoursesByDepartment, addFacultyMember, addCourse, removeCourse, postCourseOutcomes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCourses\", function() { return getCourses; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getInstructorCourses\", function() { return getInstructorCourses; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCoordinatorCourses\", function() { return getCoordinatorCourses; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFormBySection\", function() { return getFormBySection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"postCoordinatorComment\", function() { return postCoordinatorComment; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"postInstructorForm\", function() { return postInstructorForm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"login\", function() { return login; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getAllCourses\", function() { return getAllCourses; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFacultyList\", function() { return getFacultyList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCoursesByDepartment\", function() { return getCoursesByDepartment; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addFacultyMember\", function() { return addFacultyMember; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addCourse\", function() { return addCourse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeCourse\", function() { return removeCourse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"postCourseOutcomes\", function() { return postCourseOutcomes; });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"./api/api.js\");\n\nfunction getCourses() {\n  return courses;\n}\n;\nasync function getInstructorCourses(id, term) {\n  let api_helper = new _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let response = api_helper.getCourses(id, term.semester, term.year);\n  response.then(function (result) {\n    return result;\n  });\n  const instructorCourses = await response;\n  instructorCourses.filter(course => course.instructor.id === id);\n  return instructorCourses;\n}\n;\nasync function getCoordinatorCourses(id, term) {\n  let api_helper = new _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let response = api_helper.getCourses(id, term.semester, term.year);\n  response.then(function (result) {\n    return result;\n  });\n  const coordinatorCourses = await response;\n  coordinatorCourses.filter(course => course.coordinator.id === id);\n  return coordinatorCourses;\n}\n;\nasync function getFormBySection(id, year, semester, department, course, section) {\n  let api_helper = new _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let response = api_helper.getFormBySection(id, year, semester, department, course, section);\n  response.then(function (result) {\n    return result;\n  });\n  const formData = await response;\n  return formData;\n}\nasync function postCoordinatorComment(userid, year, semester, department, courseNumber, coordinatorComment, isCourseCompleted) {\n  let api_helper = new _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let response = api_helper.postComment(userid, year, semester, department, courseNumber, coordinatorComment, isCourseCompleted);\n  response.then(function (result) {\n    return result;\n  });\n  const success = await response;\n  console.log(success);\n}\nasync function postInstructorForm(userid, year, semester, department, courseNumber, sectionNumber, isSectionCompleted, outcomes, ITGrades, CSGrades, CEGrades) {\n  let api_helper = new _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let response = api_helper.postForm(userid, year, semester, department, courseNumber, sectionNumber, isSectionCompleted, outcomes, ITGrades, CSGrades, CEGrades);\n  response.then(function (result) {\n    return result;\n  });\n  const success = await response;\n  console.log(success);\n}\nasync function login(userid, password) {\n  let api_helper = new _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let response = api_helper.login(userid, password);\n  console.log(response);\n  return response.then(function (result) {\n    return result;\n  });\n}\nasync function getAllCourses(userid, semester, year) {\n  let api_helper = new _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let response = api_helper.getAllCourses(userid, semester, parseInt(year));\n  response.then(function (result) {\n    return result;\n  });\n  const courses = await response;\n  console.log(courses);\n  return courses;\n}\nasync function getFacultyList() {\n  let api_helper = new _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let response = api_helper.getFacultyList();\n  response.then(function (result) {\n    return result;\n  });\n  const faculty = await response;\n  return faculty;\n}\nasync function getCoursesByDepartment(department) {\n  let api_helper = new _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let response = api_helper.getCoursesByDepartment(department);\n  response.then(function (result) {\n    return result;\n  });\n  const courses = await response;\n  return courses;\n}\nasync function addFacultyMember(lastName, firstName, id, type) {\n  let api_helper = new _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let response = api_helper.addFacultyMember(firstName, lastName, id, type);\n  response.then(function (result) {\n    return result;\n  });\n  const success = await response;\n  console.log(success);\n}\nasync function addCourse(userid = \"\", firstName = \"\", lastName = \"\", year = 0, semester = \"\", courseNumber = 0, displayName = \"\", department = \"\") {\n  let api_helper = new _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let response = api_helper.addCourse(userid, firstName, lastName, year, semester, courseNumber, displayName, department);\n  response.then(function (result) {\n    return result;\n  });\n  const success = await response;\n  console.log(success);\n}\nasync function removeCourse(year, semester, courseNumber, department) {\n  let api_helper = new _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let response = api_helper.removeCourse(year, semester, courseNumber, department);\n  response.then(function (result) {\n    return result;\n  });\n  const success = await response;\n  console.log(success);\n  console.log(courseNumber);\n}\nasync function postCourseOutcomes() {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./api/APIHelper.js\n");

/***/ }),

/***/ "./api/api.js":
/*!********************!*\
  !*** ./api/api.js ***!
  \********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return API; });\n/* harmony import */ var cookie_cutter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cookie-cutter */ \"cookie-cutter\");\n/* harmony import */ var cookie_cutter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cookie_cutter__WEBPACK_IMPORTED_MODULE_0__);\n// Helper API Class\n\nconst root = \"https://localhost:44372/api\"; // The base URL for each request\n\nconst OK = 200; //200 Ok status code\n\nconst UNAUTHORIZED = 401; //401 Unauthorized status code\n\nconst NOT_LOGGED_IN_MSG = \"Error: Your session has expired. Please log in again.\";\nconst SERVER_ERROR_MSG = \"Internal Server Error: Please try again later.\";\nconst BAD_REQUEST_MSG = \"Error: Some of the provided parameters are invalid.\";\nvar token = \"\"; //holds value of the token cookie\n\nclass API {\n  /* This function is for getInitialProps.\r\n  cookieCutter is undefined in getInitialProps,\r\n  so this function sets the token to the value of the cookie\r\n  passed in from getInitialProps. */\n  setToken(t = \"\") {\n    token = t;\n  } // generic function for sending POST requests\n  //    Input: route and body\n  //    Output: The JSON that is returned from the route\n\n\n  async sendPost(route = \"\", body = {}, isFileDownload = false, fileName = \"\") {\n    const url = root + route; // Combine the root URL with the specified route\n\n    var statusCode; //holds the status code of the response\n    //if the request is not from getInitialProps, meaning cookieCutter is defined, retreive the cookie\n\n    if (typeof cookie_cutter__WEBPACK_IMPORTED_MODULE_0___default.a.get == \"function\") {\n      token = cookie_cutter__WEBPACK_IMPORTED_MODULE_0___default.a.get(\"token\");\n    }\n\n    return await fetch(url, {\n      method: \"POST\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + token\n      },\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(body)\n    }).then(response => {\n      statusCode = response.status;\n      if (statusCode == UNAUTHORIZED) //this check has to be here for some reason ¯\\_(ツ)_/¯\n        return;else if (isFileDownload) return response.blob();else return response.json();\n    }).then(json => {\n      if (statusCode == OK) {\n        if (isFileDownload) {\n          //download the responded file\n          var a = document.createElement(\"a\");\n          a.href = URL.createObjectURL(json);\n          a.setAttribute(\"download\", fileName);\n          a.click();\n          return;\n        } else return json;\n      } else if (statusCode == UNAUTHORIZED) return new ErrorObj(NOT_LOGGED_IN_MSG, false); //user's session has expired\n      else {\n          if (json.hasOwnProperty(\"message\")) return new ErrorObj(json[\"message\"]); //custom error message from API\n          else return new ErrorObj(BAD_REQUEST_MSG); //default bad input parameters message\n        }\n    }).catch(() => {\n      return new ErrorObj(SERVER_ERROR_MSG);\n    });\n  }\n\n  async sendFile(route = \"\", formData = new FormData()) {\n    const url = root + route; // Combine the root URL with the specified route\n\n    var statusCode; //holds the status code of the response\n\n    return await fetch(url, {\n      method: 'POST',\n      body: formData,\n      headers: {\n        \"Authorization\": \"Bearer \" + token\n      }\n    }).then(response => {\n      statusCode = response.status;\n      if (statusCode == UNAUTHORIZED) //this check has to be here for some reason ¯\\_(ツ)_/¯\n        return;else return response.json();\n    }).then(json => {\n      if (statusCode == OK) return json;else if (statusCode == UNAUTHORIZED) return new ErrorObj(NOT_LOGGED_IN_MSG, false); //user's session has expired\n      else {\n          if (json.hasOwnProperty(\"message\")) return new ErrorObj(json[\"message\"]); //custom error message from API\n          else return new ErrorObj(BAD_REQUEST_MSG); //default bad input parameters message\n        }\n    }).catch(() => {\n      return new ErrorObj(SERVER_ERROR_MSG);\n    });\n  } //---login(userid, password)---\n  //    Input: UserId, Password\n  //    Output: \"Admin\", \"Instructor\", \"Student/TA\" or boolean for failure\n\n\n  async login(userid = \"\", password = \"\") {\n    const body = {\n      userid: userid,\n      password: password\n    };\n    return await this.sendPost(\"/login\", body).then(json => {\n      if (json.hasOwnProperty(\"token\")) {\n        var expires = new Date();\n        expires.setHours(expires.getHours() + 24); //expires in 24 hours\n\n        expires = expires.toUTCString();\n        cookie_cutter__WEBPACK_IMPORTED_MODULE_0___default.a.set(\"token\", json[\"token\"], {\n          expires\n        }); //set token cookie\n\n        return json[\"role\"]; //return the role\n      }\n    }); //To use this data you must do the following:\n    //api.login(userid, password).then(role => {/*here is where the return value is accessible, it is either role string or a boolean indicating failure*/})\n  } //---logout(userid)---\n  //    Input: None\n  //    Output: None\n\n\n  logout() {\n    cookie_cutter__WEBPACK_IMPORTED_MODULE_0___default.a.set(\"token\", \"\", {\n      expires: new Date().toUTCString()\n    });\n    cookie_cutter__WEBPACK_IMPORTED_MODULE_0___default.a.set(\"user\", \"\", {\n      expires: new Date().toUTCString()\n    });\n  } //---getCourses(userid, semester, year)---\n  //    Input: UserId, Semester, Year\n  //    Output: Sections for the corresponding UserId, Semester and Year\n\n\n  async getCourses(userid = \"\", semester = \"\", year = 0) {\n    const body = {\n      userid: userid,\n      semester: semester,\n      year: year\n    };\n    return await this.sendPost(\"/sections/by-userid-semester-year\", body); //To use this data you must do the following:\n    //api.getCourses(userId, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  } //---getAllCourses(userid, semester, year)---  (Admin)\n  //    Input: UserId, Semester, Year\n  //    Output: Sections for the corresponding Semester and Year \n\n\n  async getAllCourses(userid = \"\", semester = \"\", year = 0) {\n    const body = {\n      Userid: userid,\n      Semester: semester,\n      Year: year\n    };\n    return await this.sendPost(\"/sections/by-semester-year\", body); //To use this data you must do the following:\n    //api.getAllCourses(userid, semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  } //---getCoursesBySemesterYear(semester, year)---  (Admin)\n  //    Input: Semester, Year\n  //    Output: All Courses for the corresponding semester and year \n\n\n  async getCoursesBySemesterYear(semester = \"\", year = 0) {\n    const body = {\n      semester: semester,\n      year: year\n    };\n    return await this.sendPost(\"/courses/get-by-year-semester\", body);\n  } //To use this data you must do the following:\n  //api.getCoursesBySemesterYear(semester, year).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  //---getFormsBySection(userid, year, semester, department, course, section)---\n  //    Input: UserId, Year, Semester, Department, CourseNumber, SectionNumber\n  //    Output: Forms for the corresponding UserId, Year, Semester, Department, CourseNumber, and SectionNumber\n\n\n  async getFormBySection(userid = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", sectionNumber = \"\") {\n    const body = {\n      Section: {\n        Instructor: {\n          Id: userid\n        },\n        Year: year,\n        Semester: semester,\n        Department: department,\n        CourseNumber: courseNumber,\n        SectionNumber: sectionNumber\n      }\n    };\n    return await this.sendPost(\"/forms/by-section\", body); //To use this data you must do the following:\n    //api.getFormsBySection(userid, year, semester, department, course, section).then(form => {/*here is where the data is accessible, form is an array of JSON objects*/})\n  } //---getFormsByCourse(userid, year, semester, department, course)---\n  //    Input: UserId, Year, Semester, Department, CourseNumber\n  //    Output: Forms for the corresponding UserId, Year, Semester, Department, and CourseNumber\n\n\n  async getFormsByCourse(userid = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\") {\n    const body = {\n      Course: {\n        Coordinator: {\n          Id: userid\n        },\n        Year: year,\n        Semester: semester,\n        Department: department,\n        CourseNumber: courseNumber\n      }\n    };\n    return await this.sendPost(\"/forms/by-course\", body); //To use this data you must do the following:\n    //api.getFormsByCourse(userid, year, semester, department, course).then(courses => {/*here is where the data is accessible, courses is an array of JSON objects*/})\n  } //---getAllForms(userid, semester, year)--- (Admin)\n  //    Input: UserId, Semester, Year\n  //    Output: Forms for the corresponding Semester and Year\n\n\n  async getAllForms(userid = \"\", semester = \"\", year = 0) {\n    const body = {\n      userid: userid,\n      semester: semester,\n      year: year\n    };\n    return await this.sendPost(\"/forms/by-semester-year\", body); //To use this data you must do the following:\n    //api.getAllForms(userid, semester, year).then(courses => {/*here is where the data is accessible, forms is an array of JSON objects*/})\n  } //---postForm(userId, year, semester, department, courseNumber, sectionNumber, isSectionCompleted, outcomes, ITGrades, CSGrades, CEGrades)---\n  //    Input: ^^^   (will also have pdf here later as an additional parameter)\n  //    Output: Success or Failure\n\n\n  async postForm(userId = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", sectionNumber = \"\", isSectionCompleted = false, outcomes = [], ITGrades = {}, CSGrades = {}, CEGrades = {}) {\n    // the body will also include any pdf to post in the future\n    //outcomes: an array of Course_Outcomes objects\n    //Course_Outcomes class:\n    //string outcome, int numberOfIT, int numberOfCS, int numberOfCE, StudentWorks[] studentWorks\n    //StudentWorks class:\n    //string studentWork, string fileUploaded (<-- will implement later)\n    //IT, CS, CE Grades class:\n    //int A, int B, int C, int D, int E, int F, int W, int I, int totalStudents\n    const body = {\n      form: {\n        section: {\n          instructor: {\n            id: userId\n          },\n          year,\n          semester,\n          department,\n          courseNumber,\n          sectionNumber,\n          isSectionCompleted\n        },\n        outcomes,\n        ITGrades,\n        CSGrades,\n        CEGrades\n      }\n    };\n    return await this.sendPost(\"/forms/post-form\", body);\n  } //---postComment(userId, year, semester, department, courseNumber, coordinatorComment, isCourseCompleted)---\n  //    Input: UserId, Year, Semester, department, courseNumber, coordinatorComment, isCourseCompleted\n  //    Output: Success or Failure\n\n\n  async postComment(userId = \"\", year = 0, semester = \"\", department = \"\", courseNumber = \"\", coordinatorComment = \"\", isCourseCompleted = false) {\n    const body = {\n      course: {\n        Coordinator: {\n          Id: userId\n        },\n        year,\n        semester,\n        department,\n        courseNumber,\n        coordinatorComment,\n        isCourseCompleted\n      }\n    };\n    return await this.sendPost(\"/courses/post-comment\", body);\n  } //---getBlankForm(userid)---\n  //    Input: Section object containing: CourseNumber, SectionNumber, and Id\n  //    Output: Blank Form\n  //async getBlankForm(userid) {\n\n\n  async getBlankForm(courseNumber = \"\", sectionNumber = \"\", sectionId = 0) {\n    const body = {\n      Section: {\n        CourseNumber: courseNumber,\n        SectionNumber: sectionNumber,\n        Id: sectionId\n      }\n    };\n    return await this.sendPost(\"/forms/new-blank\", body); //To use this data you must do the following:\n    //api.getBlankForm(userid).then(result => {/*here is where the return value is accessible, it is a JSON*/})\n  } //--getDefaultYearAndSemester()--\n  //    Input: Nothing\n  //    Output: Object Including Current Default Year and Semester\n\n\n  getDefaultYearAndSemester() {\n    var text = '{ \"year\": 0,' + // create string of object\n    ' \"semester\": \"\" }';\n    var ResultObj = JSON.parse(text); // create object from the string\n\n    var date = new Date(); // get the current date\n\n    var day = date.getDay(); // get the current day\n\n    var month = date.getMonth() + 1; // add one to month (by default January = 0)\n\n    ResultObj.year = date.getFullYear(); // get the full year from the date\n\n    ResultObj.semester = \"fall\"; // just to be safe\n    // Set the Default Semester Based on the Month\n\n    if (month > 8 || month == 8 && day >= 15) {\n      ResultObj.semester = \"fall\";\n    } else if (month > 5 || month == 5 && day >= 15) {\n      ResultObj.semester = \"summer\"; // since this is just a default semester, it always defaults to the longer semesters\n      // this is why it doesn't default to smaller summer semesters\n    } else {\n      ResultObj.semester = \"spring\";\n    }\n\n    return ResultObj; // return object including the year and semester\n  } //---addSection(userid, firstName, lastName, year, semester, courseNumber, sectionNumber, department, numberOfStudents)--- (Admin)\n  //    Input: ^^^\n  //    Output: Success or Failure\n\n\n  async addSection(userid = \"\", firstName = \"\", lastName = \"\", year = 0, semester = \"\", courseNumber = \"\", sectionNumber = \"\", department = \"\", numberOfStudents = 0) {\n    const body = {\n      section: {\n        instructor: {\n          id: userid,\n          firstName,\n          lastName\n        },\n        year,\n        semester,\n        courseNumber,\n        sectionNumber,\n        department,\n        isSectionCompleted: false,\n        numberOfStudents\n      }\n    };\n    return await this.sendPost(\"/sections/add-section\", body);\n  } //---getFacultyList()--- (Admin)\n  //    Input: none\n  //    Output: List of instructors, coordinators, adjunct faculties, and teaching fellows\n\n\n  async getFacultyList() {\n    return await this.sendPost(\"/faculty/get-list\", {});\n  } //---addFacultyMember(firstName, lastName, userid, role)--- (Admin)\n  //    Input: First Name, Last Name and User Id\n  //    Output: Success or Failure\n\n\n  async addFacultyMember(firstName = \"\", lastName = \"\", userId = \"\", facultyType = \"\") {\n    const body = {\n      info: {\n        firstName: firstName,\n        lastName: lastName,\n        id: userId\n      },\n      facultyType: facultyType\n    };\n    return await this.sendPost(\"/faculty/add-member\", body);\n  } //---getCoursesByDepartment(department)--- (Admin)\n  //    Input: department\n  //    Output: array of courses\n\n\n  async getCoursesByDepartment(department = \"\") {\n    const body = {\n      department\n    };\n    return await this.sendPost(\"/courses/get-by-department\", body);\n  } //---addProgram(program)--- (Admin)\n  //    Input: program name\n  //    Output: success or failure\n\n\n  async addProgram(program = \"\") {\n    const body = {\n      program\n    };\n    return await this.sendPost(\"/programs/add-program\", body);\n  } //---addCourse(userid, firstName, lastName, year, semester, courseNumber, displayName, department)--- (Admin)\n  //    Input: ^^^\n  //    Output: success or failure\n\n\n  async addCourse(userid = \"\", firstName = \"\", lastName = \"\", year = 0, semester = \"\", courseNumber = \"\", displayName = \"\", department = \"\") {\n    const body = {\n      Course: {\n        Coordinator: {\n          Id: userid,\n          firstName,\n          lastName\n        },\n        year,\n        semester,\n        courseNumber,\n        displayName,\n        department\n      }\n    };\n    return await this.sendPost(\"/courses/add-course\", body);\n  } //---removeCourse(year, semester, courseNumber, department)--- (Admin)\n  //    Input: year, semester, courseNumber, department\n  //    Output: success or failure\n\n\n  async removeCourse(year = 0, semester = \"\", courseNumber = \"\", department = \"\") {\n    const body = {\n      Course: {\n        year,\n        semester,\n        courseNumber,\n        department\n      }\n    };\n    return await this.sendPost(\"/courses/remove-course\", body);\n  } //---getCourseOutcomesByCourse(year, semester, courseNumber, department)--- (Admin)\n  //    Input: year, semester, courseNumber, department\n  //    Output: array of course outcomes\n\n\n  async getCourseOutcomesByCourse(year = 0, semester = \"\", courseNumber = \"\", department = \"\") {\n    const body = {\n      Course: {\n        year,\n        semester,\n        courseNumber,\n        department\n      }\n    };\n    return await this.sendPost(\"/course-outcomes/by-course\", body);\n  } //---postCourseOutcomes(outcomes)--- (Admin)\n  //    Input: array of outcome objects (see notes below)\n  //    Output: success or failure\n\n\n  async postCourseOutcomes(outcomes = []) {\n    //an outcome object contains the following:\n    //order (number), outcome (string), mappedStudentOutcomes(array of numbers)\n    //Example:\n    //{\n    //    order: 1, outcome: \"Accomplish things\", mappedStudentOutcomes: [1, 0, 0, 1, 0, 1]\n    //}\n    const body = {\n      courseOutcomesList: outcomes\n    };\n    return await this.sendPost(\"/course-outcomes/post-outcomes\", body);\n  } //---postSection(userid, firstName, lastName, year, semester, courseNumber, sectionNumber, department, numberOfStudents)--- (Instructor)\n  //   Input: Section object\n  //   Output: success or failure\n\n\n  async postSection(userid = \"\", year = 0, semester = \"\", courseNumber = \"\", sectionNumber = \"\", department = \"\", firstName = \"\", lastName = \"\", numberOfStudents = 0) {\n    const body = {\n      section: {\n        instructor: {\n          id: userid,\n          firstName,\n          lastName\n        },\n        year,\n        semester,\n        courseNumber,\n        sectionNumber,\n        department,\n        isSectionCompleted: false,\n        NumberOfStudents\n      }\n    };\n    return await this.sendPost(\"/sections/post-section\", body);\n  }\n\n  async uploadAccessDb(formData = new FormData()) {\n    return await this.sendFile('/upload-access-db', formData);\n  }\n\n  async uploadStudentWork(formData = new FormData(), outcomeId = 0, courseNumber = \"\", sectionNumber = \"\", semester = \"\", year = 0) {\n    //outcomeId is a unique id that identifies a certain outcome in the DB\n    //it will come from the DB when the instructor form page is loaded\n    formData.append(\"outcomeId\", outcomeId);\n    formData.append(\"courseNumber\", courseNumber);\n    formData.append(\"sectionNumber\", sectionNumber);\n    formData.append(\"semester\", semester);\n    formData.append(\"year\", year);\n    return await this.sendFile('/student-work/upload', formData);\n  }\n\n  async downloadStudentWork(fileId = \"\", fileName = \"\") {\n    //fileId is the unique file name given to a file when it is uploaded\n    //fileName is the original file name the file had before it was uploaded\n    //both of these values will come from the DB when the instructor form page is loaded\n    return await this.sendPost(\"/student-work/download\", {\n      fileId\n    }, true, fileName);\n  }\n\n}\n\nclass ErrorObj {\n  constructor(message = \"\", isLoggedIn = true) {\n    this.failure = true;\n    this.message = message;\n    this.isLoggedIn = isLoggedIn;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./api/api.js\n");

/***/ }),

/***/ "./pages/formCompletion.js":
/*!*********************************!*\
  !*** ./pages/formCompletion.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @chakra-ui/react */ \"@chakra-ui/react\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _api_APIHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/APIHelper */ \"./api/APIHelper.js\");\n\nvar _jsxFileName = \"/Users/armaandhanoa/Documents/Documents - Armaan\\u2019s Mac mini/Projects/ABET-Spring21/FontNew/ABET_Course_Assessment_Tool/pages/formCompletion.js\";\n\n\n\n\nconst formCompletion = ({\n  number,\n  section,\n  semester,\n  year,\n  id\n}) => {\n  console.log(number, section, semester, year, id);\n  const {\n    0: form,\n    1: setForm\n  } = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])();\n  console.log(form);\n\n  const getForm = async () => {\n    const formData = await Object(_api_APIHelper__WEBPACK_IMPORTED_MODULE_3__[\"getFormBySection\"])(id, 2020, \"Fall\", \"CSCE\", number.toString(), section);\n    setForm(formData);\n  };\n\n  Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(() => {\n    getForm();\n  }, []);\n  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_2__[\"Text\"], {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, undefined);\n};\n\nformCompletion.getInitialProps = ({\n  query\n}) => {\n  return {\n    number: query.number,\n    section: query.section,\n    semester: query.semester,\n    year: query.year,\n    id: 'MT2020'\n  };\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (formCompletion);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWdlcy9mb3JtQ29tcGxldGlvbi5qcz84YTAyIl0sIm5hbWVzIjpbImZvcm1Db21wbGV0aW9uIiwibnVtYmVyIiwic2VjdGlvbiIsInNlbWVzdGVyIiwieWVhciIsImlkIiwiY29uc29sZSIsImxvZyIsImZvcm0iLCJzZXRGb3JtIiwidXNlU3RhdGUiLCJnZXRGb3JtIiwiZm9ybURhdGEiLCJnZXRGb3JtQnlTZWN0aW9uIiwidG9TdHJpbmciLCJ1c2VFZmZlY3QiLCJnZXRJbml0aWFsUHJvcHMiLCJxdWVyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFnQkE7O0FBRUEsTUFBTUEsY0FBYyxHQUFHLENBQUM7QUFBRUMsUUFBRjtBQUFVQyxTQUFWO0FBQW1CQyxVQUFuQjtBQUE2QkMsTUFBN0I7QUFBbUNDO0FBQW5DLENBQUQsS0FBNkM7QUFDaEVDLFNBQU8sQ0FBQ0MsR0FBUixDQUFZTixNQUFaLEVBQW9CQyxPQUFwQixFQUE2QkMsUUFBN0IsRUFBdUNDLElBQXZDLEVBQTZDQyxFQUE3QztBQUNBLFFBQU07QUFBQSxPQUFDRyxJQUFEO0FBQUEsT0FBT0M7QUFBUCxNQUFrQkMsc0RBQVEsRUFBaEM7QUFDQUosU0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQVo7O0FBQ0EsUUFBTUcsT0FBTyxHQUFHLFlBQVk7QUFDeEIsVUFBTUMsUUFBUSxHQUFHLE1BQU1DLHVFQUFnQixDQUFDUixFQUFELEVBQUssSUFBTCxFQUFXLE1BQVgsRUFBbUIsTUFBbkIsRUFBMkJKLE1BQU0sQ0FBQ2EsUUFBUCxFQUEzQixFQUE4Q1osT0FBOUMsQ0FBdkM7QUFDQU8sV0FBTyxDQUFDRyxRQUFELENBQVA7QUFDSCxHQUhEOztBQU1BRyx5REFBUyxDQUFDLE1BQU07QUFDWkosV0FBTztBQUNWLEdBRlEsRUFFTixFQUZNLENBQVQ7QUFJQSxzQkFDSSxxRUFBQyxxREFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBLGVBREo7QUFJSCxDQWxCRDs7QUFvQkFYLGNBQWMsQ0FBQ2dCLGVBQWYsR0FBaUMsQ0FBQztBQUFFQztBQUFGLENBQUQsS0FBZTtBQUM1QyxTQUFPO0FBQ0hoQixVQUFNLEVBQUVnQixLQUFLLENBQUNoQixNQURYO0FBRUhDLFdBQU8sRUFBRWUsS0FBSyxDQUFDZixPQUZaO0FBR0hDLFlBQVEsRUFBRWMsS0FBSyxDQUFDZCxRQUhiO0FBSUhDLFFBQUksRUFBRWEsS0FBSyxDQUFDYixJQUpUO0FBS0hDLE1BQUUsRUFBRTtBQUxELEdBQVA7QUFPSCxDQVJEOztBQVVlTCw2RUFBZiIsImZpbGUiOiIuL3BhZ2VzL2Zvcm1Db21wbGV0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gICAgVGFibGUsXG4gICAgVGhlYWQsXG4gICAgVGJvZHksXG4gICAgVGZvb3QsXG4gICAgVHIsXG4gICAgVGgsXG4gICAgVGQsXG4gICAgVGFibGVDYXB0aW9uLFxuICAgIFZTdGFjayxcbiAgICBCdXR0b24sXG4gICAgVGV4dCxcbiAgICBCb3hcbn0gZnJvbSBcIkBjaGFrcmEtdWkvcmVhY3RcIjtcblxuXG5pbXBvcnQgeyBnZXRGb3JtQnlTZWN0aW9uIH0gZnJvbSAnLi4vYXBpL0FQSUhlbHBlcic7XG5cbmNvbnN0IGZvcm1Db21wbGV0aW9uID0gKHsgbnVtYmVyLCBzZWN0aW9uLCBzZW1lc3RlciwgeWVhciwgaWQgfSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKG51bWJlciwgc2VjdGlvbiwgc2VtZXN0ZXIsIHllYXIsIGlkKTtcbiAgICBjb25zdCBbZm9ybSwgc2V0Rm9ybV0gPSB1c2VTdGF0ZSgpOyBcbiAgICBjb25zb2xlLmxvZyhmb3JtKTtcbiAgICBjb25zdCBnZXRGb3JtID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IGF3YWl0IGdldEZvcm1CeVNlY3Rpb24oaWQsIDIwMjAsIFwiRmFsbFwiLCBcIkNTQ0VcIiwgbnVtYmVyLnRvU3RyaW5nKCksIHNlY3Rpb24pO1xuICAgICAgICBzZXRGb3JtKGZvcm1EYXRhKTtcbiAgICB9O1xuXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBnZXRGb3JtKCk7XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFRleHQ+XG4gICAgICAgIDwvVGV4dD5cbiAgICApXG59XG5cbmZvcm1Db21wbGV0aW9uLmdldEluaXRpYWxQcm9wcyA9ICh7IHF1ZXJ5IH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBudW1iZXI6IHF1ZXJ5Lm51bWJlcixcbiAgICAgICAgc2VjdGlvbjogcXVlcnkuc2VjdGlvbixcbiAgICAgICAgc2VtZXN0ZXI6IHF1ZXJ5LnNlbWVzdGVyLFxuICAgICAgICB5ZWFyOiBxdWVyeS55ZWFyLFxuICAgICAgICBpZDogJ01UMjAyMCdcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtQ29tcGxldGlvbjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/formCompletion.js\n");

/***/ }),

/***/ "@chakra-ui/react":
/*!***********************************!*\
  !*** external "@chakra-ui/react" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"@chakra-ui/react\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAY2hha3JhLXVpL3JlYWN0XCI/M2I2NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJAY2hha3JhLXVpL3JlYWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQGNoYWtyYS11aS9yZWFjdFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///@chakra-ui/react\n");

/***/ }),

/***/ "cookie-cutter":
/*!********************************!*\
  !*** external "cookie-cutter" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"cookie-cutter\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjb29raWUtY3V0dGVyXCI/MGM2ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJjb29raWUtY3V0dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29va2llLWN1dHRlclwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///cookie-cutter\n");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"react\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoicmVhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///react\n");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"react/jsx-dev-runtime\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdC9qc3gtZGV2LXJ1bnRpbWVcIj9jZDkwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6InJlYWN0L2pzeC1kZXYtcnVudGltZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0L2pzeC1kZXYtcnVudGltZVwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///react/jsx-dev-runtime\n");

/***/ })

/******/ });